!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	src/Color.h	/^		inline U8 A() const {$/;"	f	class:EGL::Color
ABS	src/codegen/instruction.h	448;"	d
ACLOCAL	projects/linux-ftk/Makefile	/^ACLOCAL = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-ftk\/missing --run aclocal-1.7$/;"	m
ACLOCAL	projects/linux-x11/Makefile	/^ACLOCAL = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-x11\/missing --run aclocal-1.7$/;"	m
ACLOCAL_M4	projects/linux-ftk/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	projects/linux-x11/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ADD	src/codegen/instruction.h	475;"	d
ADD_S	src/codegen/instruction.h	503;"	d
ALLOC_FLAGS	src/arm/CodeGenerator.cpp	84;"	d	file:
ALLOC_FLAGS	src/arm/GenFragment.cpp	72;"	d	file:
ALLOC_FLAGS	src/arm/GenLline.cpp	72;"	d	file:
ALLOC_FLAGS	src/arm/GenPoint.cpp	72;"	d	file:
ALLOC_FLAGS	src/arm/GenScanline.cpp	72;"	d	file:
ALLOC_FLAGS	src/arm/GenTriangle.cpp	72;"	d	file:
ALLOC_REG	src/arm/CodeGenerator.cpp	83;"	d	file:
ALLOC_REG	src/arm/GenFragment.cpp	71;"	d	file:
ALLOC_REG	src/arm/GenLline.cpp	71;"	d	file:
ALLOC_REG	src/arm/GenPoint.cpp	71;"	d	file:
ALLOC_REG	src/arm/GenScanline.cpp	71;"	d	file:
ALLOC_REG	src/arm/GenTriangle.cpp	71;"	d	file:
AMDEP_FALSE	projects/linux-ftk/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	projects/linux-x11/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_TRUE	projects/linux-ftk/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	projects/linux-x11/Makefile	/^AMDEP_TRUE = $/;"	m
AMTAR	projects/linux-ftk/Makefile	/^AMTAR = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-ftk\/missing --run tar$/;"	m
AMTAR	projects/linux-x11/Makefile	/^AMTAR = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-x11\/missing --run tar$/;"	m
AND	src/codegen/instruction.h	476;"	d
AND_S	src/codegen/instruction.h	504;"	d
APIENTRY	include/GLES/gl.h	69;"	d
APIENTRY	include/GLES/glext.h	53;"	d
APIENTRY	include/GLES/glext.h	57;"	d
APIENTRY	include/ug.h	32;"	d
APIENTRY	include/ug.h	35;"	d
APIENTRY	src/OGLES.h	65;"	d
AR	projects/linux-ftk/Makefile	/^AR = ar$/;"	m
AR	projects/linux-x11/Makefile	/^AR = ar$/;"	m
ARMCOND_AL	src/codegen/arm-codegen.h	/^	ARMCOND_AL = 0xE,          \/* Always *\/$/;"	e	enum:__anon67
ARMCOND_CC	src/codegen/arm-codegen.h	/^	ARMCOND_CC = 0x3,          \/* Carry clear; C = 0 *\/$/;"	e	enum:__anon67
ARMCOND_CS	src/codegen/arm-codegen.h	/^	ARMCOND_CS = 0x2,          \/* Carry set; C = 1 *\/$/;"	e	enum:__anon67
ARMCOND_EQ	src/codegen/arm-codegen.h	/^	ARMCOND_EQ = 0x0,          \/* Equal; Z = 1 *\/$/;"	e	enum:__anon67
ARMCOND_GE	src/codegen/arm-codegen.h	/^	ARMCOND_GE = 0xA,          \/* Signed greater than or equal; N = V *\/$/;"	e	enum:__anon67
ARMCOND_GT	src/codegen/arm-codegen.h	/^	ARMCOND_GT = 0xC,          \/* Signed greater than; Z = 0 && N = V *\/$/;"	e	enum:__anon67
ARMCOND_HI	src/codegen/arm-codegen.h	/^	ARMCOND_HI = 0x8,          \/* Unsigned higher; C = 1 && Z = 0 *\/$/;"	e	enum:__anon67
ARMCOND_HS	src/codegen/arm-codegen.h	/^	ARMCOND_HS = ARMCOND_CS,   \/* Unsigned higher or same; *\/$/;"	e	enum:__anon67
ARMCOND_LE	src/codegen/arm-codegen.h	/^	ARMCOND_LE = 0xD,          \/* Signed less than or equal; Z = 1 && N != V *\/$/;"	e	enum:__anon67
ARMCOND_LO	src/codegen/arm-codegen.h	/^	ARMCOND_LO = ARMCOND_CC,   \/* Unsigned lower *\/$/;"	e	enum:__anon67
ARMCOND_LS	src/codegen/arm-codegen.h	/^	ARMCOND_LS = 0x9,          \/* Unsigned lower or same; C = 0 || Z = 1 *\/$/;"	e	enum:__anon67
ARMCOND_LT	src/codegen/arm-codegen.h	/^	ARMCOND_LT = 0xB,          \/* Signed less than; N != V *\/$/;"	e	enum:__anon67
ARMCOND_MASK	src/codegen/arm-codegen.h	196;"	d
ARMCOND_MI	src/codegen/arm-codegen.h	/^	ARMCOND_MI = 0x4,          \/* Negative; N = 1 *\/$/;"	e	enum:__anon67
ARMCOND_NE	src/codegen/arm-codegen.h	/^	ARMCOND_NE = 0x1,          \/* Not equal, or unordered; Z = 0 *\/$/;"	e	enum:__anon67
ARMCOND_NV	src/codegen/arm-codegen.h	/^	ARMCOND_NV = 0xF,          \/* Never *\/$/;"	e	enum:__anon67
ARMCOND_PL	src/codegen/arm-codegen.h	/^	ARMCOND_PL = 0x5,          \/* Positive or zero; N = 0 *\/$/;"	e	enum:__anon67
ARMCOND_SHIFT	src/codegen/arm-codegen.h	/^	ARMCOND_SHIFT = 28$/;"	e	enum:__anon67
ARMCOND_VC	src/codegen/arm-codegen.h	/^	ARMCOND_VC = 0x7,          \/* No overflow; V = 0 *\/$/;"	e	enum:__anon67
ARMCOND_VS	src/codegen/arm-codegen.h	/^	ARMCOND_VS = 0x6,          \/* Overflow; V = 1 *\/$/;"	e	enum:__anon67
ARMCond	src/codegen/arm-codegen.h	/^} ARMCond;$/;"	t	typeref:enum:__anon67
ARMDPI_op2_imm	src/codegen/arm-codegen.h	/^} ARMDPI_op2_imm;$/;"	t	typeref:struct:__anon74
ARMDPI_op2_reg_imm	src/codegen/arm-codegen.h	/^} ARMDPI_op2_reg_imm;$/;"	t	typeref:union:__anon76
ARMDPI_op2_reg_reg	src/codegen/arm-codegen.h	/^} ARMDPI_op2_reg_reg;$/;"	t	typeref:union:__anon78
ARMDPI_op2_reg_shift	src/codegen/arm-codegen.h	/^} ARMDPI_op2_reg_shift;$/;"	t	typeref:struct:__anon75
ARMDis	src/codegen/arm-dis.h	/^} ARMDis;$/;"	t	typeref:struct:_ARMDis
ARMFPUConst	src/codegen/arm-codegen.h	/^} ARMFPUConst;$/;"	t	typeref:enum:__anon66
ARMInstr	src/codegen/arm-codegen.h	/^} ARMInstr;$/;"	t	typeref:union:__anon96
ARMInstrBR	src/codegen/arm-codegen.h	/^} ARMInstrBR;$/;"	t	typeref:struct:__anon73
ARMInstrCDP	src/codegen/arm-codegen.h	/^} ARMInstrCDP;$/;"	t	typeref:struct:__anon89
ARMInstrCDT	src/codegen/arm-codegen.h	/^} ARMInstrCDT;$/;"	t	typeref:struct:__anon90
ARMInstrCLZ	src/codegen/arm-codegen.h	/^} ARMInstrCLZ;$/;"	t	typeref:struct:__anon95
ARMInstrCRT	src/codegen/arm-codegen.h	/^} ARMInstrCRT;$/;"	t	typeref:struct:__anon91
ARMInstrDPI	src/codegen/arm-codegen.h	/^} ARMInstrDPI;$/;"	t	typeref:union:__anon80
ARMInstrGeneric	src/codegen/arm-codegen.h	/^} ARMInstrGeneric;$/;"	t	typeref:struct:__anon72
ARMInstrHXfer	src/codegen/arm-codegen.h	/^} ARMInstrHXfer;$/;"	t	typeref:struct:__anon86
ARMInstrMRS	src/codegen/arm-codegen.h	/^} ARMInstrMRS;$/;"	t	typeref:struct:__anon94
ARMInstrMRT	src/codegen/arm-codegen.h	/^} ARMInstrMRT;$/;"	t	typeref:struct:__anon82
ARMInstrMSR	src/codegen/arm-codegen.h	/^} ARMInstrMSR;$/;"	t	typeref:union:__anon92
ARMInstrMul	src/codegen/arm-codegen.h	/^} ARMInstrMul;$/;"	t	typeref:struct:__anon83
ARMInstrSWI	src/codegen/arm-codegen.h	/^} ARMInstrSWI;$/;"	t	typeref:struct:__anon88
ARMInstrSwap	src/codegen/arm-codegen.h	/^} ARMInstrSwap;$/;"	t	typeref:struct:__anon87
ARMInstrWXfer	src/codegen/arm-codegen.h	/^} ARMInstrWXfer;$/;"	t	typeref:union:__anon84
ARMOP_ADC	src/codegen/arm-codegen.h	/^	ARMOP_ADC = 0x5,$/;"	e	enum:__anon70
ARMOP_ADD	src/codegen/arm-codegen.h	/^	ARMOP_ADD = 0x4,$/;"	e	enum:__anon70
ARMOP_AND	src/codegen/arm-codegen.h	/^	ARMOP_AND = 0x0,$/;"	e	enum:__anon70
ARMOP_BIC	src/codegen/arm-codegen.h	/^	ARMOP_BIC = 0xe,$/;"	e	enum:__anon70
ARMOP_CMN	src/codegen/arm-codegen.h	/^	ARMOP_CMN = 0xb,$/;"	e	enum:__anon70
ARMOP_CMP	src/codegen/arm-codegen.h	/^	ARMOP_CMP = 0xa,$/;"	e	enum:__anon70
ARMOP_EOR	src/codegen/arm-codegen.h	/^	ARMOP_EOR = 0x1,$/;"	e	enum:__anon70
ARMOP_LDR	src/codegen/arm-codegen.h	/^	ARMOP_LDR = 0x1,$/;"	e	enum:__anon70
ARMOP_MLA	src/codegen/arm-codegen.h	/^	ARMOP_MLA   = 0x1, \/* Rd := (Rm*Rs)+Rn *\/$/;"	e	enum:__anon70
ARMOP_MOV	src/codegen/arm-codegen.h	/^	ARMOP_MOV = 0xd,$/;"	e	enum:__anon70
ARMOP_MUL	src/codegen/arm-codegen.h	/^	ARMOP_MUL   = 0x0, \/* Rd := Rm*Rs *\/$/;"	e	enum:__anon70
ARMOP_MVN	src/codegen/arm-codegen.h	/^	ARMOP_MVN = 0xf,$/;"	e	enum:__anon70
ARMOP_ORR	src/codegen/arm-codegen.h	/^	ARMOP_ORR = 0xc,$/;"	e	enum:__anon70
ARMOP_RSB	src/codegen/arm-codegen.h	/^	ARMOP_RSB = 0x3,$/;"	e	enum:__anon70
ARMOP_RSC	src/codegen/arm-codegen.h	/^	ARMOP_RSC = 0x7,$/;"	e	enum:__anon70
ARMOP_SBC	src/codegen/arm-codegen.h	/^	ARMOP_SBC = 0x6,$/;"	e	enum:__anon70
ARMOP_SMLAL	src/codegen/arm-codegen.h	/^	ARMOP_SMLAL = 0x7,$/;"	e	enum:__anon70
ARMOP_SMULL	src/codegen/arm-codegen.h	/^	ARMOP_SMULL = 0x6,$/;"	e	enum:__anon70
ARMOP_STR	src/codegen/arm-codegen.h	/^	ARMOP_STR = 0x0,$/;"	e	enum:__anon70
ARMOP_SUB	src/codegen/arm-codegen.h	/^	ARMOP_SUB = 0x2,$/;"	e	enum:__anon70
ARMOP_TEQ	src/codegen/arm-codegen.h	/^	ARMOP_TEQ = 0x9,$/;"	e	enum:__anon70
ARMOP_TST	src/codegen/arm-codegen.h	/^	ARMOP_TST = 0x8,$/;"	e	enum:__anon70
ARMOP_UMLAL	src/codegen/arm-codegen.h	/^	ARMOP_UMLAL = 0x5,$/;"	e	enum:__anon70
ARMOP_UMULL	src/codegen/arm-codegen.h	/^	ARMOP_UMULL = 0x4,$/;"	e	enum:__anon70
ARMOpcode	src/codegen/arm-codegen.h	/^} ARMOpcode;$/;"	t	typeref:enum:__anon70
ARMPSR	src/codegen/arm-codegen.h	/^} ARMPSR;$/;"	t	typeref:struct:__anon69
ARMREG_A1	src/codegen/arm-codegen.h	/^	ARMREG_A1 = ARMREG_R0,$/;"	e	enum:__anon65
ARMREG_A2	src/codegen/arm-codegen.h	/^	ARMREG_A2 = ARMREG_R1,$/;"	e	enum:__anon65
ARMREG_A3	src/codegen/arm-codegen.h	/^	ARMREG_A3 = ARMREG_R2,$/;"	e	enum:__anon65
ARMREG_A4	src/codegen/arm-codegen.h	/^	ARMREG_A4 = ARMREG_R3,$/;"	e	enum:__anon65
ARMREG_ACC0	src/codegen/arm-codegen.h	/^	ARMREG_ACC0 = ARMREG_CR0,$/;"	e	enum:__anon65
ARMREG_CPSR	src/codegen/arm-codegen.h	/^	ARMREG_CPSR = 0,$/;"	e	enum:__anon65
ARMREG_CR0	src/codegen/arm-codegen.h	/^	ARMREG_CR0 = 0,$/;"	e	enum:__anon65
ARMREG_CR1	src/codegen/arm-codegen.h	/^	ARMREG_CR1,$/;"	e	enum:__anon65
ARMREG_CR10	src/codegen/arm-codegen.h	/^	ARMREG_CR10,$/;"	e	enum:__anon65
ARMREG_CR11	src/codegen/arm-codegen.h	/^	ARMREG_CR11,$/;"	e	enum:__anon65
ARMREG_CR12	src/codegen/arm-codegen.h	/^	ARMREG_CR12,$/;"	e	enum:__anon65
ARMREG_CR13	src/codegen/arm-codegen.h	/^	ARMREG_CR13,$/;"	e	enum:__anon65
ARMREG_CR14	src/codegen/arm-codegen.h	/^	ARMREG_CR14,$/;"	e	enum:__anon65
ARMREG_CR15	src/codegen/arm-codegen.h	/^	ARMREG_CR15,$/;"	e	enum:__anon65
ARMREG_CR2	src/codegen/arm-codegen.h	/^	ARMREG_CR2,$/;"	e	enum:__anon65
ARMREG_CR3	src/codegen/arm-codegen.h	/^	ARMREG_CR3,$/;"	e	enum:__anon65
ARMREG_CR4	src/codegen/arm-codegen.h	/^	ARMREG_CR4,$/;"	e	enum:__anon65
ARMREG_CR5	src/codegen/arm-codegen.h	/^	ARMREG_CR5,$/;"	e	enum:__anon65
ARMREG_CR6	src/codegen/arm-codegen.h	/^	ARMREG_CR6,$/;"	e	enum:__anon65
ARMREG_CR7	src/codegen/arm-codegen.h	/^	ARMREG_CR7,$/;"	e	enum:__anon65
ARMREG_CR8	src/codegen/arm-codegen.h	/^	ARMREG_CR8,$/;"	e	enum:__anon65
ARMREG_CR9	src/codegen/arm-codegen.h	/^	ARMREG_CR9,$/;"	e	enum:__anon65
ARMREG_F0	src/codegen/arm-codegen.h	/^	ARMREG_F0 = 0,$/;"	e	enum:__anon65
ARMREG_F1	src/codegen/arm-codegen.h	/^	ARMREG_F1,$/;"	e	enum:__anon65
ARMREG_F2	src/codegen/arm-codegen.h	/^	ARMREG_F2,$/;"	e	enum:__anon65
ARMREG_F3	src/codegen/arm-codegen.h	/^	ARMREG_F3,$/;"	e	enum:__anon65
ARMREG_F4	src/codegen/arm-codegen.h	/^	ARMREG_F4,$/;"	e	enum:__anon65
ARMREG_F5	src/codegen/arm-codegen.h	/^	ARMREG_F5,$/;"	e	enum:__anon65
ARMREG_F6	src/codegen/arm-codegen.h	/^	ARMREG_F6,$/;"	e	enum:__anon65
ARMREG_F7	src/codegen/arm-codegen.h	/^	ARMREG_F7,$/;"	e	enum:__anon65
ARMREG_FP	src/codegen/arm-codegen.h	/^	ARMREG_FP = ARMREG_R11,$/;"	e	enum:__anon65
ARMREG_IP	src/codegen/arm-codegen.h	/^	ARMREG_IP = ARMREG_R12,$/;"	e	enum:__anon65
ARMREG_LR	src/codegen/arm-codegen.h	/^	ARMREG_LR = ARMREG_R14,$/;"	e	enum:__anon65
ARMREG_MAX	src/codegen/arm-codegen.h	/^	ARMREG_MAX = ARMREG_R15,$/;"	e	enum:__anon65
ARMREG_PC	src/codegen/arm-codegen.h	/^	ARMREG_PC = ARMREG_R15,$/;"	e	enum:__anon65
ARMREG_R0	src/codegen/arm-codegen.h	/^	ARMREG_R0 = 0,$/;"	e	enum:__anon65
ARMREG_R1	src/codegen/arm-codegen.h	/^	ARMREG_R1,$/;"	e	enum:__anon65
ARMREG_R10	src/codegen/arm-codegen.h	/^	ARMREG_R10,$/;"	e	enum:__anon65
ARMREG_R11	src/codegen/arm-codegen.h	/^	ARMREG_R11,$/;"	e	enum:__anon65
ARMREG_R12	src/codegen/arm-codegen.h	/^	ARMREG_R12,$/;"	e	enum:__anon65
ARMREG_R13	src/codegen/arm-codegen.h	/^	ARMREG_R13,$/;"	e	enum:__anon65
ARMREG_R14	src/codegen/arm-codegen.h	/^	ARMREG_R14,$/;"	e	enum:__anon65
ARMREG_R15	src/codegen/arm-codegen.h	/^	ARMREG_R15,$/;"	e	enum:__anon65
ARMREG_R2	src/codegen/arm-codegen.h	/^	ARMREG_R2,$/;"	e	enum:__anon65
ARMREG_R3	src/codegen/arm-codegen.h	/^	ARMREG_R3,$/;"	e	enum:__anon65
ARMREG_R4	src/codegen/arm-codegen.h	/^	ARMREG_R4,$/;"	e	enum:__anon65
ARMREG_R5	src/codegen/arm-codegen.h	/^	ARMREG_R5,$/;"	e	enum:__anon65
ARMREG_R6	src/codegen/arm-codegen.h	/^	ARMREG_R6,$/;"	e	enum:__anon65
ARMREG_R7	src/codegen/arm-codegen.h	/^	ARMREG_R7,$/;"	e	enum:__anon65
ARMREG_R8	src/codegen/arm-codegen.h	/^	ARMREG_R8,$/;"	e	enum:__anon65
ARMREG_R9	src/codegen/arm-codegen.h	/^	ARMREG_R9,$/;"	e	enum:__anon65
ARMREG_SP	src/codegen/arm-codegen.h	/^	ARMREG_SP = ARMREG_R13,$/;"	e	enum:__anon65
ARMREG_SPSR	src/codegen/arm-codegen.h	/^	ARMREG_SPSR = 1$/;"	e	enum:__anon65
ARMREG_V1	src/codegen/arm-codegen.h	/^	ARMREG_V1 = ARMREG_R4,$/;"	e	enum:__anon65
ARMREG_V2	src/codegen/arm-codegen.h	/^	ARMREG_V2 = ARMREG_R5,$/;"	e	enum:__anon65
ARMREG_V3	src/codegen/arm-codegen.h	/^	ARMREG_V3 = ARMREG_R6,$/;"	e	enum:__anon65
ARMREG_V4	src/codegen/arm-codegen.h	/^	ARMREG_V4 = ARMREG_R7,$/;"	e	enum:__anon65
ARMREG_V5	src/codegen/arm-codegen.h	/^	ARMREG_V5 = ARMREG_R8,$/;"	e	enum:__anon65
ARMREG_V6	src/codegen/arm-codegen.h	/^	ARMREG_V6 = ARMREG_R9,$/;"	e	enum:__anon65
ARMREG_V7	src/codegen/arm-codegen.h	/^	ARMREG_V7 = ARMREG_R10,$/;"	e	enum:__anon65
ARMReg	src/codegen/arm-codegen.h	/^} ARMReg;$/;"	t	typeref:enum:__anon65
ARMSHIFT_ASL	src/codegen/arm-codegen.h	/^	ARMSHIFT_ASL = ARMSHIFT_LSL$/;"	e	enum:__anon68
ARMSHIFT_ASR	src/codegen/arm-codegen.h	/^	ARMSHIFT_ASR = 2,$/;"	e	enum:__anon68
ARMSHIFT_LSL	src/codegen/arm-codegen.h	/^	ARMSHIFT_LSL = 0,$/;"	e	enum:__anon68
ARMSHIFT_LSR	src/codegen/arm-codegen.h	/^	ARMSHIFT_LSR = 1,$/;"	e	enum:__anon68
ARMSHIFT_ROR	src/codegen/arm-codegen.h	/^	ARMSHIFT_ROR = 3,$/;"	e	enum:__anon68
ARMShiftType	src/codegen/arm-codegen.h	/^} ARMShiftType;$/;"	t	typeref:enum:__anon68
ARM_ADCS_REG_IMM	src/codegen/arm_dpimacros.h	844;"	d
ARM_ADCS_REG_IMM8	src/codegen/arm_dpimacros.h	866;"	d
ARM_ADCS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	864;"	d
ARM_ADCS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	910;"	d
ARM_ADCS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	908;"	d
ARM_ADCS_REG_IMM_COND	src/codegen/arm_dpimacros.h	842;"	d
ARM_ADCS_REG_REG	src/codegen/arm_dpimacros.h	888;"	d
ARM_ADCS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	932;"	d
ARM_ADCS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	930;"	d
ARM_ADCS_REG_REG_COND	src/codegen/arm_dpimacros.h	886;"	d
ARM_ADC_REG_IMM	src/codegen/arm_dpimacros.h	840;"	d
ARM_ADC_REG_IMM8	src/codegen/arm_dpimacros.h	862;"	d
ARM_ADC_REG_IMM8_COND	src/codegen/arm_dpimacros.h	860;"	d
ARM_ADC_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	906;"	d
ARM_ADC_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	904;"	d
ARM_ADC_REG_IMM_COND	src/codegen/arm_dpimacros.h	838;"	d
ARM_ADC_REG_REG	src/codegen/arm_dpimacros.h	884;"	d
ARM_ADC_REG_REGSHIFT	src/codegen/arm_dpimacros.h	928;"	d
ARM_ADC_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	926;"	d
ARM_ADC_REG_REG_COND	src/codegen/arm_dpimacros.h	882;"	d
ARM_ADDS_REG_IMM	src/codegen/arm_dpimacros.h	732;"	d
ARM_ADDS_REG_IMM8	src/codegen/arm_dpimacros.h	754;"	d
ARM_ADDS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	752;"	d
ARM_ADDS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	798;"	d
ARM_ADDS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	796;"	d
ARM_ADDS_REG_IMM_COND	src/codegen/arm_dpimacros.h	730;"	d
ARM_ADDS_REG_REG	src/codegen/arm_dpimacros.h	776;"	d
ARM_ADDS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	820;"	d
ARM_ADDS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	818;"	d
ARM_ADDS_REG_REG_COND	src/codegen/arm_dpimacros.h	774;"	d
ARM_ADD_REG_IMM	src/codegen/arm_dpimacros.h	728;"	d
ARM_ADD_REG_IMM8	src/codegen/arm_dpimacros.h	750;"	d
ARM_ADD_REG_IMM8_COND	src/codegen/arm_dpimacros.h	748;"	d
ARM_ADD_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	794;"	d
ARM_ADD_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	792;"	d
ARM_ADD_REG_IMM_COND	src/codegen/arm_dpimacros.h	726;"	d
ARM_ADD_REG_REG	src/codegen/arm_dpimacros.h	772;"	d
ARM_ADD_REG_REGSHIFT	src/codegen/arm_dpimacros.h	816;"	d
ARM_ADD_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	814;"	d
ARM_ADD_REG_REG_COND	src/codegen/arm_dpimacros.h	770;"	d
ARM_ALL_ARG_REGS	src/codegen/arm-codegen.h	169;"	d
ARM_ANDS_REG_IMM	src/codegen/arm_dpimacros.h	284;"	d
ARM_ANDS_REG_IMM8	src/codegen/arm_dpimacros.h	306;"	d
ARM_ANDS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	304;"	d
ARM_ANDS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	350;"	d
ARM_ANDS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	348;"	d
ARM_ANDS_REG_IMM_COND	src/codegen/arm_dpimacros.h	282;"	d
ARM_ANDS_REG_REG	src/codegen/arm_dpimacros.h	328;"	d
ARM_ANDS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	372;"	d
ARM_ANDS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	370;"	d
ARM_ANDS_REG_REG_COND	src/codegen/arm_dpimacros.h	326;"	d
ARM_AND_REG_IMM	src/codegen/arm_dpimacros.h	280;"	d
ARM_AND_REG_IMM8	src/codegen/arm_dpimacros.h	302;"	d
ARM_AND_REG_IMM8_COND	src/codegen/arm_dpimacros.h	300;"	d
ARM_AND_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	346;"	d
ARM_AND_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	344;"	d
ARM_AND_REG_IMM_COND	src/codegen/arm_dpimacros.h	278;"	d
ARM_AND_REG_REG	src/codegen/arm_dpimacros.h	324;"	d
ARM_AND_REG_REGSHIFT	src/codegen/arm_dpimacros.h	368;"	d
ARM_AND_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	366;"	d
ARM_AND_REG_REG_COND	src/codegen/arm_dpimacros.h	322;"	d
ARM_B	src/codegen/arm-codegen.h	309;"	d
ARM_BICS_REG_IMM	src/codegen/arm_dpimacros.h	1292;"	d
ARM_BICS_REG_IMM8	src/codegen/arm_dpimacros.h	1314;"	d
ARM_BICS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1312;"	d
ARM_BICS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1358;"	d
ARM_BICS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1356;"	d
ARM_BICS_REG_IMM_COND	src/codegen/arm_dpimacros.h	1290;"	d
ARM_BICS_REG_REG	src/codegen/arm_dpimacros.h	1336;"	d
ARM_BICS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1380;"	d
ARM_BICS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1378;"	d
ARM_BICS_REG_REG_COND	src/codegen/arm_dpimacros.h	1334;"	d
ARM_BIC_REG_IMM	src/codegen/arm_dpimacros.h	1288;"	d
ARM_BIC_REG_IMM8	src/codegen/arm_dpimacros.h	1310;"	d
ARM_BIC_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1308;"	d
ARM_BIC_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1354;"	d
ARM_BIC_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1352;"	d
ARM_BIC_REG_IMM_COND	src/codegen/arm_dpimacros.h	1286;"	d
ARM_BIC_REG_REG	src/codegen/arm_dpimacros.h	1332;"	d
ARM_BIC_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1376;"	d
ARM_BIC_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1374;"	d
ARM_BIC_REG_REG_COND	src/codegen/arm_dpimacros.h	1330;"	d
ARM_BL	src/codegen/arm-codegen.h	312;"	d
ARM_BL_COND	src/codegen/arm-codegen.h	311;"	d
ARM_BR_ID	src/codegen/arm-codegen.h	301;"	d
ARM_BR_MASK	src/codegen/arm-codegen.h	302;"	d
ARM_BR_TAG	src/codegen/arm-codegen.h	303;"	d
ARM_B_COND	src/codegen/arm-codegen.h	308;"	d
ARM_CDP_ID	src/codegen/arm-codegen.h	959;"	d
ARM_CDP_ID2	src/codegen/arm-codegen.h	960;"	d
ARM_CDP_MASK	src/codegen/arm-codegen.h	961;"	d
ARM_CDP_TAG	src/codegen/arm-codegen.h	962;"	d
ARM_CDT_ID	src/codegen/arm-codegen.h	980;"	d
ARM_CDT_MASK	src/codegen/arm-codegen.h	981;"	d
ARM_CDT_TAG	src/codegen/arm-codegen.h	982;"	d
ARM_CLZ	src/codegen/arm-codegen.h	1229;"	d
ARM_CLZ_COND	src/codegen/arm-codegen.h	1226;"	d
ARM_CLZ_ID	src/codegen/arm-codegen.h	1215;"	d
ARM_CLZ_ID2	src/codegen/arm-codegen.h	1216;"	d
ARM_CLZ_MASK	src/codegen/arm-codegen.h	1217;"	d
ARM_CLZ_TAG	src/codegen/arm-codegen.h	1218;"	d
ARM_CMN_REG_IMM	src/codegen/arm_dpimacros.h	1586;"	d
ARM_CMN_REG_IMM8	src/codegen/arm_dpimacros.h	1600;"	d
ARM_CMN_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1598;"	d
ARM_CMN_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1628;"	d
ARM_CMN_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1626;"	d
ARM_CMN_REG_IMM_COND	src/codegen/arm_dpimacros.h	1584;"	d
ARM_CMN_REG_REG	src/codegen/arm_dpimacros.h	1614;"	d
ARM_CMN_REG_REG_COND	src/codegen/arm_dpimacros.h	1612;"	d
ARM_CMP_REG_IMM	src/codegen/arm_dpimacros.h	1516;"	d
ARM_CMP_REG_IMM8	src/codegen/arm_dpimacros.h	1530;"	d
ARM_CMP_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1528;"	d
ARM_CMP_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1558;"	d
ARM_CMP_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1556;"	d
ARM_CMP_REG_IMM_COND	src/codegen/arm_dpimacros.h	1514;"	d
ARM_CMP_REG_REG	src/codegen/arm_dpimacros.h	1544;"	d
ARM_CMP_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1572;"	d
ARM_CMP_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1570;"	d
ARM_CMP_REG_REG_COND	src/codegen/arm_dpimacros.h	1542;"	d
ARM_CPSR	src/codegen/arm-codegen.h	1075;"	d
ARM_CRT_ID	src/codegen/arm-codegen.h	999;"	d
ARM_CRT_ID2	src/codegen/arm-codegen.h	1000;"	d
ARM_CRT_MASK	src/codegen/arm-codegen.h	1001;"	d
ARM_CRT_TAG	src/codegen/arm-codegen.h	1002;"	d
ARM_DBRK	src/codegen/arm-codegen.h	1197;"	d
ARM_DEC	src/codegen/arm-codegen.h	1201;"	d
ARM_DEF_BR	src/codegen/arm-codegen.h	305;"	d
ARM_DEF_CLZ_COND	src/codegen/arm-codegen.h	1220;"	d
ARM_DEF_COND	src/codegen/arm-codegen.h	198;"	d
ARM_DEF_DPI_IMM	src/codegen/arm-codegen.h	385;"	d
ARM_DEF_DPI_IMM_COND	src/codegen/arm-codegen.h	373;"	d
ARM_DEF_DPI_REG_IMMSHIFT_COND	src/codegen/arm-codegen.h	402;"	d
ARM_DEF_DPI_REG_REGSHIFT_COND	src/codegen/arm-codegen.h	441;"	d
ARM_DEF_HXFER_IMM_COND	src/codegen/arm-codegen.h	831;"	d
ARM_DEF_HXFER_REG_MINUS_REG_COND	src/codegen/arm-codegen.h	887;"	d
ARM_DEF_HXFER_REG_REG_COND	src/codegen/arm-codegen.h	885;"	d
ARM_DEF_HXFER_REG_REG_UPDOWN_COND	src/codegen/arm-codegen.h	871;"	d
ARM_DEF_MRC_COND	src/codegen/arm-codegen.h	1009;"	d
ARM_DEF_MRS_COND	src/codegen/arm-codegen.h	1094;"	d
ARM_DEF_MRT	src/codegen/arm-codegen.h	486;"	d
ARM_DEF_MSR_REG_COND	src/codegen/arm-codegen.h	1057;"	d
ARM_DEF_MUL_COND	src/codegen/arm-codegen.h	555;"	d
ARM_DEF_PLD_IMM	src/codegen/arm-codegen.h	1240;"	d
ARM_DEF_PLD_REG_REG_UPDOWN_SHIFT	src/codegen/arm-codegen.h	1254;"	d
ARM_DEF_STF_IMM_COND	src/codegen/arm-codegen.h	1278;"	d
ARM_DEF_WXFER_IMM	src/codegen/arm-codegen.h	660;"	d
ARM_DEF_WXFER_REG_MINUS_REG_COND	src/codegen/arm-codegen.h	763;"	d
ARM_DEF_WXFER_REG_REG_COND	src/codegen/arm-codegen.h	761;"	d
ARM_DEF_WXFER_REG_REG_UPDOWN_COND	src/codegen/arm-codegen.h	746;"	d
ARM_DIS	src/codegen/arm-dis.h	29;"	d
ARM_DOWN	src/codegen/arm-codegen.h	/^	ARM_DOWN = 0$/;"	e	enum:__anon70
ARM_DPIOP_REG_IMM8ROT_COND	src/codegen/arm-codegen.h	389;"	d
ARM_DPIOP_REG_IMMSHIFT_COND	src/codegen/arm-codegen.h	414;"	d
ARM_DPIOP_REG_REGSHIFT_COND	src/codegen/arm-codegen.h	454;"	d
ARM_DPIOP_REG_REG_COND	src/codegen/arm-codegen.h	420;"	d
ARM_DPIOP_S_REG_IMM8ROT_COND	src/codegen/arm-codegen.h	391;"	d
ARM_DPIOP_S_REG_IMMSHIFT_COND	src/codegen/arm-codegen.h	417;"	d
ARM_DPIOP_S_REG_REGSHIFT_COND	src/codegen/arm-codegen.h	457;"	d
ARM_DPIOP_S_REG_REG_COND	src/codegen/arm-codegen.h	423;"	d
ARM_DPI_ID	src/codegen/arm-codegen.h	369;"	d
ARM_DPI_MASK	src/codegen/arm-codegen.h	370;"	d
ARM_DPI_TAG	src/codegen/arm-codegen.h	371;"	d
ARM_EMIT	src/codegen/arm-codegen.h	55;"	d
ARM_EMIT_WXFER_IMM	src/codegen/arm-codegen.h	675;"	d
ARM_EORS_REG_IMM	src/codegen/arm_dpimacros.h	396;"	d
ARM_EORS_REG_IMM8	src/codegen/arm_dpimacros.h	418;"	d
ARM_EORS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	416;"	d
ARM_EORS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	462;"	d
ARM_EORS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	460;"	d
ARM_EORS_REG_IMM_COND	src/codegen/arm_dpimacros.h	394;"	d
ARM_EORS_REG_REG	src/codegen/arm_dpimacros.h	440;"	d
ARM_EORS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	484;"	d
ARM_EORS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	482;"	d
ARM_EORS_REG_REG_COND	src/codegen/arm_dpimacros.h	438;"	d
ARM_EOR_REG_IMM	src/codegen/arm_dpimacros.h	392;"	d
ARM_EOR_REG_IMM8	src/codegen/arm_dpimacros.h	414;"	d
ARM_EOR_REG_IMM8_COND	src/codegen/arm_dpimacros.h	412;"	d
ARM_EOR_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	458;"	d
ARM_EOR_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	456;"	d
ARM_EOR_REG_IMM_COND	src/codegen/arm_dpimacros.h	390;"	d
ARM_EOR_REG_REG	src/codegen/arm_dpimacros.h	436;"	d
ARM_EOR_REG_REGSHIFT	src/codegen/arm_dpimacros.h	480;"	d
ARM_EOR_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	478;"	d
ARM_EOR_REG_REG_COND	src/codegen/arm_dpimacros.h	434;"	d
ARM_FCONST_0_0	src/codegen/arm-codegen.h	/^	ARM_FCONST_0_0 = 8,$/;"	e	enum:__anon66
ARM_FCONST_0_5	src/codegen/arm-codegen.h	/^	ARM_FCONST_0_5,$/;"	e	enum:__anon66
ARM_FCONST_10_0	src/codegen/arm-codegen.h	/^	ARM_FCONST_10_0$/;"	e	enum:__anon66
ARM_FCONST_1_0	src/codegen/arm-codegen.h	/^	ARM_FCONST_1_0,$/;"	e	enum:__anon66
ARM_FCONST_2_0	src/codegen/arm-codegen.h	/^	ARM_FCONST_2_0,$/;"	e	enum:__anon66
ARM_FCONST_3_0	src/codegen/arm-codegen.h	/^	ARM_FCONST_3_0,$/;"	e	enum:__anon66
ARM_FCONST_4_0	src/codegen/arm-codegen.h	/^	ARM_FCONST_4_0,$/;"	e	enum:__anon66
ARM_FCONST_5_0	src/codegen/arm-codegen.h	/^	ARM_FCONST_5_0,$/;"	e	enum:__anon66
ARM_H	src/codegen/arm-codegen.h	30;"	d
ARM_HXFER_ID	src/codegen/arm-codegen.h	825;"	d
ARM_HXFER_ID2	src/codegen/arm-codegen.h	826;"	d
ARM_HXFER_ID3	src/codegen/arm-codegen.h	827;"	d
ARM_HXFER_MASK	src/codegen/arm-codegen.h	828;"	d
ARM_HXFER_TAG	src/codegen/arm-codegen.h	829;"	d
ARM_IASM	src/codegen/arm-codegen.h	59;"	d
ARM_IASM	src/codegen/arm-codegen.h	61;"	d
ARM_IASM_DBRK	src/codegen/arm-codegen.h	1198;"	d
ARM_IASM_DPIOP_REG_IMM8ROT_COND	src/codegen/arm-codegen.h	395;"	d
ARM_IASM_DPIOP_REG_IMMSHIFT_COND	src/codegen/arm-codegen.h	427;"	d
ARM_IASM_DPIOP_REG_REGSHIFT_COND	src/codegen/arm-codegen.h	461;"	d
ARM_IASM_DPIOP_REG_REG_COND	src/codegen/arm-codegen.h	433;"	d
ARM_IASM_DPIOP_S_REG_IMM8ROT_COND	src/codegen/arm-codegen.h	397;"	d
ARM_IASM_DPIOP_S_REG_IMMSHIFT_COND	src/codegen/arm-codegen.h	430;"	d
ARM_IASM_DPIOP_S_REG_REGSHIFT_COND	src/codegen/arm-codegen.h	464;"	d
ARM_IASM_DPIOP_S_REG_REG_COND	src/codegen/arm-codegen.h	436;"	d
ARM_IASM_MLA	src/codegen/arm-codegen.h	601;"	d
ARM_IASM_MLAS	src/codegen/arm-codegen.h	605;"	d
ARM_IASM_MLAS_COND	src/codegen/arm-codegen.h	603;"	d
ARM_IASM_MLA_COND	src/codegen/arm-codegen.h	599;"	d
ARM_IASM_MUL	src/codegen/arm-codegen.h	580;"	d
ARM_IASM_MULS	src/codegen/arm-codegen.h	584;"	d
ARM_IASM_MULS_COND	src/codegen/arm-codegen.h	582;"	d
ARM_IASM_MUL_COND	src/codegen/arm-codegen.h	578;"	d
ARM_IASM_POP	src/codegen/arm-codegen.h	510;"	d
ARM_IASM_POP_NWB	src/codegen/arm-codegen.h	514;"	d
ARM_IASM_PUSH	src/codegen/arm-codegen.h	506;"	d
ARM_INC	src/codegen/arm-codegen.h	1200;"	d
ARM_LDMDB	src/codegen/arm-codegen.h	498;"	d
ARM_LDMIA	src/codegen/arm-codegen.h	501;"	d
ARM_LDMIA_WB	src/codegen/arm-codegen.h	500;"	d
ARM_LDRB_IMM	src/codegen/arm-codegen.h	708;"	d
ARM_LDRB_IMM_COND	src/codegen/arm-codegen.h	705;"	d
ARM_LDRB_IMM_POST	src/codegen/arm-codegen.h	697;"	d
ARM_LDRB_IMM_POST_COND	src/codegen/arm-codegen.h	694;"	d
ARM_LDRB_REG_REG	src/codegen/arm-codegen.h	778;"	d
ARM_LDRB_REG_REG_SHIFT	src/codegen/arm-codegen.h	776;"	d
ARM_LDRB_REG_REG_SHIFT_COND	src/codegen/arm-codegen.h	774;"	d
ARM_LDRH_IMM	src/codegen/arm-codegen.h	848;"	d
ARM_LDRH_IMM_COND	src/codegen/arm-codegen.h	846;"	d
ARM_LDRH_REG_REG	src/codegen/arm-codegen.h	892;"	d
ARM_LDRH_REG_REG_COND	src/codegen/arm-codegen.h	890;"	d
ARM_LDRSB_IMM	src/codegen/arm-codegen.h	856;"	d
ARM_LDRSB_IMM_COND	src/codegen/arm-codegen.h	854;"	d
ARM_LDRSB_REG_REG	src/codegen/arm-codegen.h	900;"	d
ARM_LDRSB_REG_REG_COND	src/codegen/arm-codegen.h	898;"	d
ARM_LDRSH_IMM	src/codegen/arm-codegen.h	852;"	d
ARM_LDRSH_IMM_COND	src/codegen/arm-codegen.h	850;"	d
ARM_LDRSH_REG_REG	src/codegen/arm-codegen.h	896;"	d
ARM_LDRSH_REG_REG_COND	src/codegen/arm-codegen.h	894;"	d
ARM_LDR_IMM	src/codegen/arm-codegen.h	703;"	d
ARM_LDR_IMM_COND	src/codegen/arm-codegen.h	700;"	d
ARM_LDR_IMM_POST	src/codegen/arm-codegen.h	692;"	d
ARM_LDR_IMM_POST_COND	src/codegen/arm-codegen.h	689;"	d
ARM_LDR_REG_REG	src/codegen/arm-codegen.h	771;"	d
ARM_LDR_REG_REG_SHIFT	src/codegen/arm-codegen.h	769;"	d
ARM_LDR_REG_REG_SHIFT_COND	src/codegen/arm-codegen.h	767;"	d
ARM_MLA	src/codegen/arm-codegen.h	591;"	d
ARM_MLAS	src/codegen/arm-codegen.h	595;"	d
ARM_MLAS_COND	src/codegen/arm-codegen.h	593;"	d
ARM_MLA_COND	src/codegen/arm-codegen.h	589;"	d
ARM_MOVS_REG_IMM	src/codegen/arm_dpimacros.h	38;"	d
ARM_MOVS_REG_IMM8	src/codegen/arm_dpimacros.h	62;"	d
ARM_MOVS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	60;"	d
ARM_MOVS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	110;"	d
ARM_MOVS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	108;"	d
ARM_MOVS_REG_IMM_COND	src/codegen/arm_dpimacros.h	36;"	d
ARM_MOVS_REG_REG	src/codegen/arm_dpimacros.h	86;"	d
ARM_MOVS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	135;"	d
ARM_MOVS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	133;"	d
ARM_MOVS_REG_REG_COND	src/codegen/arm_dpimacros.h	84;"	d
ARM_MOV_REG_IMM	src/codegen/arm_dpimacros.h	33;"	d
ARM_MOV_REG_IMM8	src/codegen/arm_dpimacros.h	57;"	d
ARM_MOV_REG_IMM8_COND	src/codegen/arm_dpimacros.h	55;"	d
ARM_MOV_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	105;"	d
ARM_MOV_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	103;"	d
ARM_MOV_REG_IMM_COND	src/codegen/arm_dpimacros.h	31;"	d
ARM_MOV_REG_REG	src/codegen/arm_dpimacros.h	81;"	d
ARM_MOV_REG_REGSHIFT	src/codegen/arm_dpimacros.h	130;"	d
ARM_MOV_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	128;"	d
ARM_MOV_REG_REG_COND	src/codegen/arm_dpimacros.h	79;"	d
ARM_MRC	src/codegen/arm-codegen.h	1022;"	d
ARM_MRC_COND	src/codegen/arm-codegen.h	1020;"	d
ARM_MRS_COND	src/codegen/arm-codegen.h	1100;"	d
ARM_MRS_CPSR	src/codegen/arm-codegen.h	1106;"	d
ARM_MRS_CPSR_COND	src/codegen/arm-codegen.h	1103;"	d
ARM_MRS_ID	src/codegen/arm-codegen.h	1088;"	d
ARM_MRS_ID2	src/codegen/arm-codegen.h	1089;"	d
ARM_MRS_ID3	src/codegen/arm-codegen.h	1090;"	d
ARM_MRS_MASK	src/codegen/arm-codegen.h	1091;"	d
ARM_MRS_SPSR	src/codegen/arm-codegen.h	1112;"	d
ARM_MRS_SPSR_COND	src/codegen/arm-codegen.h	1109;"	d
ARM_MRS_TAG	src/codegen/arm-codegen.h	1092;"	d
ARM_MRT_ID	src/codegen/arm-codegen.h	482;"	d
ARM_MRT_MASK	src/codegen/arm-codegen.h	483;"	d
ARM_MRT_TAG	src/codegen/arm-codegen.h	484;"	d
ARM_MSR_ID	src/codegen/arm-codegen.h	1044;"	d
ARM_MSR_ID2	src/codegen/arm-codegen.h	1045;"	d
ARM_MSR_ID3	src/codegen/arm-codegen.h	1046;"	d
ARM_MSR_ID4	src/codegen/arm-codegen.h	1047;"	d
ARM_MSR_MASK	src/codegen/arm-codegen.h	1048;"	d
ARM_MSR_REG	src/codegen/arm-codegen.h	1067;"	d
ARM_MSR_REG_COND	src/codegen/arm-codegen.h	1064;"	d
ARM_MSR_TAG	src/codegen/arm-codegen.h	1052;"	d
ARM_MUL	src/codegen/arm-codegen.h	568;"	d
ARM_MULS	src/codegen/arm-codegen.h	572;"	d
ARM_MULS_COND	src/codegen/arm-codegen.h	570;"	d
ARM_MULS_REG_REG	src/codegen/arm-codegen.h	575;"	d
ARM_MUL_COND	src/codegen/arm-codegen.h	566;"	d
ARM_MUL_ID	src/codegen/arm-codegen.h	550;"	d
ARM_MUL_ID2	src/codegen/arm-codegen.h	551;"	d
ARM_MUL_MASK	src/codegen/arm-codegen.h	552;"	d
ARM_MUL_REG_REG	src/codegen/arm-codegen.h	574;"	d
ARM_MUL_TAG	src/codegen/arm-codegen.h	553;"	d
ARM_MVNS_REG_IMM	src/codegen/arm_dpimacros.h	159;"	d
ARM_MVNS_REG_IMM8	src/codegen/arm_dpimacros.h	183;"	d
ARM_MVNS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	181;"	d
ARM_MVNS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	231;"	d
ARM_MVNS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	229;"	d
ARM_MVNS_REG_IMM_COND	src/codegen/arm_dpimacros.h	157;"	d
ARM_MVNS_REG_REG	src/codegen/arm_dpimacros.h	207;"	d
ARM_MVNS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	256;"	d
ARM_MVNS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	254;"	d
ARM_MVNS_REG_REG_COND	src/codegen/arm_dpimacros.h	205;"	d
ARM_MVN_REG_IMM	src/codegen/arm_dpimacros.h	154;"	d
ARM_MVN_REG_IMM8	src/codegen/arm_dpimacros.h	178;"	d
ARM_MVN_REG_IMM8_COND	src/codegen/arm_dpimacros.h	176;"	d
ARM_MVN_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	226;"	d
ARM_MVN_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	224;"	d
ARM_MVN_REG_IMM_COND	src/codegen/arm_dpimacros.h	152;"	d
ARM_MVN_REG_REG	src/codegen/arm_dpimacros.h	202;"	d
ARM_MVN_REG_REGSHIFT	src/codegen/arm_dpimacros.h	251;"	d
ARM_MVN_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	249;"	d
ARM_MVN_REG_REG_COND	src/codegen/arm_dpimacros.h	200;"	d
ARM_NOP	src/codegen/arm-codegen.h	1118;"	d
ARM_NUM_ARG_REGS	src/codegen/arm-codegen.h	160;"	d
ARM_NUM_GLOBAL_REGS	src/codegen/arm-codegen.h	166;"	d
ARM_NUM_VARIABLE_REGS	src/codegen/arm-codegen.h	163;"	d
ARM_ORRS_REG_IMM	src/codegen/arm_dpimacros.h	1180;"	d
ARM_ORRS_REG_IMM8	src/codegen/arm_dpimacros.h	1202;"	d
ARM_ORRS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1200;"	d
ARM_ORRS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1246;"	d
ARM_ORRS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1244;"	d
ARM_ORRS_REG_IMM_COND	src/codegen/arm_dpimacros.h	1178;"	d
ARM_ORRS_REG_REG	src/codegen/arm_dpimacros.h	1224;"	d
ARM_ORRS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1268;"	d
ARM_ORRS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1266;"	d
ARM_ORRS_REG_REG_COND	src/codegen/arm_dpimacros.h	1222;"	d
ARM_ORR_REG_IMM	src/codegen/arm_dpimacros.h	1176;"	d
ARM_ORR_REG_IMM8	src/codegen/arm_dpimacros.h	1198;"	d
ARM_ORR_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1196;"	d
ARM_ORR_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1242;"	d
ARM_ORR_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1240;"	d
ARM_ORR_REG_IMM_COND	src/codegen/arm_dpimacros.h	1174;"	d
ARM_ORR_REG_REG	src/codegen/arm_dpimacros.h	1220;"	d
ARM_ORR_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1264;"	d
ARM_ORR_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1262;"	d
ARM_ORR_REG_REG_COND	src/codegen/arm_dpimacros.h	1218;"	d
ARM_PLD_ID	src/codegen/arm-codegen.h	1236;"	d
ARM_PLD_ID2	src/codegen/arm-codegen.h	1237;"	d
ARM_PLD_IMM	src/codegen/arm-codegen.h	1252;"	d
ARM_PLD_MASK	src/codegen/arm-codegen.h	1238;"	d
ARM_PLD_REG_MINUS_REG	src/codegen/arm-codegen.h	1274;"	d
ARM_PLD_REG_PLUS_REG	src/codegen/arm-codegen.h	1271;"	d
ARM_PLD_REG_REG_UPDOWN_SHIFT	src/codegen/arm-codegen.h	1268;"	d
ARM_PLD_TAG	src/codegen/arm-codegen.h	1239;"	d
ARM_POP	src/codegen/arm-codegen.h	509;"	d
ARM_POP1	src/codegen/arm-codegen.h	534;"	d
ARM_POP2	src/codegen/arm-codegen.h	533;"	d
ARM_POP3	src/codegen/arm-codegen.h	532;"	d
ARM_POP4	src/codegen/arm-codegen.h	531;"	d
ARM_POP5	src/codegen/arm-codegen.h	530;"	d
ARM_POP6	src/codegen/arm-codegen.h	529;"	d
ARM_POP7	src/codegen/arm-codegen.h	528;"	d
ARM_POP8	src/codegen/arm-codegen.h	527;"	d
ARM_POP9	src/codegen/arm-codegen.h	526;"	d
ARM_POP_NWB	src/codegen/arm-codegen.h	513;"	d
ARM_PSR_C	src/codegen/arm-codegen.h	1070;"	d
ARM_PSR_F	src/codegen/arm-codegen.h	1073;"	d
ARM_PSR_S	src/codegen/arm-codegen.h	1072;"	d
ARM_PSR_X	src/codegen/arm-codegen.h	1071;"	d
ARM_PUSH	src/codegen/arm-codegen.h	505;"	d
ARM_PUSH1	src/codegen/arm-codegen.h	516;"	d
ARM_PUSH2	src/codegen/arm-codegen.h	517;"	d
ARM_PUSH3	src/codegen/arm-codegen.h	518;"	d
ARM_PUSH4	src/codegen/arm-codegen.h	519;"	d
ARM_PUSH5	src/codegen/arm-codegen.h	520;"	d
ARM_PUSH6	src/codegen/arm-codegen.h	521;"	d
ARM_PUSH7	src/codegen/arm-codegen.h	522;"	d
ARM_PUSH8	src/codegen/arm-codegen.h	523;"	d
ARM_PUSH9	src/codegen/arm-codegen.h	524;"	d
ARM_RORS_IMM	src/codegen/arm-codegen.h	1154;"	d
ARM_RORS_IMM_COND	src/codegen/arm-codegen.h	1152;"	d
ARM_RORS_REG	src/codegen/arm-codegen.h	1193;"	d
ARM_RORS_REG_COND	src/codegen/arm-codegen.h	1191;"	d
ARM_RORS_REG_REG	src/codegen/arm-codegen.h	1195;"	d
ARM_ROR_IMM	src/codegen/arm-codegen.h	1150;"	d
ARM_ROR_IMM_COND	src/codegen/arm-codegen.h	1148;"	d
ARM_ROR_REG	src/codegen/arm-codegen.h	1189;"	d
ARM_ROR_REG_COND	src/codegen/arm-codegen.h	1187;"	d
ARM_RSBS_REG_IMM	src/codegen/arm_dpimacros.h	620;"	d
ARM_RSBS_REG_IMM8	src/codegen/arm_dpimacros.h	642;"	d
ARM_RSBS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	640;"	d
ARM_RSBS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	686;"	d
ARM_RSBS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	684;"	d
ARM_RSBS_REG_IMM_COND	src/codegen/arm_dpimacros.h	618;"	d
ARM_RSBS_REG_REG	src/codegen/arm_dpimacros.h	664;"	d
ARM_RSBS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	708;"	d
ARM_RSBS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	706;"	d
ARM_RSBS_REG_REG_COND	src/codegen/arm_dpimacros.h	662;"	d
ARM_RSB_REG_IMM	src/codegen/arm_dpimacros.h	616;"	d
ARM_RSB_REG_IMM8	src/codegen/arm_dpimacros.h	638;"	d
ARM_RSB_REG_IMM8_COND	src/codegen/arm_dpimacros.h	636;"	d
ARM_RSB_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	682;"	d
ARM_RSB_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	680;"	d
ARM_RSB_REG_IMM_COND	src/codegen/arm_dpimacros.h	614;"	d
ARM_RSB_REG_REG	src/codegen/arm_dpimacros.h	660;"	d
ARM_RSB_REG_REGSHIFT	src/codegen/arm_dpimacros.h	704;"	d
ARM_RSB_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	702;"	d
ARM_RSB_REG_REG_COND	src/codegen/arm_dpimacros.h	658;"	d
ARM_RSCS_REG_IMM	src/codegen/arm_dpimacros.h	1068;"	d
ARM_RSCS_REG_IMM8	src/codegen/arm_dpimacros.h	1090;"	d
ARM_RSCS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1088;"	d
ARM_RSCS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1134;"	d
ARM_RSCS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1132;"	d
ARM_RSCS_REG_IMM_COND	src/codegen/arm_dpimacros.h	1066;"	d
ARM_RSCS_REG_REG	src/codegen/arm_dpimacros.h	1112;"	d
ARM_RSCS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1156;"	d
ARM_RSCS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1154;"	d
ARM_RSCS_REG_REG_COND	src/codegen/arm_dpimacros.h	1110;"	d
ARM_RSC_REG_IMM	src/codegen/arm_dpimacros.h	1064;"	d
ARM_RSC_REG_IMM8	src/codegen/arm_dpimacros.h	1086;"	d
ARM_RSC_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1084;"	d
ARM_RSC_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1130;"	d
ARM_RSC_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1128;"	d
ARM_RSC_REG_IMM_COND	src/codegen/arm_dpimacros.h	1062;"	d
ARM_RSC_REG_REG	src/codegen/arm_dpimacros.h	1108;"	d
ARM_RSC_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1152;"	d
ARM_RSC_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1150;"	d
ARM_RSC_REG_REG_COND	src/codegen/arm_dpimacros.h	1106;"	d
ARM_SARS_IMM	src/codegen/arm-codegen.h	1145;"	d
ARM_SARS_IMM_COND	src/codegen/arm-codegen.h	1143;"	d
ARM_SARS_REG	src/codegen/arm-codegen.h	1183;"	d
ARM_SARS_REG_COND	src/codegen/arm-codegen.h	1181;"	d
ARM_SARS_REG_REG	src/codegen/arm-codegen.h	1185;"	d
ARM_SAR_IMM	src/codegen/arm-codegen.h	1141;"	d
ARM_SAR_IMM_COND	src/codegen/arm-codegen.h	1139;"	d
ARM_SAR_REG	src/codegen/arm-codegen.h	1179;"	d
ARM_SAR_REG_COND	src/codegen/arm-codegen.h	1177;"	d
ARM_SBCS_REG_IMM	src/codegen/arm_dpimacros.h	956;"	d
ARM_SBCS_REG_IMM8	src/codegen/arm_dpimacros.h	978;"	d
ARM_SBCS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	976;"	d
ARM_SBCS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1022;"	d
ARM_SBCS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1020;"	d
ARM_SBCS_REG_IMM_COND	src/codegen/arm_dpimacros.h	954;"	d
ARM_SBCS_REG_REG	src/codegen/arm_dpimacros.h	1000;"	d
ARM_SBCS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1044;"	d
ARM_SBCS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1042;"	d
ARM_SBCS_REG_REG_COND	src/codegen/arm_dpimacros.h	998;"	d
ARM_SBC_REG_IMM	src/codegen/arm_dpimacros.h	952;"	d
ARM_SBC_REG_IMM8	src/codegen/arm_dpimacros.h	974;"	d
ARM_SBC_REG_IMM8_COND	src/codegen/arm_dpimacros.h	972;"	d
ARM_SBC_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1018;"	d
ARM_SBC_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1016;"	d
ARM_SBC_REG_IMM_COND	src/codegen/arm_dpimacros.h	950;"	d
ARM_SBC_REG_REG	src/codegen/arm_dpimacros.h	996;"	d
ARM_SBC_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1040;"	d
ARM_SBC_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1038;"	d
ARM_SBC_REG_REG_COND	src/codegen/arm_dpimacros.h	994;"	d
ARM_SCALE	src/codegen/arm-codegen.h	65;"	d
ARM_SHLS_IMM	src/codegen/arm-codegen.h	1127;"	d
ARM_SHLS_IMM_COND	src/codegen/arm-codegen.h	1125;"	d
ARM_SHLS_REG	src/codegen/arm-codegen.h	1163;"	d
ARM_SHLS_REG_COND	src/codegen/arm-codegen.h	1161;"	d
ARM_SHLS_REG_REG	src/codegen/arm-codegen.h	1165;"	d
ARM_SHL_IMM	src/codegen/arm-codegen.h	1123;"	d
ARM_SHL_IMM_COND	src/codegen/arm-codegen.h	1121;"	d
ARM_SHL_REG	src/codegen/arm-codegen.h	1159;"	d
ARM_SHL_REG_COND	src/codegen/arm-codegen.h	1157;"	d
ARM_SHRS_IMM	src/codegen/arm-codegen.h	1136;"	d
ARM_SHRS_IMM_COND	src/codegen/arm-codegen.h	1134;"	d
ARM_SHRS_REG	src/codegen/arm-codegen.h	1173;"	d
ARM_SHRS_REG_COND	src/codegen/arm-codegen.h	1171;"	d
ARM_SHRS_REG_REG	src/codegen/arm-codegen.h	1175;"	d
ARM_SHR_IMM	src/codegen/arm-codegen.h	1132;"	d
ARM_SHR_IMM_COND	src/codegen/arm-codegen.h	1130;"	d
ARM_SHR_REG	src/codegen/arm-codegen.h	1169;"	d
ARM_SHR_REG_COND	src/codegen/arm-codegen.h	1167;"	d
ARM_SMLAL	src/codegen/arm-codegen.h	616;"	d
ARM_SMLAL_COND	src/codegen/arm-codegen.h	614;"	d
ARM_SMULL	src/codegen/arm-codegen.h	611;"	d
ARM_SMULL_COND	src/codegen/arm-codegen.h	609;"	d
ARM_SPSR	src/codegen/arm-codegen.h	1076;"	d
ARM_STMDB	src/codegen/arm-codegen.h	497;"	d
ARM_STMDB_WB	src/codegen/arm-codegen.h	499;"	d
ARM_STMIA	src/codegen/arm-codegen.h	502;"	d
ARM_STRB_IMM	src/codegen/arm-codegen.h	733;"	d
ARM_STRB_IMM_COND	src/codegen/arm-codegen.h	730;"	d
ARM_STRB_IMM_POST	src/codegen/arm-codegen.h	721;"	d
ARM_STRB_IMM_POST_COND	src/codegen/arm-codegen.h	718;"	d
ARM_STRB_REG_REG	src/codegen/arm-codegen.h	801;"	d
ARM_STRB_REG_REG_SHIFT	src/codegen/arm-codegen.h	799;"	d
ARM_STRB_REG_REG_SHIFT_COND	src/codegen/arm-codegen.h	797;"	d
ARM_STRH_IMM	src/codegen/arm-codegen.h	862;"	d
ARM_STRH_IMM_COND	src/codegen/arm-codegen.h	860;"	d
ARM_STRH_IMM_POST	src/codegen/arm-codegen.h	867;"	d
ARM_STRH_IMM_POST_COND	src/codegen/arm-codegen.h	865;"	d
ARM_STRH_REG_REG	src/codegen/arm-codegen.h	904;"	d
ARM_STRH_REG_REG_COND	src/codegen/arm-codegen.h	902;"	d
ARM_STRH_REG_REG_POST	src/codegen/arm-codegen.h	909;"	d
ARM_STRH_REG_REG_POST_COND	src/codegen/arm-codegen.h	907;"	d
ARM_STR_IMM	src/codegen/arm-codegen.h	728;"	d
ARM_STR_IMM_COND	src/codegen/arm-codegen.h	724;"	d
ARM_STR_IMM_POST	src/codegen/arm-codegen.h	716;"	d
ARM_STR_IMM_POST_COND	src/codegen/arm-codegen.h	713;"	d
ARM_STR_IMM_WB	src/codegen/arm-codegen.h	738;"	d
ARM_STR_IMM_WB_COND	src/codegen/arm-codegen.h	736;"	d
ARM_STR_REG_REG	src/codegen/arm-codegen.h	785;"	d
ARM_STR_REG_REG_POST	src/codegen/arm-codegen.h	793;"	d
ARM_STR_REG_REG_SHIFT	src/codegen/arm-codegen.h	783;"	d
ARM_STR_REG_REG_SHIFT_COND	src/codegen/arm-codegen.h	781;"	d
ARM_STR_REG_REG_SHIFT_POST	src/codegen/arm-codegen.h	791;"	d
ARM_STR_REG_REG_SHIFT_POST_COND	src/codegen/arm-codegen.h	789;"	d
ARM_SUBS_REG_IMM	src/codegen/arm_dpimacros.h	508;"	d
ARM_SUBS_REG_IMM8	src/codegen/arm_dpimacros.h	530;"	d
ARM_SUBS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	528;"	d
ARM_SUBS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	574;"	d
ARM_SUBS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	572;"	d
ARM_SUBS_REG_IMM_COND	src/codegen/arm_dpimacros.h	506;"	d
ARM_SUBS_REG_REG	src/codegen/arm_dpimacros.h	552;"	d
ARM_SUBS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	596;"	d
ARM_SUBS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	594;"	d
ARM_SUBS_REG_REG_COND	src/codegen/arm_dpimacros.h	550;"	d
ARM_SUB_REG_IMM	src/codegen/arm_dpimacros.h	504;"	d
ARM_SUB_REG_IMM8	src/codegen/arm_dpimacros.h	526;"	d
ARM_SUB_REG_IMM8_COND	src/codegen/arm_dpimacros.h	524;"	d
ARM_SUB_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	570;"	d
ARM_SUB_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	568;"	d
ARM_SUB_REG_IMM_COND	src/codegen/arm_dpimacros.h	502;"	d
ARM_SUB_REG_REG	src/codegen/arm_dpimacros.h	548;"	d
ARM_SUB_REG_REGSHIFT	src/codegen/arm_dpimacros.h	592;"	d
ARM_SUB_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	590;"	d
ARM_SUB_REG_REG_COND	src/codegen/arm_dpimacros.h	546;"	d
ARM_SWI_ID	src/codegen/arm-codegen.h	940;"	d
ARM_SWI_MASK	src/codegen/arm-codegen.h	941;"	d
ARM_SWI_TAG	src/codegen/arm-codegen.h	942;"	d
ARM_SWP_ID	src/codegen/arm-codegen.h	926;"	d
ARM_SWP_ID2	src/codegen/arm-codegen.h	927;"	d
ARM_SWP_MASK	src/codegen/arm-codegen.h	928;"	d
ARM_SWP_TAG	src/codegen/arm-codegen.h	929;"	d
ARM_TEQ_REG_IMM	src/codegen/arm_dpimacros.h	1460;"	d
ARM_TEQ_REG_IMM8	src/codegen/arm_dpimacros.h	1474;"	d
ARM_TEQ_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1472;"	d
ARM_TEQ_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1502;"	d
ARM_TEQ_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1500;"	d
ARM_TEQ_REG_IMM_COND	src/codegen/arm_dpimacros.h	1458;"	d
ARM_TEQ_REG_REG	src/codegen/arm_dpimacros.h	1488;"	d
ARM_TEQ_REG_REG_COND	src/codegen/arm_dpimacros.h	1486;"	d
ARM_TST_REG_IMM	src/codegen/arm_dpimacros.h	1404;"	d
ARM_TST_REG_IMM8	src/codegen/arm_dpimacros.h	1418;"	d
ARM_TST_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1416;"	d
ARM_TST_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1446;"	d
ARM_TST_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1444;"	d
ARM_TST_REG_IMM_COND	src/codegen/arm_dpimacros.h	1402;"	d
ARM_TST_REG_REG	src/codegen/arm_dpimacros.h	1432;"	d
ARM_TST_REG_REG_COND	src/codegen/arm_dpimacros.h	1430;"	d
ARM_UMLAL	src/codegen/arm-codegen.h	626;"	d
ARM_UMULL	src/codegen/arm-codegen.h	621;"	d
ARM_UMULL_COND	src/codegen/arm-codegen.h	619;"	d
ARM_UP	src/codegen/arm-codegen.h	/^	ARM_UP   = 1,$/;"	e	enum:__anon70
ARM_USMLAL_COND	src/codegen/arm-codegen.h	624;"	d
ARM_WXFER_ID	src/codegen/arm-codegen.h	648;"	d
ARM_WXFER_MASK	src/codegen/arm-codegen.h	649;"	d
ARM_WXFER_MAX_OFFS	src/codegen/arm-codegen.h	672;"	d
ARM_WXFER_TAG	src/codegen/arm-codegen.h	650;"	d
ARRAYELEMENT	redbook/varray.c	49;"	d	file:
ASR	src/codegen/instruction.h	477;"	d
ASR_S	src/codegen/instruction.h	505;"	d
AUTOCONF	projects/linux-ftk/Makefile	/^AUTOCONF = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-ftk\/missing --run autoconf$/;"	m
AUTOCONF	projects/linux-x11/Makefile	/^AUTOCONF = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-x11\/missing --run autoconf$/;"	m
AUTOHEADER	projects/linux-ftk/Makefile	/^AUTOHEADER = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-ftk\/missing --run autoheader$/;"	m
AUTOHEADER	projects/linux-x11/Makefile	/^AUTOHEADER = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-x11\/missing --run autoheader$/;"	m
AUTOMAKE	projects/linux-ftk/Makefile	/^AUTOMAKE = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-ftk\/missing --run automake-1.7$/;"	m
AUTOMAKE	projects/linux-x11/Makefile	/^AUTOMAKE = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-x11\/missing --run automake-1.7$/;"	m
AWK	projects/linux-ftk/Makefile	/^AWK = gawk$/;"	m
AWK	projects/linux-x11/Makefile	/^AWK = gawk$/;"	m
About	test/testce.cpp	/^LRESULT CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
About	test/testwin.cpp	/^LRESULT CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
Accumulate	src/FractionalColor.h	/^		inline void Accumulate(const FractionalColor& color,$/;"	f	class:EGL::FractionalColor
AccumulateLight	src/Light.cpp	/^void Light :: AccumulateLight(const Vec4D& vertexCoords, const Vec3D& vertexNormal, $/;"	f	class:Light
AccumulateLight2	src/Light.cpp	/^void Light :: AccumulateLight2(const Vec4D& vertexCoords, const Vec3D& vertexNormal, $/;"	f	class:Light
ActiveTexture	src/ContextTexture.cpp	/^void Context :: ActiveTexture(GLenum texture) { $/;"	f	class:Context
Adata	redbook/stroke.c	/^CP Adata[] = {$/;"	v
Add	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: Add(cg_block_t * block, cg_virtual_reg_t * first, cg_virtual_reg_t * second) {$/;"	f	class:CodeGenerator
AddFunction	src/arm/FunctionCache.cpp	/^void * FunctionCache :: AddFunction(FunctionType type, const RasterizerState & state, size_t size) {$/;"	f	class:FunctionCache
AddSaturate255	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: AddSaturate255(cg_block_t * block, cg_virtual_reg_t * first, cg_virtual_reg_t * second) {$/;"	f	class:CodeGenerator
AddSigned	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: AddSigned(cg_block_t * block, cg_virtual_reg_t * first, cg_virtual_reg_t * second) {$/;"	f	class:CodeGenerator
AddSignedU8	src/Rasterizer.cpp	/^	inline U8 AddSignedU8(U8 arg0, U8 arg1) {$/;"	f	namespace:__anon41
AddSignedU8	src/Rasterizer.cpp	/^	inline U8 AddSignedU8(U8 arg0, U8 arg1, EGL_Fixed scale) {$/;"	f	namespace:__anon41
AddU8	src/Rasterizer.cpp	/^	inline U8 AddU8(U8 arg0, U8 arg1) {$/;"	f	namespace:__anon41
AddU8	src/Rasterizer.cpp	/^	inline U8 AddU8(U8 arg0, U8 arg1, EGL_Fixed scale) {$/;"	f	namespace:__anon41
Align	src/ContextTexture.cpp	/^	inline U32 Align(U32 offset, size_t alignment) {$/;"	f	namespace:__anon24
Allocate	src/Arrays.h	/^		size_t Allocate() {$/;"	f	struct:EGL::ObjectArray
Allocate	src/Buffer.h	/^		bool Allocate(size_t size, BufferUsage usage) {$/;"	f	class:EGL::Buffer
Alpha	src/RasterizerState.h	/^			bool				Alpha;	\/\/ if true, write alpha channel$/;"	m	struct:EGL::RasterizerState::MaskState
AlphaBuffer	src/Rasterizer.h	/^		U8 *		AlphaBuffer;$/;"	m	struct:EGL::RasterInfo
AlphaFunc	src/ContextFloat.cpp	/^void Context :: AlphaFunc (GLenum func, GLclampf ref) {$/;"	f	class:Context
AlphaFuncx	src/ContextRaster.cpp	/^void Context :: AlphaFuncx(GLenum func, GLclampx ref) { $/;"	f	class:Context
AlphaState	src/RasterizerState.h	/^			AlphaState() {$/;"	f	struct:EGL::RasterizerState::AlphaState
AlphaState	src/RasterizerState.h	/^			AlphaState(const AlphaState& other) {$/;"	f	struct:EGL::RasterizerState::AlphaState
AlphaState	src/RasterizerState.h	/^		struct AlphaState {$/;"	s	class:EGL::RasterizerState
AppDllUid	test/epoc/app.cpp	/^TUid CApp::AppDllUid() const$/;"	f	class:CApp
Average	src/Color.h	/^		static inline Color Average(const Color & a, const Color & b) {$/;"	f	class:EGL::Color
Average	src/Color.h	/^		static inline Color Average(const Color & a, const Color & b,$/;"	f	class:EGL::Color
B	src/Color.h	/^		inline U8 B() const {$/;"	f	class:EGL::Color
BEQ	src/codegen/instruction.h	570;"	d
BGE	src/codegen/instruction.h	571;"	d
BGT	src/codegen/instruction.h	573;"	d
BITMAPFILEHEADER	src/linux-ftk/Surface.cpp	/^} BITMAPFILEHEADER;$/;"	t	typeref:struct:tagBITMAPFILEHEADER	file:
BITMAPFILEHEADER	src/linux-x11/Surface.cpp	/^} BITMAPFILEHEADER;$/;"	t	typeref:struct:tagBITMAPFILEHEADER	file:
BITMAPINFOHEADER	src/linux-ftk/Surface.cpp	/^} BITMAPINFOHEADER;$/;"	t	typeref:struct:tagBITMAPINFOHEADER	file:
BITMAPINFOHEADER	src/linux-x11/Surface.cpp	/^} BITMAPINFOHEADER;$/;"	t	typeref:struct:tagBITMAPINFOHEADER	file:
BI_BITFIELDS	src/linux-ftk/Surface.cpp	248;"	d	file:
BI_BITFIELDS	src/linux-x11/Surface.cpp	314;"	d	file:
BLE	src/codegen/instruction.h	572;"	d
BLOCK_SIZE	src/codegen/segment.c	34;"	d	file:
BLT	src/codegen/instruction.h	574;"	d
BLUEMAT	redbook/stencil.c	50;"	d	file:
BNE	src/codegen/instruction.h	575;"	d
BRA	src/codegen/instruction.h	562;"	d
BUILD	tools/makedist.cmd	/^set BUILD=%3$/;"	v
BindBuffer	src/ContextBuffer.cpp	/^void Context :: BindBuffer(GLenum target, GLuint index) {$/;"	f	class:Context
BindTexture	src/ContextTexture.cpp	/^void Context :: BindTexture(GLenum target, GLuint texture) { $/;"	f	class:Context
BitFieldFrom255	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: BitFieldFrom255(cg_block_t * block, cg_virtual_reg_t * value, size_t low, size_t high) {$/;"	f	class:CodeGenerator
Blend	src/Color.h	/^		static inline Color Blend(const Color& src, const Color& dst, U32 alpha) {$/;"	f	class:EGL::Color
Blend255	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: Blend255(cg_block_t * block, U8 constant, cg_virtual_reg_t * second,$/;"	f	class:CodeGenerator
Blend255	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: Blend255(cg_block_t * block, cg_virtual_reg_t * first, cg_virtual_reg_t * second,$/;"	f	class:CodeGenerator
BlendAlpha	src/Color.h	/^		static inline Color BlendAlpha(const Color& src, const Color& dst, U32 alpha) {$/;"	f	class:EGL::Color
BlendComponent	src/arm/GenFragment.cpp	/^	cg_virtual_reg_t * BlendComponent(cg_proc_t * procedure, cg_block_t * block, $/;"	f	namespace:__anon12
BlendFunc	src/ContextRaster.cpp	/^void Context :: BlendFunc(GLenum sfactor, GLenum dfactor) { $/;"	f	class:Context
BlendFuncDst	src/RasterizerState.h	/^		enum BlendFuncDst {$/;"	g	class:EGL::RasterizerState
BlendFuncDstDstAlpha	src/RasterizerState.h	/^			BlendFuncDstDstAlpha,$/;"	e	enum:EGL::RasterizerState::BlendFuncDst
BlendFuncDstInvalid	src/RasterizerState.h	/^			BlendFuncDstInvalid = -1,$/;"	e	enum:EGL::RasterizerState::BlendFuncDst
BlendFuncDstOne	src/RasterizerState.h	/^			BlendFuncDstOne,$/;"	e	enum:EGL::RasterizerState::BlendFuncDst
BlendFuncDstOneMinusDstAlpha	src/RasterizerState.h	/^			BlendFuncDstOneMinusDstAlpha$/;"	e	enum:EGL::RasterizerState::BlendFuncDst
BlendFuncDstOneMinusSrcAlpha	src/RasterizerState.h	/^			BlendFuncDstOneMinusSrcAlpha,$/;"	e	enum:EGL::RasterizerState::BlendFuncDst
BlendFuncDstOneMinusSrcColor	src/RasterizerState.h	/^			BlendFuncDstOneMinusSrcColor,$/;"	e	enum:EGL::RasterizerState::BlendFuncDst
BlendFuncDstSrcAlpha	src/RasterizerState.h	/^			BlendFuncDstSrcAlpha,$/;"	e	enum:EGL::RasterizerState::BlendFuncDst
BlendFuncDstSrcColor	src/RasterizerState.h	/^			BlendFuncDstSrcColor,$/;"	e	enum:EGL::RasterizerState::BlendFuncDst
BlendFuncDstZero	src/RasterizerState.h	/^			BlendFuncDstZero,$/;"	e	enum:EGL::RasterizerState::BlendFuncDst
BlendFuncSrc	src/RasterizerState.h	/^		enum BlendFuncSrc {$/;"	g	class:EGL::RasterizerState
BlendFuncSrcDstAlpha	src/RasterizerState.h	/^			BlendFuncSrcDstAlpha,$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendFuncSrcDstColor	src/RasterizerState.h	/^			BlendFuncSrcDstColor,$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendFuncSrcInvalid	src/RasterizerState.h	/^			BlendFuncSrcInvalid = -1,$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendFuncSrcOne	src/RasterizerState.h	/^			BlendFuncSrcOne,$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendFuncSrcOneMinusDstAlpha	src/RasterizerState.h	/^			BlendFuncSrcOneMinusDstAlpha,$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendFuncSrcOneMinusDstColor	src/RasterizerState.h	/^			BlendFuncSrcOneMinusDstColor,$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendFuncSrcOneMinusSrcAlpha	src/RasterizerState.h	/^			BlendFuncSrcOneMinusSrcAlpha,$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendFuncSrcSrcAlpha	src/RasterizerState.h	/^			BlendFuncSrcSrcAlpha,$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendFuncSrcSrcAlphaSaturate	src/RasterizerState.h	/^			BlendFuncSrcSrcAlphaSaturate$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendFuncSrcZero	src/RasterizerState.h	/^			BlendFuncSrcZero,$/;"	e	enum:EGL::RasterizerState::BlendFuncSrc
BlendState	src/RasterizerState.h	/^			BlendState() {$/;"	f	struct:EGL::RasterizerState::BlendState
BlendState	src/RasterizerState.h	/^			BlendState(const BlendState& other) {$/;"	f	struct:EGL::RasterizerState::BlendState
BlendState	src/RasterizerState.h	/^		struct BlendState {$/;"	s	class:EGL::RasterizerState
Blue	src/RasterizerState.h	/^			bool				Blue;	\/\/ if true, write blue channel$/;"	m	struct:EGL::RasterizerState::MaskState
Buffer	src/Buffer.h	/^		Buffer(): m_Data(0), m_Size(0), m_Usage(BufferUsageStaticDraw) { }$/;"	f	class:EGL::Buffer
Buffer	src/Buffer.h	/^	class Buffer { $/;"	c	namespace:EGL
BufferArray	src/Arrays.h	/^	typedef ObjectArray<Buffer>			BufferArray;$/;"	t	namespace:EGL
BufferData	src/ContextBuffer.cpp	/^void Context :: BufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage) {$/;"	f	class:Context
BufferSubData	src/ContextBuffer.cpp	/^void Context :: BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data) {$/;"	f	class:Context
BufferUsage	src/Buffer.h	/^	enum BufferUsage {$/;"	g	namespace:EGL
BufferUsageDynamicDraw	src/Buffer.h	/^		BufferUsageDynamicDraw$/;"	e	enum:EGL::BufferUsage
BufferUsageStaticDraw	src/Buffer.h	/^		BufferUsageStaticDraw,$/;"	e	enum:EGL::BufferUsage
CACHE_SYNC_ALL	src/arm/CodeGenerator.cpp	71;"	d	file:
CACHE_SYNC_DISCARD	src/arm/CodeGenerator.cpp	62;"	d	file:
CACHE_SYNC_FLUSH_D_TLB	src/arm/CodeGenerator.cpp	66;"	d	file:
CACHE_SYNC_FLUSH_I_TLB	src/arm/CodeGenerator.cpp	65;"	d	file:
CACHE_SYNC_FLUSH_TLB	src/arm/CodeGenerator.cpp	67;"	d	file:
CACHE_SYNC_INSTRUCTIONS	src/arm/CodeGenerator.cpp	63;"	d	file:
CACHE_SYNC_L2_DISCARD	src/arm/CodeGenerator.cpp	69;"	d	file:
CACHE_SYNC_L2_WRITEBACK	src/arm/CodeGenerator.cpp	68;"	d	file:
CACHE_SYNC_WRITEBACK	src/arm/CodeGenerator.cpp	64;"	d	file:
CALL_FUNC	src/codegen/instruction.h	600;"	d
CALL_PROC	src/codegen/instruction.h	591;"	d
CApp	test/epoc/app.h	/^class CApp: public $/;"	c
CAppUi	test/epoc/appui.h	/^class CAppUi: public $/;"	c
CAppView	test/epoc/appview.h	/^class CAppView: public CCoeControl$/;"	c
CC	projects/linux-ftk/Makefile	/^CC = gcc$/;"	m
CC	projects/linux-x11/Makefile	/^CC = gcc$/;"	m
CCDEPMODE	projects/linux-ftk/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	projects/linux-x11/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	projects/linux-ftk/Makefile	/^CCLD = $(CC)$/;"	m
CCLD	projects/linux-x11/Makefile	/^CCLD = $(CC)$/;"	m
CDoc	test/epoc/doc.cpp	/^CDoc::CDoc(CEikApplication& aApp)$/;"	f	class:CDoc
CDoc	test/epoc/doc.h	/^class CDoc: public CEikDocument$/;"	c
CFILES	redbook/Makefile	/^CFILES = \\$/;"	m
CFLAGS	projects/linux-ftk/Makefile	/^CFLAGS = -g -O2 -DUSE_FTK -g -O2 -Wall $/;"	m
CFLAGS	projects/linux-x11/Makefile	/^CFLAGS = -g -02 -Wall -D_XOPEN_SOURCE=500 -I\/usr\/X11R6\/include -DXTHREADS -DXUSE_MTSAFE_API$/;"	m
CFLAGS	redbook/Makefile	/^CFLAGS = -I..\/include -I..\/gu$/;"	m
CG_BITSET_BITS_PER_WORD	src/codegen/bitset.h	42;"	d
CG_BITSET_CLEAR	src/codegen/bitset.h	74;"	d
CG_BITSET_SET	src/codegen/bitset.h	71;"	d
CG_BITSET_TEST	src/codegen/bitset.h	67;"	d
CG_INST_DEBUG_ARGS	src/codegen/instruction.h	423;"	d
CG_INST_DEBUG_ARGS	src/codegen/instruction.h	428;"	d
CG_INST_DEBUG_ARG_DECL	src/codegen/instruction.h	422;"	d
CG_INST_DEBUG_ARG_DECL	src/codegen/instruction.h	427;"	d
CG_INST_DEBUG_PASS	src/codegen/instruction.h	425;"	d
CG_INST_DEBUG_PASS	src/codegen/instruction.h	430;"	d
CG_INST_SET_DEBUG	src/codegen/instruction.h	424;"	d
CG_INST_SET_DEBUG	src/codegen/instruction.h	429;"	d
CMP	src/codegen/instruction.h	526;"	d
CODEGEN_BITSET_H	src/codegen/bitset.h	2;"	d
CODEGEN_CODEGEN_H	src/codegen/codegen.h	2;"	d
CODEGEN_EMIT_H	src/codegen/emit.h	2;"	d
CODEGEN_HEAP_H	src/codegen/heap.h	2;"	d
CODEGEN_INSTRUCTION_H	src/codegen/instruction.h	2;"	d
CODEGEN_SGEMENT_H	src/codegen/segment.h	2;"	d
COLUMNS	src/linalg.h	/^			COLUMNS = 4,		\/\/ number of columns per matrix$/;"	e	enum:EGL::Matrix4x4::__anon43
COMPILE	projects/linux-ftk/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	projects/linux-x11/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	projects/linux-ftk/Makefile	/^CONFIG_CLEAN_FILES = libvincent.pc$/;"	m
CONFIG_CLEAN_FILES	projects/linux-x11/Makefile	/^CONFIG_CLEAN_FILES = libvincent.pc$/;"	m
CONFIG_HEADER	projects/linux-ftk/Makefile	/^CONFIG_HEADER = linux-config.h$/;"	m
CONFIG_HEADER	projects/linux-x11/Makefile	/^CONFIG_HEADER = linux-config.h$/;"	m
CONTEXT_EXEC	src/gl.cpp	45;"	d	file:
CONTEXT_EXEC_RETURN	src/gl.cpp	51;"	d	file:
COORDINATE	src/ContextLines.cpp	359;"	d	file:
COORDINATE	src/ContextLines.cpp	361;"	d	file:
COORDINATE	src/ContextLines.cpp	365;"	d	file:
COORDINATE	src/ContextLines.cpp	367;"	d	file:
COORDINATE	src/ContextLines.cpp	371;"	d	file:
COORDINATE	src/ContextLines.cpp	373;"	d	file:
COORDINATE	src/ContextTriangles.cpp	503;"	d	file:
COORDINATE	src/ContextTriangles.cpp	505;"	d	file:
COORDINATE	src/ContextTriangles.cpp	513;"	d	file:
COORDINATE	src/ContextTriangles.cpp	515;"	d	file:
COORDINATE	src/ContextTriangles.cpp	523;"	d	file:
COORDINATE	src/ContextTriangles.cpp	525;"	d	file:
COORDINATE	src/ContextTriangles.cpp	533;"	d	file:
COORDINATE	src/ContextTriangles.cpp	535;"	d	file:
COORDINATE	src/ContextTriangles.cpp	543;"	d	file:
COORDINATE	src/ContextTriangles.cpp	545;"	d	file:
COORDINATE	src/ContextTriangles.cpp	553;"	d	file:
COORDINATE	src/ContextTriangles.cpp	555;"	d	file:
CP	redbook/stroke.c	/^} CP;$/;"	t	typeref:struct:charpoint	file:
CPP	projects/linux-ftk/Makefile	/^CPP = gcc -E$/;"	m
CPP	projects/linux-x11/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	projects/linux-ftk/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	projects/linux-x11/Makefile	/^CPPFLAGS = $/;"	m
CTAGS	projects/linux-ftk/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	projects/linux-x11/Makefile	/^CTAGS = ctags$/;"	m
CTAGSFLAGS	projects/linux-ftk/Makefile	/^CTAGSFLAGS =$/;"	m
CTAGSFLAGS	projects/linux-x11/Makefile	/^CTAGSFLAGS =$/;"	m
CXX	projects/linux-ftk/Makefile	/^CXX = g++$/;"	m
CXX	projects/linux-x11/Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	projects/linux-ftk/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	projects/linux-x11/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	projects/linux-ftk/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	projects/linux-x11/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	projects/linux-ftk/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	projects/linux-x11/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	projects/linux-ftk/Makefile	/^CXXFLAGS = -g -O2 -DUSE_FTK -g -O2 -Wall  -DUSE_FTK -g -O2 -Wall $/;"	m
CXXFLAGS	projects/linux-x11/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	projects/linux-ftk/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	projects/linux-x11/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	projects/linux-ftk/Makefile	/^CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \\$/;"	m
CXXLINK	projects/linux-x11/Makefile	/^CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \\$/;"	m
CYGPATH_W	projects/linux-ftk/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	projects/linux-x11/Makefile	/^CYGPATH_W = echo$/;"	m
ChooseConfig	src/Config.cpp	/^EGLBoolean Config :: ChooseConfig(const EGLint * attribList, EGLConfig * result, EGLint configSize, EGLint * numConfig) {$/;"	f	class:Config
ChooseConfig	src/Epoc/ConfigEpoc.cpp	/^EGLBoolean Config :: ChooseConfig(const EGLint * attribList, EGLConfig * result, EGLint configSize, EGLint * numConfig) {$/;"	f	class:Config
Clamp	src/FractionalColor.h	/^		inline void Clamp() {$/;"	f	class:EGL::FractionalColor
Clamp	src/FractionalColor.h	/^		static FractionalColor Clamp(const EGL_Fixed * rgba) {$/;"	f	class:EGL::FractionalColor
ClampTo255	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: ClampTo255(cg_block_t * block, cg_virtual_reg_t * value) {$/;"	f	class:CodeGenerator
ClampU8	src/Rasterizer.cpp	/^	inline U8 ClampU8(U16 value) {$/;"	f	namespace:__anon41
Clear	src/Context.cpp	/^void Context :: Clear(GLbitfield mask) { $/;"	f	class:Context
ClearColor	src/ContextFloat.cpp	/^void Context :: ClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {$/;"	f	class:Context
ClearColorBuffer	src/Epoc/Surface.cpp	/^void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask, const Rect& scissor) {$/;"	f	class:Surface
ClearColorBuffer	src/Epoc/Surface.h	/^	inline void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask) {$/;"	f	class:EGL::Surface
ClearColorBuffer	src/WinCE/Surface.cpp	/^void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask, const Rect& scissor) {$/;"	f	class:Surface
ClearColorBuffer	src/WinCE/Surface.h	/^	inline void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask) {$/;"	f	class:EGL::Surface
ClearColorBuffer	src/linux-ftk/Surface.cpp	/^void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask, $/;"	f	class:Surface
ClearColorBuffer	src/linux-ftk/Surface.h	/^	inline void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask) {$/;"	f	class:EGL::Surface
ClearColorBuffer	src/linux-x11/Surface.cpp	/^void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask, $/;"	f	class:Surface
ClearColorBuffer	src/linux-x11/Surface.h	/^	inline void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask) {$/;"	f	class:EGL::Surface
ClearColorBuffer	src/win/Surface.cpp	/^void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask, const Rect& scissor) {$/;"	f	class:Surface
ClearColorBuffer	src/win/Surface.h	/^	inline void Surface :: ClearColorBuffer(const Color & rgba, const Color & mask) {$/;"	f	class:EGL::Surface
ClearColorx	src/Context.cpp	/^void Context :: ClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha) { $/;"	f	class:Context
ClearDepthBuffer	src/Epoc/Surface.cpp	/^void Surface :: ClearDepthBuffer(U16 depth, bool mask, const Rect& scissor) {$/;"	f	class:Surface
ClearDepthBuffer	src/Epoc/Surface.h	/^	inline void Surface :: ClearDepthBuffer(U16 depth, bool mask) {$/;"	f	class:EGL::Surface
ClearDepthBuffer	src/WinCE/Surface.cpp	/^void Surface :: ClearDepthBuffer(U16 depth, bool mask, const Rect& scissor) {$/;"	f	class:Surface
ClearDepthBuffer	src/WinCE/Surface.h	/^	inline void Surface :: ClearDepthBuffer(U16 depth, bool mask) {$/;"	f	class:EGL::Surface
ClearDepthBuffer	src/linux-ftk/Surface.cpp	/^void Surface :: ClearDepthBuffer(U16 depth, bool mask, const Rect& scissor) $/;"	f	class:Surface
ClearDepthBuffer	src/linux-ftk/Surface.h	/^	inline void Surface :: ClearDepthBuffer(U16 depth, bool mask) {$/;"	f	class:EGL::Surface
ClearDepthBuffer	src/linux-x11/Surface.cpp	/^void Surface :: ClearDepthBuffer(U16 depth, bool mask, const Rect& scissor) $/;"	f	class:Surface
ClearDepthBuffer	src/linux-x11/Surface.h	/^	inline void Surface :: ClearDepthBuffer(U16 depth, bool mask) {$/;"	f	class:EGL::Surface
ClearDepthBuffer	src/win/Surface.cpp	/^void Surface :: ClearDepthBuffer(U16 depth, bool mask, const Rect& scissor) {$/;"	f	class:Surface
ClearDepthBuffer	src/win/Surface.h	/^	inline void Surface :: ClearDepthBuffer(U16 depth, bool mask) {$/;"	f	class:EGL::Surface
ClearDepthf	src/ContextFloat.cpp	/^void Context :: ClearDepthf (GLclampf depth) {$/;"	f	class:Context
ClearDepthx	src/Context.cpp	/^void Context :: ClearDepthx(GLclampx depth) { $/;"	f	class:Context
ClearStencil	src/Context.cpp	/^void Context :: ClearStencil(GLint s) { $/;"	f	class:Context
ClearStencilBuffer	src/Epoc/Surface.cpp	/^void Surface :: ClearStencilBuffer(U32 value, U32 mask, const Rect& scissor) {$/;"	f	class:Surface
ClearStencilBuffer	src/Epoc/Surface.h	/^	inline void Surface :: ClearStencilBuffer(U32 value, U32 mask) {$/;"	f	class:EGL::Surface
ClearStencilBuffer	src/WinCE/Surface.cpp	/^void Surface :: ClearStencilBuffer(U32 value, U32 mask, const Rect& scissor) {$/;"	f	class:Surface
ClearStencilBuffer	src/WinCE/Surface.h	/^	inline void Surface :: ClearStencilBuffer(U32 value, U32 mask) {$/;"	f	class:EGL::Surface
ClearStencilBuffer	src/linux-ftk/Surface.cpp	/^void Surface :: ClearStencilBuffer(U32 value, U32 mask, const Rect& scissor) $/;"	f	class:Surface
ClearStencilBuffer	src/linux-ftk/Surface.h	/^	inline void Surface :: ClearStencilBuffer(U32 value, U32 mask) {$/;"	f	class:EGL::Surface
ClearStencilBuffer	src/linux-x11/Surface.cpp	/^void Surface :: ClearStencilBuffer(U32 value, U32 mask, const Rect& scissor) $/;"	f	class:Surface
ClearStencilBuffer	src/linux-x11/Surface.h	/^	inline void Surface :: ClearStencilBuffer(U32 value, U32 mask) {$/;"	f	class:EGL::Surface
ClearStencilBuffer	src/win/Surface.cpp	/^void Surface :: ClearStencilBuffer(U32 value, U32 mask, const Rect& scissor) {$/;"	f	class:Surface
ClearStencilBuffer	src/win/Surface.h	/^	inline void Surface :: ClearStencilBuffer(U32 value, U32 mask) {$/;"	f	class:EGL::Surface
ClientActiveTexture	src/ContextTexture.cpp	/^void Context :: ClientActiveTexture(GLenum texture) { $/;"	f	class:Context
ClipCoordsToWindowCoords	src/ContextRender.cpp	/^void Context :: ClipCoordsToWindowCoords(RasterPos & pos) {$/;"	f	class:Context
ClipPlanef	src/ContextFloat.cpp	/^void Context :: ClipPlanef(GLenum plane, const GLfloat *equation) {$/;"	f	class:Context
ClipPlanex	src/ContextRender.cpp	/^void Context :: ClipPlanex(GLenum plane, const GLfixed *equation) {$/;"	f	class:Context
ClipUser	src/ContextLines.cpp	/^	inline bool ClipUser(const Vec4D& plane, RasterPos*& from, RasterPos*& to, RasterPos *&tempVertices) {$/;"	f	namespace:__anon46
ClipUser	src/ContextTriangles.cpp	/^	size_t ClipUser(const Vec4D& plane, RasterPos * input[], size_t inputCount, RasterPos * output[], RasterPos *& nextTemporary) {$/;"	f	namespace:__anon13
ClipX	src/ContextLines.cpp	/^	inline bool ClipX(RasterPos*& from, RasterPos*& to, RasterPos *&tempVertices) {$/;"	f	namespace:__anon46
ClipXHigh	src/ContextTriangles.cpp	/^	inline size_t ClipXHigh(RasterPos * input[], size_t inputCount, RasterPos * output[], RasterPos *& nextTemporary) {$/;"	f	namespace:__anon13
ClipXLow	src/ContextTriangles.cpp	/^	inline size_t ClipXLow(RasterPos * input[], size_t inputCount, RasterPos * output[], RasterPos *& nextTemporary) {$/;"	f	namespace:__anon13
ClipY	src/ContextLines.cpp	/^	inline bool ClipY(RasterPos*& from, RasterPos*& to, RasterPos *&tempVertices) {$/;"	f	namespace:__anon46
ClipYHigh	src/ContextTriangles.cpp	/^	inline size_t ClipYHigh(RasterPos * input[], size_t inputCount, RasterPos * output[], RasterPos *& nextTemporary) {$/;"	f	namespace:__anon13
ClipYLow	src/ContextTriangles.cpp	/^	inline size_t ClipYLow(RasterPos * input[], size_t inputCount, RasterPos * output[], RasterPos *& nextTemporary) {$/;"	f	namespace:__anon13
ClipZ	src/ContextLines.cpp	/^	inline bool ClipZ(RasterPos*& from, RasterPos*& to, RasterPos *&tempVertices) {$/;"	f	namespace:__anon46
ClipZHigh	src/ContextTriangles.cpp	/^	inline size_t ClipZHigh(RasterPos * input[], size_t inputCount, RasterPos * output[], RasterPos *& nextTemporary) {$/;"	f	namespace:__anon13
ClipZLow	src/ContextTriangles.cpp	/^	inline size_t ClipZLow(RasterPos * input[], size_t inputCount, RasterPos * output[], RasterPos *& nextTemporary) {$/;"	f	namespace:__anon13
CodeGenerator	src/arm/CodeGenerator.h	/^	class CodeGenerator {$/;"	c	namespace:EGL
Color	src/Color.h	/^		Color() {$/;"	f	class:EGL::Color
Color	src/Color.h	/^		Color(U32 rgba) { $/;"	f	class:EGL::Color
Color	src/Color.h	/^		Color(U8 R, U8 G, U8 B, U8 A) {$/;"	f	class:EGL::Color
Color	src/Color.h	/^		Color(const Color& other) {$/;"	f	class:EGL::Color
Color	src/Color.h	/^	class Color {$/;"	c	namespace:EGL
Color	src/RasterizerState.h	/^            EGL::Color				Color;$/;"	m	struct:EGL::RasterizerState::FogState
Color2Alpha	src/ContextTexture.cpp	/^	struct Color2Alpha {$/;"	s	namespace:__anon24	file:
Color2Luminance	src/ContextTexture.cpp	/^	struct Color2Luminance {$/;"	s	namespace:__anon24	file:
Color2LuminanceAlpha	src/ContextTexture.cpp	/^	struct Color2LuminanceAlpha {$/;"	s	namespace:__anon24	file:
Color2RGB	src/ContextTexture.cpp	/^	struct Color2RGB {$/;"	s	namespace:__anon24	file:
Color2RGB565	src/ContextTexture.cpp	/^	struct Color2RGB565 {$/;"	s	namespace:__anon24	file:
Color2RGBA	src/ContextTexture.cpp	/^	struct Color2RGBA {$/;"	s	namespace:__anon24	file:
Color2RGBA4444	src/ContextTexture.cpp	/^	struct Color2RGBA4444 {$/;"	s	namespace:__anon24	file:
Color2RGBA5551	src/ContextTexture.cpp	/^	struct Color2RGBA5551 {$/;"	s	namespace:__anon24	file:
Color4f	src/ContextFloat.cpp	/^void Context :: Color4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {$/;"	f	class:Context
Color4x	src/ContextRender.cpp	/^void Context :: Color4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { $/;"	f	class:Context
Color565FromRGB	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: Color565FromRGB(cg_block_t * block,$/;"	f	class:CodeGenerator
Color565FromRGB	src/arm/CodeGenerator.cpp	/^void CodeGenerator :: Color565FromRGB(cg_block_t * block, cg_virtual_reg_t * regRGB,$/;"	f	class:CodeGenerator
ColorBuffer	src/Rasterizer.h	/^		U16 *		ColorBuffer;$/;"	m	struct:EGL::RasterInfo
ColorMask	src/ContextRaster.cpp	/^void Context :: ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { $/;"	f	class:Context
ColorPointer	src/ContextRender.cpp	/^void Context :: ColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { $/;"	f	class:Context
CombineFuncAlpha	src/RasterizerState.h	/^			TextureModeCombineFunc	CombineFuncRGB, CombineFuncAlpha;$/;"	m	struct:EGL::RasterizerState::TextureState
CombineFuncRGB	src/RasterizerState.h	/^			TextureModeCombineFunc	CombineFuncRGB, CombineFuncAlpha;$/;"	m	struct:EGL::RasterizerState::TextureState
CombineOpAlpha	src/RasterizerState.h	/^			TextureCombineOp		CombineOpRGB[3], CombineOpAlpha[3];$/;"	m	struct:EGL::RasterizerState::TextureState
CombineOpRGB	src/RasterizerState.h	/^			TextureCombineOp		CombineOpRGB[3], CombineOpAlpha[3];$/;"	m	struct:EGL::RasterizerState::TextureState
CombineSrcAlpha	src/RasterizerState.h	/^			TextureCombineSrc		CombineSrcRGB[3], CombineSrcAlpha[3];$/;"	m	struct:EGL::RasterizerState::TextureState
CombineSrcRGB	src/RasterizerState.h	/^			TextureCombineSrc		CombineSrcRGB[3], CombineSrcAlpha[3];$/;"	m	struct:EGL::RasterizerState::TextureState
CompFuncAlways	src/RasterizerState.h	/^			CompFuncAlways$/;"	e	enum:EGL::RasterizerState::ComparisonFunc
CompFuncEqual	src/RasterizerState.h	/^			CompFuncEqual,$/;"	e	enum:EGL::RasterizerState::ComparisonFunc
CompFuncGEqual	src/RasterizerState.h	/^			CompFuncGEqual,$/;"	e	enum:EGL::RasterizerState::ComparisonFunc
CompFuncGreater	src/RasterizerState.h	/^			CompFuncGreater,$/;"	e	enum:EGL::RasterizerState::ComparisonFunc
CompFuncInvalid	src/RasterizerState.h	/^			CompFuncInvalid = -1,$/;"	e	enum:EGL::RasterizerState::ComparisonFunc
CompFuncLEqual	src/RasterizerState.h	/^			CompFuncLEqual,$/;"	e	enum:EGL::RasterizerState::ComparisonFunc
CompFuncLess	src/RasterizerState.h	/^			CompFuncLess,$/;"	e	enum:EGL::RasterizerState::ComparisonFunc
CompFuncNever	src/RasterizerState.h	/^			CompFuncNever,$/;"	e	enum:EGL::RasterizerState::ComparisonFunc
CompFuncNotEqual	src/RasterizerState.h	/^			CompFuncNotEqual,$/;"	e	enum:EGL::RasterizerState::ComparisonFunc
CompactCode	src/arm/FunctionCache.cpp	/^void FunctionCache :: CompactCode() {$/;"	f	class:FunctionCache
CompareCommon	src/RasterizerState.cpp	/^bool RasterizerState :: CompareCommon(const RasterizerState& other) const {$/;"	f	class:RasterizerState
CompareLine	src/RasterizerState.cpp	/^bool RasterizerState :: CompareLine(const RasterizerState& other) const {$/;"	f	class:RasterizerState
ComparePoint	src/RasterizerState.cpp	/^bool RasterizerState :: ComparePoint(const RasterizerState& other) const {$/;"	f	class:RasterizerState
ComparePolygon	src/RasterizerState.cpp	/^bool RasterizerState :: ComparePolygon(const RasterizerState& other) const {$/;"	f	class:RasterizerState
ComparisonFunc	src/RasterizerState.h	/^		enum ComparisonFunc {$/;"	g	class:EGL::RasterizerState
ComparisonFuncFromEnum	src/ContextRaster.cpp	/^	RasterizerState::ComparisonFunc ComparisonFuncFromEnum(GLenum func) {$/;"	f	namespace:__anon50
ComparisonMask	src/RasterizerState.h	/^			U32					ComparisonMask;$/;"	m	struct:EGL::RasterizerState::StencilState
Compile	src/arm/CodeGenerator.cpp	/^void CodeGenerator :: Compile(FunctionCache * target, FunctionCache::FunctionType type,$/;"	f	class:CodeGenerator
CompressedTexImage2D	src/ContextTexture.cpp	/^void Context :: CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, $/;"	f	class:Context
CompressedTexSubImage2D	src/ContextTexture.cpp	/^void Context :: CompressedTexSubImage2D(GLenum target, GLint level, $/;"	f	class:Context
Config	src/Config.cpp	/^Config :: Config (const Config &other, const EGLint * attribList, const EGLint * validAttributes) {$/;"	f	class:Config
Config	src/Config.cpp	/^Config :: Config($/;"	f	class:Config
Config	src/Config.h	/^		OGLES_API Config() { }$/;"	f	class:EGL::Config
Config	src/Config.h	/^	class Config {$/;"	c	namespace:EGL
Config	src/Epoc/ConfigEpoc.cpp	/^Config :: Config (const Config &other, const EGLint * attribList, const EGLint * validAttributes) {$/;"	f	class:Config
Config	src/Epoc/ConfigEpoc.cpp	/^Config :: Config($/;"	f	class:Config
ConstU4Ptr	src/ContextTexture.cpp	/^		ConstU4Ptr(const void * _ptr) {$/;"	f	struct:__anon38::ConstU4Ptr
ConstU4Ptr	src/ContextTexture.cpp	/^	struct ConstU4Ptr {$/;"	s	namespace:__anon38	file:
ConstructL	src/Epoc/Surface.cpp	/^void Surface :: ConstructL(const Config & config) {$/;"	f	class:Surface
ConstructL	test/epoc/appui.cpp	/^void CAppUi::ConstructL()$/;"	f	class:CAppUi
ConstructL	test/epoc/appview.cpp	/^void CAppView::ConstructL(const TRect& aRect)$/;"	f	class:CAppView
ConstructL	test/epoc/doc.cpp	/^void CDoc::ConstructL()$/;"	f	class:CDoc
Contains	src/Types.h	/^		bool Contains(const Rect& other) const {$/;"	f	struct:EGL::Rect
Context	src/Context.cpp	/^Context :: Context(const Config & config) $/;"	f	class:Context
Context	src/Context.h	/^	class Context {$/;"	c	namespace:EGL
ConvertTo4444	src/Color.h	/^		inline U16 ConvertTo4444() const {$/;"	f	class:EGL::Color
ConvertTo5551	src/Color.h	/^		inline U16 ConvertTo5551() const {$/;"	f	class:EGL::Color
ConvertTo5551	src/FractionalColor.h	/^		inline U16 ConvertTo5551() const {$/;"	f	class:EGL::FractionalColor
ConvertTo565	src/Color.h	/^		inline U16 ConvertTo565() const {$/;"	f	class:EGL::Color
ConvertTo565	src/FractionalColor.h	/^		inline U16 ConvertTo565() const {$/;"	f	class:EGL::FractionalColor
ConvertToRGBA	src/Color.h	/^		inline U32 ConvertToRGBA() const {$/;"	f	class:EGL::Color
CoordReplaceEnabled	src/RasterizerState.h	/^			bool				CoordReplaceEnabled;$/;"	m	struct:EGL::RasterizerState::PointState
CopyColor	src/Utils.cpp	/^	void CopyColor(const FractionalColor & color, GLfixed *params) {$/;"	f	namespace:EGL
CopyFixed	src/ContextFloat.cpp	/^	void CopyFixed(const GLfixed * in, GLfloat * out, size_t size) {$/;"	f	namespace:__anon22
CopyMatrix	src/Utils.cpp	/^	void CopyMatrix(const Matrix4x4& matrix, GLfixed *params) {$/;"	f	namespace:EGL
CopyPixels	src/ContextTexture.cpp	/^	void CopyPixels(const PixelType * src, U32 srcWidth, U32 srcHeight, $/;"	f	namespace:__anon24
CopyPixels	src/ContextTexture.cpp	/^	void CopyPixels(const void * src, U32 srcWidth, U32 srcHeight, $/;"	f	namespace:__anon24
CopyPixelsA	src/ContextTexture.cpp	/^	void CopyPixelsA(const void * src, U32 srcWidth, U32 srcHeight, $/;"	f	namespace:__anon24
CopyRect	src/Context.cpp	/^	void CopyRect(const Rect & rect, GLint * params) {$/;"	f	namespace:__anon53
CopySurfacePixels	src/ContextTexture.cpp	/^	bool CopySurfacePixels(Surface * src, $/;"	f	namespace:__anon24
CopySurfacePixels	src/ContextTexture.cpp	/^	void CopySurfacePixels(Surface * src, $/;"	f	namespace:__anon24
CopyTexImage2D	src/ContextTexture.cpp	/^void Context :: CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, $/;"	f	class:Context
CopyTexSubImage2D	src/ContextTexture.cpp	/^void Context :: CopyTexSubImage2D(GLenum target, GLint level, $/;"	f	class:Context
CopyVector	src/Utils.cpp	/^	void CopyVector(const Vec3D & vector, GLfixed *params) {$/;"	f	namespace:EGL
CopyVector	src/Utils.cpp	/^	void CopyVector(const Vec4D & vector, GLfixed *params) {$/;"	f	namespace:EGL
CreateAppUiL	test/epoc/doc.cpp	/^CEikAppUi* CDoc::CreateAppUiL()$/;"	f	class:CDoc
CreateDocumentL	test/epoc/app.cpp	/^CApaDocument* CApp::CreateDocumentL()$/;"	f	class:CApp
CreateFrustrum	src/linalg.cpp	/^Matrix4x4 Matrix4x4 :: CreateFrustrum(EGL_Fixed l, EGL_Fixed r, $/;"	f	class:Matrix4x4
CreateOrtho	src/linalg.cpp	/^Matrix4x4 Matrix4x4 :: CreateOrtho(EGL_Fixed l, EGL_Fixed r, $/;"	f	class:Matrix4x4
CreatePalette	src/ContextTexture.cpp	/^	template <class SrcAccessor> inline void CreatePalette(const U8 *& data,$/;"	f	namespace:__anon38
CreateRotate	src/linalg.cpp	/^Matrix4x4 Matrix4x4 :: CreateRotate(EGL_Fixed angle, EGL_Fixed x, $/;"	f	class:Matrix4x4
CreateRpCommandBar	test/testce.cpp	/^HWND CreateRpCommandBar(HWND hwnd)$/;"	f
CreateScale	src/linalg.cpp	/^Matrix4x4 Matrix4x4 :: CreateScale(EGL_Fixed x, EGL_Fixed y, EGL_Fixed z) {$/;"	f	class:Matrix4x4
CreateTranslate	src/linalg.cpp	/^Matrix4x4 Matrix4x4 :: CreateTranslate(EGL_Fixed x, EGL_Fixed y, EGL_Fixed z) {$/;"	f	class:Matrix4x4
Cross	src/linalg.h	/^		inline Vec3D Cross(const Vec3D& other) const {$/;"	f	class:EGL::Vec3D
CullFace	src/ContextTriangles.cpp	/^void Context :: CullFace(GLenum mode) { $/;"	f	class:Context
CullMode	src/Context.h	/^		enum CullMode {$/;"	g	class:EGL::Context
CullModeBack	src/Context.h	/^			CullModeBack,$/;"	e	enum:EGL::Context::CullMode
CullModeBackAndFront	src/Context.h	/^			CullModeBackAndFront$/;"	e	enum:EGL::Context::CullMode
CullModeFront	src/Context.h	/^			CullModeFront,$/;"	e	enum:EGL::Context::CullMode
CurrentBufferForTarget	src/ContextBuffer.cpp	/^size_t * Context :: CurrentBufferForTarget(GLenum target) {$/;"	f	class:Context
CurrentMatrix	src/Context.h	/^		inline const Matrix4x4& CurrentMatrix() {$/;"	f	class:EGL::Context
CurrentMatrix	src/MatrixStack.h	/^		inline Matrix4x4 & CurrentMatrix() {$/;"	f	class:EGL::MatrixStack
CurrentMatrixStack	src/Context.h	/^		inline MatrixStack * CurrentMatrixStack() {$/;"	f	class:EGL::Context
CurrentPaletteMatrix	src/ContextMatrix.cpp	/^void Context :: CurrentPaletteMatrix(GLuint index) {$/;"	f	class:Context
CurrentTextureValuesToRasterPos	src/ContextRender.cpp	/^inline void Context :: CurrentTextureValuesToRasterPos(RasterPos * rasterPos) {$/;"	f	class:Context
CurrentValuesToRasterPos	src/Context.h	/^	inline void Context :: CurrentValuesToRasterPos(RasterPos * rasterPos) {$/;"	f	class:EGL::Context
CurrentValuesToRasterPosNoLight	src/ContextRender.cpp	/^void Context :: CurrentValuesToRasterPosNoLight(RasterPos * rasterPos) {$/;"	f	class:Context
CurrentValuesToRasterPosOneSidedNoTrack	src/ContextRender.cpp	/^void Context :: CurrentValuesToRasterPosOneSidedNoTrack(RasterPos * rasterPos) {$/;"	f	class:Context
CurrentValuesToRasterPosOneSidedTrack	src/ContextRender.cpp	/^void Context :: CurrentValuesToRasterPosOneSidedTrack(RasterPos * rasterPos) {$/;"	f	class:Context
CurrentValuesToRasterPosTwoSidedNoTrack	src/ContextRender.cpp	/^void Context :: CurrentValuesToRasterPosTwoSidedNoTrack(RasterPos * rasterPos) {$/;"	f	class:Context
CurrentValuesToRasterPosTwoSidedTrack	src/ContextRender.cpp	/^void Context :: CurrentValuesToRasterPosTwoSidedTrack(RasterPos * rasterPos) {$/;"	f	class:Context
DATA	projects/linux-ftk/Makefile	/^DATA = $(includeinst_DATA) $(pkgconfig_DATA)$/;"	m
DATA	projects/linux-x11/Makefile	/^DATA = $(includeinst_DATA) $(pkgconfig_DATA)$/;"	m
DEBUG	ug/ug_win32.c	38;"	d	file:
DECL_CONST_REG	src/arm/CodeGenerator.cpp	87;"	d	file:
DECL_CONST_REG	src/arm/GenFragment.cpp	75;"	d	file:
DECL_CONST_REG	src/arm/GenLline.cpp	75;"	d	file:
DECL_CONST_REG	src/arm/GenPoint.cpp	75;"	d	file:
DECL_CONST_REG	src/arm/GenScanline.cpp	76;"	d	file:
DECL_CONST_REG	src/arm/GenTriangle.cpp	75;"	d	file:
DECL_FLAGS	src/arm/CodeGenerator.cpp	86;"	d	file:
DECL_FLAGS	src/arm/GenFragment.cpp	74;"	d	file:
DECL_FLAGS	src/arm/GenLline.cpp	74;"	d	file:
DECL_FLAGS	src/arm/GenPoint.cpp	74;"	d	file:
DECL_FLAGS	src/arm/GenScanline.cpp	75;"	d	file:
DECL_FLAGS	src/arm/GenTriangle.cpp	74;"	d	file:
DECL_REG	src/arm/CodeGenerator.cpp	85;"	d	file:
DECL_REG	src/arm/GenFragment.cpp	73;"	d	file:
DECL_REG	src/arm/GenLline.cpp	73;"	d	file:
DECL_REG	src/arm/GenPoint.cpp	73;"	d	file:
DECL_REG	src/arm/GenScanline.cpp	73;"	d	file:
DECL_REG	src/arm/GenTriangle.cpp	73;"	d	file:
DECL_REG_ARRAY	src/arm/GenScanline.cpp	74;"	d	file:
DEFAULT_INCLUDES	projects/linux-ftk/Makefile	/^DEFAULT_INCLUDES =  -I. -I$(srcdir) -I.$/;"	m
DEFAULT_INCLUDES	projects/linux-x11/Makefile	/^DEFAULT_INCLUDES =  -I. -I$(srcdir) -I.$/;"	m
DEFS	projects/linux-ftk/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	projects/linux-x11/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	projects/linux-ftk/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	projects/linux-x11/Makefile	/^DEPDIR = .deps$/;"	m
DEP_FILES	projects/linux-ftk/Makefile	/^DEP_FILES = .\/$(DEPDIR)\/CodeGenerator.Plo \\$/;"	m
DEP_FILES	projects/linux-x11/Makefile	/^DEP_FILES = .\/$(DEPDIR)\/CodeGenerator.Plo \\$/;"	m
DET_SHIFT	src/RasterizerTriangles.cpp	111;"	d	file:
DIB2D	test/paint.cpp	/^struct DIB2D{$/;"	s	file:
DISTFILES	projects/linux-ftk/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	projects/linux-x11/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	projects/linux-ftk/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/configure Makefile.am \\$/;"	m
DIST_COMMON	projects/linux-x11/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/configure Makefile.am \\$/;"	m
DIST_SOURCES	projects/linux-ftk/Makefile	/^DIST_SOURCES = $(libvincent_la_SOURCES) $(lines_SOURCES)$/;"	m
DIST_SOURCES	projects/linux-x11/Makefile	/^DIST_SOURCES = $(libvincent_la_SOURCES)$/;"	m
DIV	src/codegen/instruction.h	478;"	d
DIV_S	src/codegen/instruction.h	506;"	d
DRAWARRAY	redbook/varray.c	48;"	d	file:
DRAWELEMENTS	redbook/varray.c	50;"	d	file:
DSYMUTIL	projects/linux-ftk/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	projects/linux-x11/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	projects/linux-ftk/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	projects/linux-x11/Makefile	/^DUMPBIN = $/;"	m
DWORD	include/GLES/egltypes.h	/^typedef int DWORD;$/;"	t
Deallocate	src/Arrays.h	/^		void Deallocate(size_t index) {$/;"	f	struct:EGL::ObjectArray
Deallocate	src/Buffer.h	/^		void Deallocate() {$/;"	f	class:EGL::Buffer
DefaultContext	src/Context.h	/^	inline Context * Context :: DefaultContext() {$/;"	f	class:EGL::Context
DeleteBuffers	src/ContextBuffer.cpp	/^void Context :: DeleteBuffers(GLsizei n, const GLuint *buffers) {$/;"	f	class:Context
DeleteTextures	src/ContextTexture.cpp	/^void Context :: DeleteTextures(GLsizei n, const GLuint *textures) { $/;"	f	class:Context
Depth	src/RasterizerState.h	/^			bool				Depth;	\/\/ if true, write depth buffer$/;"	m	struct:EGL::RasterizerState::MaskState
DepthBuffer	src/Rasterizer.h	/^		U16 *		DepthBuffer;$/;"	m	struct:EGL::RasterInfo
DepthFunc	src/ContextRaster.cpp	/^void Context :: DepthFunc(GLenum func) { $/;"	f	class:Context
DepthMask	src/ContextRaster.cpp	/^void Context :: DepthMask(GLboolean flag) { $/;"	f	class:Context
DepthRangeMax	src/Rasterizer.h	/^			DepthRangeMax = 0xffff			\/\/ 31 bits $/;"	e	enum:EGL::Rasterizer::__anon17
DepthRangef	src/ContextFloat.cpp	/^void Context :: DepthRangef (GLclampf zNear, GLclampf zFar) {$/;"	f	class:Context
DepthRangex	src/ContextViewport.cpp	/^void Context :: DepthRangex(GLclampx zNear, GLclampx zFar) { $/;"	f	class:Context
DepthTestState	src/RasterizerState.h	/^			DepthTestState() {$/;"	f	struct:EGL::RasterizerState::DepthTestState
DepthTestState	src/RasterizerState.h	/^			DepthTestState(const DepthTestState& other) {$/;"	f	struct:EGL::RasterizerState::DepthTestState
DepthTestState	src/RasterizerState.h	/^		struct DepthTestState {$/;"	s	class:EGL::RasterizerState
Det2X2	src/linalg.cpp	/^	inline EGL_Fixed Det2X2(EGL_Fixed a, EGL_Fixed b, EGL_Fixed c, EGL_Fixed d) {$/;"	f	namespace:__anon45
Det2x2	src/RasterizerTriangles.cpp	/^	inline EGL_Fixed Det2x2(EGL_Fixed a11, EGL_Fixed a12, EGL_Fixed a21, EGL_Fixed a22) {$/;"	f	namespace:__anon20
Det2x2NoShift	src/RasterizerTriangles.cpp	/^	inline EGL_Fixed Det2x2NoShift(EGL_Fixed a11, EGL_Fixed a12, EGL_Fixed a21, EGL_Fixed a22) {$/;"	f	namespace:__anon20
Disable	src/Context.cpp	/^void Context :: Disable(GLenum cap) { $/;"	f	class:Context
DisableClientState	src/ContextRender.cpp	/^void Context :: DisableClientState(GLenum array) { $/;"	f	class:Context
Display	src/Display.h	/^	class Display {$/;"	c	namespace:EGL
Dispose	src/Context.cpp	/^void Context :: Dispose() {$/;"	f	class:Context
Dispose	src/Epoc/Surface.cpp	/^void Surface :: Dispose() {$/;"	f	class:Surface
Dispose	src/Texture.cpp	/^void Texture :: Dispose() {$/;"	f	class:Texture
Dispose	src/WinCE/Surface.cpp	/^void Surface :: Dispose() {$/;"	f	class:Surface
Dispose	src/linux-ftk/Surface.cpp	/^void Surface :: Dispose() $/;"	f	class:Surface
Dispose	src/linux-x11/Surface.cpp	/^void Surface :: Dispose() $/;"	f	class:Surface
Dispose	src/win/Surface.cpp	/^void Surface :: Dispose() {$/;"	f	class:Surface
DllMain	src/WinCE/OGLES.cpp	/^BOOL APIENTRY DllMain( HANDLE hModule, $/;"	f
DllMain	src/win/OGLES.cpp	/^BOOL APIENTRY DllMain( HANDLE hModule, $/;"	f
Dot3	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: Dot3(cg_block_t * block, $/;"	f	class:CodeGenerator
Dot3U8	src/Rasterizer.cpp	/^	inline U8 Dot3U8(const Color& arg0, const Color& arg1) {$/;"	f	namespace:__anon41
Dot3U8	src/Rasterizer.cpp	/^	inline U8 Dot3U8(const Color& arg0, const Color& arg1, EGL_Fixed scale) {$/;"	f	namespace:__anon41
Draw	test/epoc/appview.cpp	/^void CAppView::Draw(const TRect& aRect) const$/;"	f	class:CAppView
DrawArrays	src/ContextRender.cpp	/^void Context :: DrawArrays(GLenum mode, GLint first, GLsizei count) { $/;"	f	class:Context
DrawElements	src/ContextRender.cpp	/^void Context :: DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) { $/;"	f	class:Context
DrawMesh	src/ContextMesh.cpp	/^void Context :: DrawMesh(GLsizei count, GLenum type, GLsizei stride,$/;"	f	class:Context
DrawTexf	src/ContextFloat.cpp	/^void Context :: DrawTexf(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) {$/;"	f	class:Context
DrawTexfv	src/ContextFloat.cpp	/^void Context :: DrawTexfv(GLfloat *coords) {$/;"	f	class:Context
Dump	src/arm/CodeGenerator.cpp	/^	void Dump(const char * filename, cg_module_t * module)$/;"	f	namespace:__anon7
DynInitMenuPaneL	test/epoc/appui.cpp	/^void CAppUi::DynInitMenuPaneL(TInt aMenuId, CEikMenuPane* aMenuPane)$/;"	f	class:CAppUi
E32Dll	src/Epoc/OGLES.cpp	/^GLDEF_C TInt E32Dll(TDllReason) {$/;"	f
E32Dll	test/epoc/test.cpp	/^GLDEF_C TInt E32Dll(TDllReason)$/;"	f
ECHO_C	projects/linux-ftk/Makefile	/^ECHO_C = $/;"	m
ECHO_C	projects/linux-x11/Makefile	/^ECHO_C = $/;"	m
ECHO_N	projects/linux-ftk/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	projects/linux-x11/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	projects/linux-ftk/Makefile	/^ECHO_T = $/;"	m
ECHO_T	projects/linux-x11/Makefile	/^ECHO_T = $/;"	m
EGL	include/GLES/egltypes.h	/^namespace EGL {$/;"	n
EGL	src/Arrays.h	/^namespace EGL {$/;"	n
EGL	src/Buffer.h	/^namespace EGL {$/;"	n
EGL	src/Color.h	/^namespace EGL {$/;"	n
EGL	src/Config.h	/^namespace EGL {$/;"	n
EGL	src/Context.h	/^namespace EGL {$/;"	n
EGL	src/Display.h	/^namespace EGL {$/;"	n
EGL	src/Epoc/Surface.h	/^namespace EGL {$/;"	n
EGL	src/FractionalColor.h	/^namespace EGL {$/;"	n
EGL	src/Light.h	/^namespace EGL {$/;"	n
EGL	src/Material.h	/^namespace EGL {$/;"	n
EGL	src/MatrixStack.h	/^namespace EGL {$/;"	n
EGL	src/OGLES.h	/^namespace EGL {$/;"	n
EGL	src/Rasterizer.h	/^namespace EGL {$/;"	n
EGL	src/RasterizerState.h	/^namespace EGL {$/;"	n
EGL	src/Texture.h	/^namespace EGL {$/;"	n
EGL	src/Types.h	/^namespace EGL {$/;"	n
EGL	src/Utils.cpp	/^namespace EGL {$/;"	n	file:
EGL	src/Utils.h	/^namespace EGL {$/;"	n
EGL	src/WinCE/Surface.h	/^namespace EGL {$/;"	n
EGL	src/arm/CodeGenerator.h	/^namespace EGL {$/;"	n
EGL	src/arm/FunctionCache.cpp	/^namespace EGL {$/;"	n	file:
EGL	src/arm/FunctionCache.h	/^namespace EGL {$/;"	n
EGL	src/linalg.h	/^namespace EGL {$/;"	n
EGL	src/linux-ftk/Surface.h	/^namespace EGL {$/;"	n
EGL	src/linux-x11/Surface.h	/^namespace EGL {$/;"	n
EGL	src/win/Surface.h	/^namespace EGL {$/;"	n
EGLBoolean	include/GLES/egltypes.h	/^typedef int				EGLBoolean;$/;"	t
EGLConfig	include/GLES/egltypes.h	/^typedef const EGL::Config *		EGLConfig;$/;"	t
EGLConfig	include/GLES/egltypes.h	/^typedef void *			EGLConfig;$/;"	t
EGLContext	include/GLES/egltypes.h	/^typedef EGL::Context  *			EGLContext;$/;"	t
EGLContext	include/GLES/egltypes.h	/^typedef void *			EGLContext;$/;"	t
EGLDisplay	include/GLES/egltypes.h	/^typedef void *			EGLDisplay;$/;"	t
EGLSurface	include/GLES/egltypes.h	/^typedef EGL::Surface *			EGLSurface;$/;"	t
EGLSurface	include/GLES/egltypes.h	/^typedef void *			EGLSurface;$/;"	t
EGL_2PI	src/fixed.h	67;"	d
EGL_ALPHA_SIZE	include/GLES/egl.h	59;"	d
EGL_ARRAYS_H	src/Arrays.h	2;"	d
EGL_Abs	src/fixed.h	/^static inline I32 EGL_Abs(I32 value) {$/;"	f
EGL_BACK_BUFFER	include/GLES/egl.h	129;"	d
EGL_BAD_ACCESS	include/GLES/egl.h	40;"	d
EGL_BAD_ALLOC	include/GLES/egl.h	41;"	d
EGL_BAD_ATTRIBUTE	include/GLES/egl.h	42;"	d
EGL_BAD_CONFIG	include/GLES/egl.h	43;"	d
EGL_BAD_CONTEXT	include/GLES/egl.h	44;"	d
EGL_BAD_CURRENT_SURFACE	include/GLES/egl.h	45;"	d
EGL_BAD_DISPLAY	include/GLES/egl.h	46;"	d
EGL_BAD_MATCH	include/GLES/egl.h	47;"	d
EGL_BAD_NATIVE_PIXMAP	include/GLES/egl.h	48;"	d
EGL_BAD_NATIVE_WINDOW	include/GLES/egl.h	49;"	d
EGL_BAD_PARAMETER	include/GLES/egl.h	50;"	d
EGL_BAD_SURFACE	include/GLES/egl.h	51;"	d
EGL_BIND_TO_TEXTURE_RGB	include/GLES/egl.h	83;"	d
EGL_BIND_TO_TEXTURE_RGBA	include/GLES/egl.h	84;"	d
EGL_BLUE_SIZE	include/GLES/egl.h	60;"	d
EGL_BUFFER_H	src/Buffer.h	2;"	d
EGL_BUFFER_SIZE	include/GLES/egl.h	58;"	d
EGL_CLAMP	src/fixed.h	/^inline static U32 EGL_CLAMP(U32 value, U32 min, U32 max) {$/;"	f
EGL_CLAMPI	src/fixed.h	/^inline static I32 EGL_CLAMPI(I32 value, I32 min, I32 max) {$/;"	f
EGL_CODE_GENERATOR_H	src/arm/CodeGenerator.h	2;"	d
EGL_COLOR_H	src/Color.h	2;"	d
EGL_CONFIG_CAVEAT	include/GLES/egl.h	65;"	d
EGL_CONFIG_EXTENSIONS	src/OGLES.h	81;"	d
EGL_CONFIG_H	src/Config.h	2;"	d
EGL_CONFIG_ID	include/GLES/egl.h	66;"	d
EGL_CONFIG_RENDERER	src/OGLES.h	91;"	d
EGL_CONFIG_RENDERER	src/OGLES.h	93;"	d
EGL_CONFIG_VENDOR	src/OGLES.h	79;"	d
EGL_CONFIG_VERSION	src/OGLES.h	80;"	d
EGL_CONTEXT_H	src/Context.h	2;"	d
EGL_CONTEXT_LOST	include/GLES/egl.h	52;"	d
EGL_CORE_NATIVE_ENGINE	include/GLES/egl.h	140;"	d
EGL_Cos	src/fixed.cpp	/^EGL_Fixed EGL_Cos(EGL_Fixed a) {$/;"	f
EGL_Cos	src/fixed.h	/^inline EGL_Fixed EGL_Cos(EGL_Fixed value) {$/;"	f
EGL_DEFAULT_DISPLAY	include/GLES/egltypes.h	34;"	d
EGL_DEFAULT_DISPLAY	include/GLES/egltypes.h	48;"	d
EGL_DEFAULT_DISPLAY	include/GLES/egltypes.h	58;"	d
EGL_DEFAULT_DISPLAY	include/GLES/egltypes.h	72;"	d
EGL_DEPTH_SIZE	include/GLES/egl.h	63;"	d
EGL_DISPLAY_H	src/Display.h	2;"	d
EGL_DONT_CARE	include/GLES/egl.h	91;"	d
EGL_DRAW	include/GLES/egl.h	134;"	d
EGL_Direction	src/linalg.h	/^	inline OGLES_API Vec3D EGL_Direction(const Vec4D& from, const Vec4D& to) {$/;"	f	namespace:EGL
EGL_Div	src/fixed.h	/^inline EGL_Fixed EGL_Div(EGL_Fixed a, EGL_Fixed b) {$/;"	f
EGL_EXTENSIONS	include/GLES/egl.h	113;"	d
EGL_FALSE	include/GLES/egl.h	32;"	d
EGL_FIXED_H	src/fixed.h	2;"	d
EGL_FRACTIONAL_COLOR_H	src/FractionalColor.h	2;"	d
EGL_FUNCTION_CACHE_H	src/arm/FunctionCache.h	2;"	d
EGL_FastSqrt	src/fixed.h	/^inline EGL_Fixed EGL_FastSqrt(EGL_Fixed value) {$/;"	f
EGL_Fixed	src/fixed.h	/^typedef I32 EGL_Fixed;$/;"	t
EGL_FixedFromFloat	src/fixed.h	/^inline I32 EGL_FixedFromFloat(float value) {$/;"	f
EGL_FixedFromInt	src/fixed.h	/^inline EGL_Fixed EGL_FixedFromInt(I32 value) {$/;"	f
EGL_FloatFromFixed	src/fixed.h	/^inline float EGL_FloatFromFixed(EGL_Fixed value) {$/;"	f
EGL_FractionFromFixed	src/fixed.h	/^inline I32 EGL_FractionFromFixed(EGL_Fixed value) {$/;"	f
EGL_GREEN_SIZE	include/GLES/egl.h	61;"	d
EGL_HALF	src/fixed.h	63;"	d
EGL_HEIGHT	include/GLES/egl.h	118;"	d
EGL_IntFromFixed	src/fixed.h	/^inline I32 EGL_IntFromFixed(EGL_Fixed value) {$/;"	f
EGL_InvSqrt	src/fixed.cpp	/^EGL_Fixed EGL_InvSqrt(EGL_Fixed a) {$/;"	f
EGL_InvSqrt	src/fixed.h	/^inline EGL_Fixed EGL_InvSqrt(EGL_Fixed value) {$/;"	f
EGL_Inverse	src/fixed.cpp	/^EGL_Fixed EGL_Inverse(EGL_Fixed a) {$/;"	f
EGL_Inverse	src/fixed.h	/^inline EGL_Fixed EGL_Inverse(EGL_Fixed value) {$/;"	f
EGL_JIT_VERSION	src/OGLES.h	97;"	d
EGL_JIT_VERSION	src/OGLES.h	99;"	d
EGL_LARGEST_PBUFFER	include/GLES/egl.h	120;"	d
EGL_LEVEL	include/GLES/egl.h	67;"	d
EGL_LIGHT_H	src/Light.h	2;"	d
EGL_LINALG_H	src/linalg.h	2;"	d
EGL_MAP_0_1	src/fixed.h	/^inline static EGL_Fixed EGL_MAP_0_1(EGL_Fixed value) {$/;"	f
EGL_MAP_BITFIELD	src/fixed.h	/^inline static U32 EGL_MAP_BITFIELD(I32 value, unsigned bits) {$/;"	f
EGL_MATERIAL_H	src/Material.h	2;"	d
EGL_MATRIX_STACK_H	src/MatrixStack.h	2;"	d
EGL_MAX_PBUFFER_HEIGHT	include/GLES/egl.h	68;"	d
EGL_MAX_PBUFFER_PIXELS	include/GLES/egl.h	69;"	d
EGL_MAX_PBUFFER_WIDTH	include/GLES/egl.h	70;"	d
EGL_MAX_SWAP_INTERVAL	include/GLES/egl.h	86;"	d
EGL_MINF	src/fixed.h	65;"	d
EGL_MIN_SWAP_INTERVAL	include/GLES/egl.h	85;"	d
EGL_MIPMAP_LEVEL	include/GLES/egl.h	124;"	d
EGL_MIPMAP_PER_TEXEL	src/OGLES.h	106;"	d
EGL_MIPMAP_TEXTURE	include/GLES/egl.h	123;"	d
EGL_Max	src/fixed.h	/^static inline I32 EGL_Max(I32 first, I32 second) {$/;"	f
EGL_Min	src/fixed.h	/^static inline I32 EGL_Min(I32 first, I32 second) {$/;"	f
EGL_Mul	src/fixed.h	/^inline EGL_Fixed EGL_Mul(EGL_Fixed a, EGL_Fixed b) {$/;"	f
EGL_NATIVE_RENDERABLE	include/GLES/egl.h	71;"	d
EGL_NATIVE_VISUAL_ID	include/GLES/egl.h	72;"	d
EGL_NATIVE_VISUAL_TYPE	include/GLES/egl.h	73;"	d
EGL_NONE	include/GLES/egl.h	82;"	d
EGL_NON_CONFORMANT_CONFIG	include/GLES/egl.h	94;"	d
EGL_NOT_INITIALIZED	include/GLES/egl.h	39;"	d
EGL_NO_CONTEXT	include/GLES/egltypes.h	110;"	d
EGL_NO_DISPLAY	include/GLES/egltypes.h	111;"	d
EGL_NO_SURFACE	include/GLES/egltypes.h	112;"	d
EGL_NO_TEXTURE	include/GLES/egl.h	96;"	d
EGL_NUMBER_LIGHTS	src/Context.h	62;"	d
EGL_NUM_TEXTURE_UNITS	src/OGLES.h	104;"	d
EGL_NearestInt	src/fixed.h	/^inline EGL_Fixed EGL_NearestInt(EGL_Fixed value) {$/;"	f
EGL_OGLES_H	src/OGLES.h	2;"	d
EGL_ONE	src/fixed.h	61;"	d
EGL_ON_LINUX	src/linux-ftk/stdafx.h	38;"	d
EGL_ON_LINUX	src/linux-x11/stdafx.h	38;"	d
EGL_ON_SYMBIAN	src/Epoc/stdafx.h	38;"	d
EGL_ON_SYMBIAN	test/epoc/stdafx.h	1;"	d
EGL_ON_WINCE	src/WinCE/stdafx.h	38;"	d
EGL_ON_WINCE	src/win/stdafx.h	38;"	d
EGL_ON_WINCE	test/stdafx.h	8;"	d
EGL_PBUFFER_BIT	include/GLES/egl.h	104;"	d
EGL_PINF	src/fixed.h	64;"	d
EGL_PIXMAP_BIT	include/GLES/egl.h	105;"	d
EGL_PLATFORM_HEADER_INCLUDE	include/GLES/gl.h	44;"	d
EGL_PLATFORM_HEADER_INCLUDE	include/GLES/gl.h	52;"	d
EGL_PLATFORM_HEADER_INCLUDE	include/GLES/gl.h	57;"	d
EGL_PRECISION	src/fixed.h	60;"	d
EGL_Power	src/fixed.cpp	/^OGLES_API EGL_Fixed EGL_Power(EGL_Fixed a, EGL_Fixed n) {$/;"	f
EGL_R2PI	src/fixed.h	68;"	d
EGL_RASTERIZER_H	src/Rasterizer.h	2;"	d
EGL_RASTERIZER_STATE_H	src/RasterizerState.h	2;"	d
EGL_READ	include/GLES/egl.h	135;"	d
EGL_RED_SIZE	include/GLES/egl.h	62;"	d
EGL_RELEASE	src/OGLES.h	76;"	d
EGL_Round	src/fixed.h	/^inline I32 EGL_Round(EGL_Fixed value) {$/;"	f
EGL_SAMPLES	include/GLES/egl.h	75;"	d
EGL_SAMPLE_BUFFERS	include/GLES/egl.h	76;"	d
EGL_SLOW_CONFIG	include/GLES/egl.h	93;"	d
EGL_STENCIL_SIZE	include/GLES/egl.h	64;"	d
EGL_SUCCESS	include/GLES/egl.h	38;"	d
EGL_SURFACE_H	src/Epoc/Surface.h	2;"	d
EGL_SURFACE_H	src/WinCE/Surface.h	2;"	d
EGL_SURFACE_H	src/linux-ftk/Surface.h	2;"	d
EGL_SURFACE_H	src/linux-x11/Surface.h	2;"	d
EGL_SURFACE_H	src/win/Surface.h	2;"	d
EGL_SURFACE_TYPE	include/GLES/egl.h	77;"	d
EGL_Sin	src/fixed.cpp	/^EGL_Fixed EGL_Sin(EGL_Fixed a) {$/;"	f
EGL_Sin	src/fixed.h	/^inline EGL_Fixed EGL_Sin(EGL_Fixed value) {$/;"	f
EGL_Sqrt	src/Light.cpp	139;"	d	file:
EGL_Sqrt	src/fixed.cpp	/^EGL_Fixed EGL_Sqrt(EGL_Fixed a) {$/;"	f
EGL_Sqrt	src/fixed.h	/^inline EGL_Fixed EGL_Sqrt(EGL_Fixed value) {$/;"	f
EGL_TEXTURE_2D	include/GLES/egl.h	99;"	d
EGL_TEXTURE_FORMAT	include/GLES/egl.h	121;"	d
EGL_TEXTURE_H	src/Texture.h	2;"	d
EGL_TEXTURE_RGB	include/GLES/egl.h	97;"	d
EGL_TEXTURE_RGBA	include/GLES/egl.h	98;"	d
EGL_TEXTURE_TARGET	include/GLES/egl.h	122;"	d
EGL_TRANSPARENT_BLUE_VALUE	include/GLES/egl.h	79;"	d
EGL_TRANSPARENT_GREEN_VALUE	include/GLES/egl.h	80;"	d
EGL_TRANSPARENT_RED_VALUE	include/GLES/egl.h	81;"	d
EGL_TRANSPARENT_RGB	include/GLES/egl.h	95;"	d
EGL_TRANSPARENT_TYPE	include/GLES/egl.h	78;"	d
EGL_TRUE	include/GLES/egl.h	33;"	d
EGL_TYPES_H	src/Types.h	2;"	d
EGL_USE_CLZ	src/OGLES.h	132;"	d
EGL_USE_JIT	src/OGLES.h	69;"	d
EGL_USE_JIT	src/OGLES.h	71;"	d
EGL_USE_TOP_DOWN_SURFACE	src/OGLES.h	55;"	d
EGL_UTILS_H	src/Utils.h	2;"	d
EGL_VENDOR	include/GLES/egl.h	111;"	d
EGL_VERSION	include/GLES/egl.h	112;"	d
EGL_VERSION_1_0	include/GLES/egl.h	26;"	d
EGL_VERSION_1_1	include/GLES/egl.h	27;"	d
EGL_VERSION_MAJOR	src/Epoc/egl.cpp	52;"	d	file:
EGL_VERSION_MAJOR	src/WinCE/egl.cpp	57;"	d	file:
EGL_VERSION_MAJOR	src/linux-ftk/egl.cpp	57;"	d	file:
EGL_VERSION_MAJOR	src/linux-x11/egl.cpp	58;"	d	file:
EGL_VERSION_MAJOR	src/win/egl.cpp	57;"	d	file:
EGL_VERSION_MINOR	src/Epoc/egl.cpp	53;"	d	file:
EGL_VERSION_MINOR	src/WinCE/egl.cpp	58;"	d	file:
EGL_VERSION_MINOR	src/linux-ftk/egl.cpp	58;"	d	file:
EGL_VERSION_MINOR	src/linux-x11/egl.cpp	59;"	d	file:
EGL_VERSION_MINOR	src/win/egl.cpp	58;"	d	file:
EGL_VERSION_NUMBER	src/OGLES.h	102;"	d
EGL_WIDTH	include/GLES/egl.h	119;"	d
EGL_WINDOW_BIT	include/GLES/egl.h	106;"	d
EGL_ZERO	src/fixed.h	62;"	d
EGLint	include/GLES/egltypes.h	/^typedef int				EGLint;$/;"	t
EGREP	projects/linux-ftk/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	projects/linux-x11/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ELEMENTS	src/linalg.h	/^			ELEMENTS = 16,		\/\/ total number of elements$/;"	e	enum:EGL::Matrix4x4::__anon43
END	redbook/stroke.c	50;"	d	file:
ETAGS	projects/linux-ftk/Makefile	/^ETAGS = etags$/;"	m
ETAGS	projects/linux-x11/Makefile	/^ETAGS = etags$/;"	m
ETAGSFLAGS	projects/linux-ftk/Makefile	/^ETAGSFLAGS =$/;"	m
ETAGSFLAGS	projects/linux-x11/Makefile	/^ETAGSFLAGS =$/;"	m
EXEEXT	projects/linux-ftk/Makefile	/^EXEEXT = $/;"	m
EXEEXT	projects/linux-x11/Makefile	/^EXEEXT = $/;"	m
Edata	redbook/stroke.c	/^CP Edata[] = {$/;"	v
EdgeCoord	src/Rasterizer.h	/^	struct EdgeCoord {$/;"	s	namespace:EGL
EdgePos	src/Rasterizer.h	/^	struct EdgePos {$/;"	s	namespace:EGL
Element	src/linalg.h	/^		inline EGL_Fixed& Element(int index) {$/;"	f	class:EGL::Matrix4x4
Element	src/linalg.h	/^		inline EGL_Fixed& Element(int row, int column) {$/;"	f	class:EGL::Matrix4x4
Element	src/linalg.h	/^		inline const EGL_Fixed& Element(int index) const {$/;"	f	class:EGL::Matrix4x4
Element	src/linalg.h	/^		inline const EGL_Fixed& Element(int row, int column) const {$/;"	f	class:EGL::Matrix4x4
Enable	src/Context.cpp	/^void Context :: Enable(GLenum cap) { $/;"	f	class:Context
EnableAlphaTest	src/RasterizerState.h	/^	inline void RasterizerState :: EnableAlphaTest(bool enabled) {$/;"	f	class:EGL::RasterizerState
EnableBlending	src/RasterizerState.h	/^	inline void RasterizerState :: EnableBlending(bool enabled) {$/;"	f	class:EGL::RasterizerState
EnableClientState	src/ContextRender.cpp	/^void Context :: EnableClientState(GLenum array) { $/;"	f	class:Context
EnableDepthTest	src/RasterizerState.h	/^	inline void RasterizerState :: EnableDepthTest(bool enabled) {$/;"	f	class:EGL::RasterizerState
EnableFog	src/RasterizerState.h	/^	inline void RasterizerState :: EnableFog(bool enabled) {$/;"	f	class:EGL::RasterizerState
EnableLogicOp	src/RasterizerState.h	/^	inline void RasterizerState :: EnableLogicOp(bool enabled) {$/;"	f	class:EGL::RasterizerState
EnablePolygonOffsetFill	src/RasterizerState.h	/^	inline void RasterizerState :: EnablePolygonOffsetFill(bool enabled) {$/;"	f	class:EGL::RasterizerState
EnableScissorTest	src/RasterizerState.h	/^	inline void RasterizerState :: EnableScissorTest(bool enabled) {$/;"	f	class:EGL::RasterizerState
EnableStencilTest	src/RasterizerState.h	/^	inline void RasterizerState :: EnableStencilTest(bool enabled) {$/;"	f	class:EGL::RasterizerState
EnableTexture	src/RasterizerState.h	/^	inline void RasterizerState :: EnableTexture(size_t unit, bool enabled) {$/;"	f	class:EGL::RasterizerState
Enabled	src/RasterizerState.h	/^			bool					Enabled;$/;"	m	struct:EGL::RasterizerState::TextureState
Enabled	src/RasterizerState.h	/^			bool				Enabled;$/;"	m	struct:EGL::RasterizerState::AlphaState
Enabled	src/RasterizerState.h	/^			bool				Enabled;$/;"	m	struct:EGL::RasterizerState::BlendState
Enabled	src/RasterizerState.h	/^			bool				Enabled;$/;"	m	struct:EGL::RasterizerState::DepthTestState
Enabled	src/RasterizerState.h	/^			bool				Enabled;$/;"	m	struct:EGL::RasterizerState::FogState
Enabled	src/RasterizerState.h	/^			bool				Enabled;$/;"	m	struct:EGL::RasterizerState::LogicOpState
Enabled	src/RasterizerState.h	/^			bool				Enabled;$/;"	m	struct:EGL::RasterizerState::ScissorTestState
Enabled	src/RasterizerState.h	/^			bool				Enabled;$/;"	m	struct:EGL::RasterizerState::StencilState
EnumFromBlendFuncDst	src/Context.cpp	/^	GLenum EnumFromBlendFuncDst(RasterizerState::BlendFuncDst dfactor) {$/;"	f	namespace:__anon53
EnumFromBlendFuncSrc	src/Context.cpp	/^	GLenum EnumFromBlendFuncSrc(RasterizerState::BlendFuncSrc sfactor) {$/;"	f	namespace:__anon53
EnumFromComparisonFunc	src/Context.cpp	/^	GLenum EnumFromComparisonFunc(RasterizerState::ComparisonFunc func) {$/;"	f	namespace:__anon53
EnumFromLogicOp	src/Context.cpp	/^	GLenum EnumFromLogicOp(RasterizerState::LogicOp op) {$/;"	f	namespace:__anon53
EnumFromStencilOp	src/Context.cpp	/^	GLenum EnumFromStencilOp(RasterizerState::StencilOp op) {$/;"	f	namespace:__anon53
EnvColor	src/RasterizerState.h	/^			Color					EnvColor;$/;"	m	struct:EGL::RasterizerState::TextureState
Exit	test/epoc/appview.cpp	/^void CAppView::Exit()$/;"	f	class:CAppView
Exit	tools/makecab.cmd	/^:Exit$/;"	l
Exp	src/ContextRender.cpp	/^	inline EGL_Fixed Exp(EGL_Fixed value) {$/;"	f	namespace:__anon44
Exp2	src/ContextRender.cpp	/^	inline EGL_Fixed Exp2(EGL_Fixed value) {$/;"	f	namespace:__anon44
ExtractBitFieldTo255	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: ExtractBitFieldTo255(cg_block_t * block, cg_virtual_reg_t * value, size_t low, size_t high) {$/;"	f	class:CodeGenerator
ExtractColorPalette	src/ContextTexture.cpp	/^	Color * ExtractColorPalette(const U8 *& data, PaletteFormat format, size_t numberOfColors) {$/;"	f	namespace:__anon38
F	src/fixed.h	72;"	d
FACTOR	src/Arrays.h	/^			FACTOR = 2$/;"	e	enum:EGL::ObjectArray::__anon5
FADD	src/codegen/instruction.h	486;"	d
FADD_S	src/codegen/instruction.h	514;"	d
FCMP	src/codegen/instruction.h	527;"	d
FCNV	src/codegen/instruction.h	447;"	d
FCNV_S	src/codegen/instruction.h	465;"	d
FDIV	src/codegen/instruction.h	487;"	d
FDIV_S	src/codegen/instruction.h	515;"	d
FGREP	projects/linux-ftk/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	projects/linux-x11/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FINV	src/codegen/instruction.h	443;"	d
FINV_S	src/codegen/instruction.h	461;"	d
FMUL	src/codegen/instruction.h	488;"	d
FMUL_S	src/codegen/instruction.h	516;"	d
FNEG	src/codegen/instruction.h	441;"	d
FNEG_S	src/codegen/instruction.h	459;"	d
FSQRT	src/codegen/instruction.h	444;"	d
FSQRT_S	src/codegen/instruction.h	462;"	d
FSUB	src/codegen/instruction.h	489;"	d
FSUB_S	src/codegen/instruction.h	517;"	d
FTK_HIDE	src/linux-ftk/demos/demo_hello.c	11;"	d	file:
FTK_MAIN	src/linux-ftk/demos/demo_hello.c	/^FTK_HIDE int FTK_MAIN(int argc, char* argv[])$/;"	f
Fail	src/RasterizerState.h	/^			StencilOp			Fail, ZFail, ZPass;$/;"	m	struct:EGL::RasterizerState::StencilState
FetchByteColorValues	src/Arrays.h	/^		void FetchByteColorValues(int row, GLfixed * buffer) {$/;"	f	struct:EGL::VertexArray
FetchByteValues	src/Arrays.h	/^		void FetchByteValues(int row, GLfixed * buffer) {$/;"	f	struct:EGL::VertexArray
FetchFixedValues	src/Arrays.h	/^		void FetchFixedValues(int row, GLfixed * buffer) {$/;"	f	struct:EGL::VertexArray
FetchFloatValues	src/Arrays.h	/^		void FetchFloatValues(int row, GLfixed * buffer) {$/;"	f	struct:EGL::VertexArray
FetchShortValues	src/Arrays.h	/^		void FetchShortValues(int row, GLfixed * buffer) {$/;"	f	struct:EGL::VertexArray
FetchTexColor	src/arm/GenFragment.cpp	/^void CodeGenerator :: FetchTexColor(cg_proc_t * procedure, cg_block_t * currentBlock,$/;"	f	class:CodeGenerator
FetchUnsignedByteValues	src/Arrays.h	/^		void FetchUnsignedByteValues(int row, GLfixed * buffer) {$/;"	f	struct:EGL::VertexArray
FetchUnsignedByteValues	src/Arrays.h	/^		void FetchUnsignedByteValues(int row, GLubyte * buffer) {$/;"	f	struct:EGL::VertexArray
FetchValueFunction	src/Arrays.h	/^		typedef void (VertexArray::*FetchValueFunction)(int row, GLfixed * buffer);$/;"	t	struct:EGL::VertexArray
FetchValues	src/Arrays.h	/^		inline void FetchValues(int row, GLfixed * buffer) {$/;"	f	struct:EGL::VertexArray
FillRect	src/Epoc/Surface.cpp	/^	template <class T> void FillRect(T * base, const Rect & bufferRect, const Rect & fillRect,$/;"	f	namespace:__anon14
FillRect	src/WinCE/Surface.cpp	/^	template <class T> void FillRect(T * base, const Rect & bufferRect, const Rect & fillRect,$/;"	f	namespace:__anon55
FillRect	src/linux-ftk/Surface.cpp	/^    template <class T> void FillRect(T * base, const Rect & bufferRect, $/;"	f	namespace:__anon3
FillRect	src/linux-ftk/Surface.cpp	/^    template <class T> void FillRect(T * base, const Rect & bufferRect,$/;"	f	namespace:__anon3
FillRect	src/linux-x11/Surface.cpp	/^    template <class T> void FillRect(T * base, const Rect & bufferRect, $/;"	f	namespace:__anon18
FillRect	src/linux-x11/Surface.cpp	/^    template <class T> void FillRect(T * base, const Rect & bufferRect,$/;"	f	namespace:__anon18
FillRect	src/win/Surface.cpp	/^	template <class T> void FillRect(T * base, const Rect & bufferRect, const Rect & fillRect,$/;"	f	namespace:__anon48
FilterMode	src/RasterizerState.h	/^		enum FilterMode {$/;"	g	class:EGL::RasterizerState
FilterModeInvalid	src/RasterizerState.h	/^			FilterModeInvalid = -1,$/;"	e	enum:EGL::RasterizerState::FilterMode
FilterModeLinear	src/RasterizerState.h	/^			FilterModeLinear$/;"	e	enum:EGL::RasterizerState::FilterMode
FilterModeNearest	src/RasterizerState.h	/^			FilterModeNearest,$/;"	e	enum:EGL::RasterizerState::FilterMode
FilterModeNone	src/RasterizerState.h	/^			FilterModeNone,$/;"	e	enum:EGL::RasterizerState::FilterMode
FindAppT	ug/ug_win32.c	/^FindAppT, *pFindAppT;$/;"	t	typeref:struct:_FindAppT	file:
FindApplicationWindowProc	ug/ug_win32.c	/^BOOL CALLBACK FindApplicationWindowProc(HWND hwnd, LPARAM lParam)$/;"	f
Finish	src/Context.cpp	/^void Context :: Finish(void) { }$/;"	f	class:Context
Finish	src/Rasterizer.cpp	/^void Rasterizer :: Finish() {$/;"	f	class:Rasterizer
Flush	src/Context.cpp	/^void Context :: Flush(void) { }$/;"	f	class:Context
FogDensity	src/ContextRender.cpp	/^EGL_Fixed Context :: FogDensity(EGL_Fixed eyeDistance) const {$/;"	f	class:Context
FogLinear	src/Context.h	/^			FogLinear,$/;"	e	enum:EGL::Context::FogMode
FogMode	src/Context.h	/^		enum FogMode {$/;"	g	class:EGL::Context
FogModeExp	src/Context.h	/^			FogModeExp,$/;"	e	enum:EGL::Context::FogMode
FogModeExp2	src/Context.h	/^			FogModeExp2$/;"	e	enum:EGL::Context::FogMode
FogState	src/RasterizerState.h	/^			FogState() {$/;"	f	struct:EGL::RasterizerState::FogState
FogState	src/RasterizerState.h	/^			FogState(const FogState& other) {$/;"	f	struct:EGL::RasterizerState::FogState
FogState	src/RasterizerState.h	/^		struct FogState {$/;"	s	class:EGL::RasterizerState
Fogf	src/ContextFloat.cpp	/^void Context :: Fogf (GLenum pname, GLfloat param) {$/;"	f	class:Context
Fogfv	src/ContextFloat.cpp	/^void Context :: Fogfv (GLenum pname, const GLfloat *params) {$/;"	f	class:Context
Fogx	src/ContextLight.cpp	/^void Context :: Fogx(GLenum pname, GLfixed param) { $/;"	f	class:Context
Fogxv	src/ContextLight.cpp	/^void Context :: Fogxv(GLenum pname, const GLfixed *params) { $/;"	f	class:Context
FractionalColor	src/FractionalColor.h	/^		FractionalColor() {$/;"	f	class:EGL::FractionalColor
FractionalColor	src/FractionalColor.h	/^		FractionalColor(EGL_Fixed R, EGL_Fixed G, EGL_Fixed B, EGL_Fixed A) {$/;"	f	class:EGL::FractionalColor
FractionalColor	src/FractionalColor.h	/^		FractionalColor(const Color & color) {$/;"	f	class:EGL::FractionalColor
FractionalColor	src/FractionalColor.h	/^		FractionalColor(const EGL_Fixed * rgba) {$/;"	f	class:EGL::FractionalColor
FractionalColor	src/FractionalColor.h	/^		FractionalColor(const FractionalColor& other) {$/;"	f	class:EGL::FractionalColor
FractionalColor	src/FractionalColor.h	/^	class FractionalColor {$/;"	c	namespace:EGL
Fragment	src/Rasterizer.cpp	/^inline void Rasterizer :: Fragment(I32 x, I32 y, EGL_Fixed depth, EGL_Fixed tu[], EGL_Fixed tv[],$/;"	f	class:Rasterizer
Fragment	src/Rasterizer.cpp	/^void Rasterizer :: Fragment(const RasterInfo * rasterInfo, I32 x, EGL_Fixed depth, EGL_Fixed tu[], EGL_Fixed tv[],$/;"	f	class:Rasterizer
FragmentGenerationInfo	src/arm/CodeGenerator.h	/^	struct FragmentGenerationInfo {$/;"	s	namespace:EGL
From4444	src/Color.h	/^		static inline Color From4444(U16 u4444) {$/;"	f	class:EGL::Color
From5551	src/Color.h	/^		static inline Color From5551(U16 u5551) {$/;"	f	class:EGL::Color
From565	src/Color.h	/^		static inline Color From565(U16 u565) {$/;"	f	class:EGL::Color
From565A	src/Color.h	/^		static inline Color From565A(U16 u565, U8 alpha) {$/;"	f	class:EGL::Color
FromLuminanceAlpha	src/Color.h	/^		static inline Color FromLuminanceAlpha(U16 la) {$/;"	f	class:EGL::Color
FromRGBA	src/Color.h	/^		static inline Color FromRGBA(U32 rgba) {$/;"	f	class:EGL::Color
FrontFace	src/ContextTriangles.cpp	/^void Context :: FrontFace(GLenum mode) { $/;"	f	class:Context
Frustumf	src/ContextFloat.cpp	/^void Context :: Frustumf (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar) {$/;"	f	class:Context
Frustumx	src/ContextMatrix.cpp	/^void Context :: Frustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar) { $/;"	f	class:Context
Func	src/RasterizerState.h	/^			ComparisonFunc		Func;$/;"	m	struct:EGL::RasterizerState::AlphaState
Func	src/RasterizerState.h	/^			ComparisonFunc		Func;$/;"	m	struct:EGL::RasterizerState::DepthTestState
Func	src/RasterizerState.h	/^			ComparisonFunc		Func;$/;"	m	struct:EGL::RasterizerState::StencilState
FuncDst	src/RasterizerState.h	/^			BlendFuncDst		FuncDst;$/;"	m	struct:EGL::RasterizerState::BlendState
FuncSrc	src/RasterizerState.h	/^			BlendFuncSrc		FuncSrc;$/;"	m	struct:EGL::RasterizerState::BlendState
FunctionCache	src/arm/FunctionCache.cpp	/^FunctionCache :: FunctionCache(size_t totalSize, float percentageKeep) {$/;"	f	class:FunctionCache
FunctionCache	src/arm/FunctionCache.h	/^	class OGLES_API FunctionCache {$/;"	c	namespace:EGL
FunctionEntry	src/WinCE/egl.cpp	156;"	d	file:
FunctionEntry	src/linux-ftk/egl.cpp	155;"	d	file:
FunctionEntry	src/linux-x11/egl.cpp	156;"	d	file:
FunctionEntry	src/win/egl.cpp	156;"	d	file:
FunctionInfo	src/arm/FunctionCache.cpp	/^	struct FunctionInfo {$/;"	s	namespace:EGL	file:
FunctionTable	src/Epoc/egl.cpp	/^	} FunctionTable[] = {$/;"	v	typeref:struct:__anon15	file:
FunctionTable	src/WinCE/egl.cpp	/^} FunctionTable[] = {$/;"	v	typeref:struct:__anon56	file:
FunctionTable	src/linux-ftk/egl.cpp	/^} FunctionTable[] = {$/;"	v	typeref:struct:__anon4	file:
FunctionTable	src/linux-x11/egl.cpp	/^} FunctionTable[] = {$/;"	v	typeref:struct:__anon19	file:
FunctionTable	src/win/egl.cpp	/^} FunctionTable[] = {$/;"	v	typeref:struct:__anon49	file:
FunctionType	src/arm/FunctionCache.h	/^		enum FunctionType {$/;"	g	class:EGL::FunctionCache
FunctionTypeLine	src/arm/FunctionCache.h	/^			FunctionTypeLine,$/;"	e	enum:EGL::FunctionCache::FunctionType
FunctionTypePoint	src/arm/FunctionCache.h	/^			FunctionTypePoint,$/;"	e	enum:EGL::FunctionCache::FunctionType
FunctionTypeScanline	src/arm/FunctionCache.h	/^			FunctionTypeScanline,$/;"	e	enum:EGL::FunctionCache::FunctionType
FunctionTypeTriangle	src/arm/FunctionCache.h	/^			FunctionTypeTriangle$/;"	e	enum:EGL::FunctionCache::FunctionType
G	src/Color.h	/^		inline U8 G() const {$/;"	f	class:EGL::Color
GLAPI	include/GLES/gl.h	56;"	d
GLAPI	include/GLES/gl.h	75;"	d
GLAPI	include/GLES/gl.h	77;"	d
GLAPI	include/GLES/gl.h	80;"	d
GLAPI	include/GLES/glext.h	61;"	d
GLAPI	include/GLES/glext.h	62;"	d
GLAPI	include/GLES/glext.h	65;"	d
GLES_BIN	tools/makedist.cmd	/^set GLES_BIN=%ROOT%\\bin$/;"	v
GLES_DIST	tools/makedist.cmd	/^set GLES_DIST=%ROOT%\\dist$/;"	v
GLES_DIST	tools/makezips.cmd	/^set GLES_DIST=%ROOT%\\dist$/;"	v
GLES_DIST_PACKAGE	tools/makezips.cmd	/^set GLES_DIST_PACKAGE=%ROOT%\\dist\\%PLATFORM%$/;"	v
GLES_SRC	tools/makedist.cmd	/^set GLES_SRC=%ROOT%\\src$/;"	v
GLTXTLOAD	test/paint.cpp	/^struct GLTXTLOAD{$/;"	s	file:
GL_ACTIVE_TEXTURE	include/GLES/gl.h	564;"	d
GL_ADD	include/GLES/gl.h	499;"	d
GL_ADD_SIGNED	include/GLES/gl.h	626;"	d
GL_ALIASED_LINE_WIDTH_RANGE	include/GLES/gl.h	275;"	d
GL_ALIASED_POINT_SIZE_RANGE	include/GLES/gl.h	274;"	d
GL_ALPHA	include/GLES/gl.h	445;"	d
GL_ALPHA_BITS	include/GLES/gl.h	324;"	d
GL_ALPHA_SCALE	include/GLES/gl.h	638;"	d
GL_ALPHA_TEST	include/GLES/gl.h	207;"	d
GL_ALPHA_TEST_FUNC	include/GLES/gl.h	299;"	d
GL_ALPHA_TEST_REF	include/GLES/gl.h	300;"	d
GL_ALWAYS	include/GLES/gl.h	145;"	d
GL_AMBIENT	include/GLES/gl.h	385;"	d
GL_AMBIENT_AND_DIFFUSE	include/GLES/gl.h	428;"	d
GL_AND	include/GLES/gl.h	406;"	d
GL_AND_INVERTED	include/GLES/gl.h	409;"	d
GL_AND_REVERSE	include/GLES/gl.h	407;"	d
GL_ARRAY_BUFFER	include/GLES/gl.h	600;"	d
GL_ARRAY_BUFFER_BINDING	include/GLES/gl.h	603;"	d
GL_BACK	include/GLES/gl.h	189;"	d
GL_BLEND	include/GLES/gl.h	208;"	d
GL_BLEND_DST	include/GLES/gl.h	301;"	d
GL_BLEND_SRC	include/GLES/gl.h	302;"	d
GL_BLUE_BITS	include/GLES/gl.h	323;"	d
GL_BUFFER_ACCESS	include/GLES/gl.h	617;"	d
GL_BUFFER_SIZE	include/GLES/gl.h	615;"	d
GL_BUFFER_USAGE	include/GLES/gl.h	616;"	d
GL_BYTE	include/GLES/gl.h	397;"	d
GL_CCW	include/GLES/gl.h	260;"	d
GL_CLAMP_TO_EDGE	include/GLES/gl.h	569;"	d
GL_CLEAR	include/GLES/gl.h	405;"	d
GL_CLIENT_ACTIVE_TEXTURE	include/GLES/gl.h	565;"	d
GL_CLIP_PLANE0	include/GLES/gl.h	169;"	d
GL_CLIP_PLANE1	include/GLES/gl.h	170;"	d
GL_CLIP_PLANE2	include/GLES/gl.h	171;"	d
GL_CLIP_PLANE3	include/GLES/gl.h	172;"	d
GL_CLIP_PLANE4	include/GLES/gl.h	173;"	d
GL_CLIP_PLANE5	include/GLES/gl.h	174;"	d
GL_COLOR_ARRAY	include/GLES/gl.h	230;"	d
GL_COLOR_ARRAY_BUFFER_BINDING	include/GLES/gl.h	607;"	d
GL_COLOR_ARRAY_POINTER	include/GLES/gl.h	344;"	d
GL_COLOR_ARRAY_SIZE	include/GLES/gl.h	336;"	d
GL_COLOR_ARRAY_STRIDE	include/GLES/gl.h	338;"	d
GL_COLOR_ARRAY_TYPE	include/GLES/gl.h	337;"	d
GL_COLOR_BUFFER_BIT	include/GLES/gl.h	122;"	d
GL_COLOR_CLEAR_VALUE	include/GLES/gl.h	306;"	d
GL_COLOR_LOGIC_OP	include/GLES/gl.h	209;"	d
GL_COLOR_MATERIAL	include/GLES/gl.h	224;"	d
GL_COLOR_WRITEMASK	include/GLES/gl.h	307;"	d
GL_COMBINE	include/GLES/gl.h	622;"	d
GL_COMBINE_ALPHA	include/GLES/gl.h	624;"	d
GL_COMBINE_RGB	include/GLES/gl.h	623;"	d
GL_COMPRESSED_TEXTURE_FORMATS	include/GLES/gl.h	360;"	d
GL_CONSTANT	include/GLES/gl.h	628;"	d
GL_CONSTANT_ATTENUATION	include/GLES/gl.h	392;"	d
GL_COORD_REPLACE_OES	include/GLES/gl.h	655;"	d
GL_COPY	include/GLES/gl.h	408;"	d
GL_COPY_INVERTED	include/GLES/gl.h	417;"	d
GL_CULL_FACE	include/GLES/gl.h	206;"	d
GL_CULL_FACE_MODE	include/GLES/gl.h	276;"	d
GL_CURRENT_COLOR	include/GLES/gl.h	263;"	d
GL_CURRENT_NORMAL	include/GLES/gl.h	264;"	d
GL_CURRENT_TEXTURE_COORDS	include/GLES/gl.h	265;"	d
GL_CW	include/GLES/gl.h	259;"	d
GL_DECAL	include/GLES/gl.h	497;"	d
GL_DECR	include/GLES/gl.h	480;"	d
GL_DEPTH_BITS	include/GLES/gl.h	325;"	d
GL_DEPTH_BUFFER_BIT	include/GLES/gl.h	120;"	d
GL_DEPTH_CLEAR_VALUE	include/GLES/gl.h	281;"	d
GL_DEPTH_FUNC	include/GLES/gl.h	282;"	d
GL_DEPTH_RANGE	include/GLES/gl.h	279;"	d
GL_DEPTH_TEST	include/GLES/gl.h	212;"	d
GL_DEPTH_WRITEMASK	include/GLES/gl.h	280;"	d
GL_DIFFUSE	include/GLES/gl.h	386;"	d
GL_DITHER	include/GLES/gl.h	210;"	d
GL_DONT_CARE	include/GLES/gl.h	368;"	d
GL_DOT3_RGB	include/GLES/gl.h	647;"	d
GL_DOT3_RGBA	include/GLES/gl.h	648;"	d
GL_DST_ALPHA	include/GLES/gl.h	154;"	d
GL_DST_COLOR	include/GLES/gl.h	160;"	d
GL_DYNAMIC_DRAW	include/GLES/gl.h	611;"	d
GL_ELEMENT_ARRAY_BUFFER	include/GLES/gl.h	601;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	include/GLES/gl.h	604;"	d
GL_EMISSION	include/GLES/gl.h	426;"	d
GL_EQUAL	include/GLES/gl.h	140;"	d
GL_EQUIV	include/GLES/gl.h	414;"	d
GL_EXP	include/GLES/gl.h	248;"	d
GL_EXP2	include/GLES/gl.h	249;"	d
GL_EXTENSIONS	include/GLES/gl.h	487;"	d
GL_FALSE	include/GLES/gl.h	125;"	d
GL_FASTEST	include/GLES/gl.h	369;"	d
GL_FIXED	include/GLES/gl.h	402;"	d
GL_FLAT	include/GLES/gl.h	462;"	d
GL_FLOAT	include/GLES/gl.h	401;"	d
GL_FOG	include/GLES/gl.h	203;"	d
GL_FOG_COLOR	include/GLES/gl.h	256;"	d
GL_FOG_DENSITY	include/GLES/gl.h	252;"	d
GL_FOG_END	include/GLES/gl.h	254;"	d
GL_FOG_HINT	include/GLES/gl.h	377;"	d
GL_FOG_MODE	include/GLES/gl.h	255;"	d
GL_FOG_START	include/GLES/gl.h	253;"	d
GL_FRONT	include/GLES/gl.h	188;"	d
GL_FRONT_AND_BACK	include/GLES/gl.h	190;"	d
GL_FRONT_FACE	include/GLES/gl.h	277;"	d
GL_GENERATE_MIPMAP	include/GLES/gl.h	526;"	d
GL_GENERATE_MIPMAP_HINT	include/GLES/gl.h	378;"	d
GL_GEQUAL	include/GLES/gl.h	144;"	d
GL_GREATER	include/GLES/gl.h	142;"	d
GL_GREEN_BITS	include/GLES/gl.h	322;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES	include/GLES/gl.h	358;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE_OES	include/GLES/gl.h	357;"	d
GL_INCR	include/GLES/gl.h	479;"	d
GL_INTERPOLATE	include/GLES/gl.h	627;"	d
GL_INVALID_ENUM	include/GLES/gl.h	239;"	d
GL_INVALID_OPERATION	include/GLES/gl.h	241;"	d
GL_INVALID_VALUE	include/GLES/gl.h	240;"	d
GL_INVERT	include/GLES/gl.h	415;"	d
GL_KEEP	include/GLES/gl.h	477;"	d
GL_LEQUAL	include/GLES/gl.h	141;"	d
GL_LESS	include/GLES/gl.h	139;"	d
GL_LIGHT0	include/GLES/gl.h	590;"	d
GL_LIGHT1	include/GLES/gl.h	591;"	d
GL_LIGHT2	include/GLES/gl.h	592;"	d
GL_LIGHT3	include/GLES/gl.h	593;"	d
GL_LIGHT4	include/GLES/gl.h	594;"	d
GL_LIGHT5	include/GLES/gl.h	595;"	d
GL_LIGHT6	include/GLES/gl.h	596;"	d
GL_LIGHT7	include/GLES/gl.h	597;"	d
GL_LIGHTING	include/GLES/gl.h	204;"	d
GL_LIGHT_MODEL_AMBIENT	include/GLES/gl.h	381;"	d
GL_LIGHT_MODEL_TWO_SIDE	include/GLES/gl.h	382;"	d
GL_LINEAR	include/GLES/gl.h	511;"	d
GL_LINEAR_ATTENUATION	include/GLES/gl.h	393;"	d
GL_LINEAR_MIPMAP_LINEAR	include/GLES/gl.h	519;"	d
GL_LINEAR_MIPMAP_NEAREST	include/GLES/gl.h	517;"	d
GL_LINES	include/GLES/gl.h	130;"	d
GL_LINE_LOOP	include/GLES/gl.h	131;"	d
GL_LINE_SMOOTH	include/GLES/gl.h	222;"	d
GL_LINE_SMOOTH_HINT	include/GLES/gl.h	375;"	d
GL_LINE_STRIP	include/GLES/gl.h	132;"	d
GL_LINE_WIDTH	include/GLES/gl.h	272;"	d
GL_LOGIC_OP_MODE	include/GLES/gl.h	303;"	d
GL_LUMINANCE	include/GLES/gl.h	448;"	d
GL_LUMINANCE_ALPHA	include/GLES/gl.h	449;"	d
GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES	include/GLES/gl.h	675;"	d
GL_MATRIX_INDEX_ARRAY_OES	include/GLES/gl.h	668;"	d
GL_MATRIX_INDEX_ARRAY_POINTER_OES	include/GLES/gl.h	674;"	d
GL_MATRIX_INDEX_ARRAY_SIZE_OES	include/GLES/gl.h	671;"	d
GL_MATRIX_INDEX_ARRAY_STRIDE_OES	include/GLES/gl.h	673;"	d
GL_MATRIX_INDEX_ARRAY_TYPE_OES	include/GLES/gl.h	672;"	d
GL_MATRIX_MODE	include/GLES/gl.h	291;"	d
GL_MATRIX_PALETTE_OES	include/GLES/gl.h	667;"	d
GL_MAX_CLIP_PLANES	include/GLES/gl.h	311;"	d
GL_MAX_ELEMENTS_INDICES	include/GLES/gl.h	318;"	d
GL_MAX_ELEMENTS_VERTICES	include/GLES/gl.h	317;"	d
GL_MAX_LIGHTS	include/GLES/gl.h	310;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	include/GLES/gl.h	313;"	d
GL_MAX_PALETTE_MATRICES_OES	include/GLES/gl.h	666;"	d
GL_MAX_PROJECTION_STACK_DEPTH	include/GLES/gl.h	314;"	d
GL_MAX_TEXTURE_SIZE	include/GLES/gl.h	312;"	d
GL_MAX_TEXTURE_STACK_DEPTH	include/GLES/gl.h	315;"	d
GL_MAX_TEXTURE_UNITS	include/GLES/gl.h	319;"	d
GL_MAX_VERTEX_UNITS_OES	include/GLES/gl.h	665;"	d
GL_MAX_VIEWPORT_DIMS	include/GLES/gl.h	316;"	d
GL_MODELVIEW	include/GLES/gl.h	434;"	d
GL_MODELVIEW_MATRIX	include/GLES/gl.h	296;"	d
GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS	include/GLES/gl.h	363;"	d
GL_MODELVIEW_STACK_DEPTH	include/GLES/gl.h	293;"	d
GL_MODULATE	include/GLES/gl.h	496;"	d
GL_MULTISAMPLE	include/GLES/gl.h	232;"	d
GL_NAND	include/GLES/gl.h	419;"	d
GL_NEAREST	include/GLES/gl.h	510;"	d
GL_NEAREST_MIPMAP_LINEAR	include/GLES/gl.h	518;"	d
GL_NEAREST_MIPMAP_NEAREST	include/GLES/gl.h	516;"	d
GL_NEVER	include/GLES/gl.h	138;"	d
GL_NICEST	include/GLES/gl.h	370;"	d
GL_NOOP	include/GLES/gl.h	410;"	d
GL_NOR	include/GLES/gl.h	413;"	d
GL_NORMALIZE	include/GLES/gl.h	225;"	d
GL_NORMAL_ARRAY	include/GLES/gl.h	229;"	d
GL_NORMAL_ARRAY_BUFFER_BINDING	include/GLES/gl.h	606;"	d
GL_NORMAL_ARRAY_POINTER	include/GLES/gl.h	343;"	d
GL_NORMAL_ARRAY_STRIDE	include/GLES/gl.h	335;"	d
GL_NORMAL_ARRAY_TYPE	include/GLES/gl.h	334;"	d
GL_NOTEQUAL	include/GLES/gl.h	143;"	d
GL_NO_ERROR	include/GLES/gl.h	238;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	include/GLES/gl.h	359;"	d
GL_OES_VERSION_1_0	include/GLES/gl.h	107;"	d
GL_OES_VERSION_1_1	include/GLES/gl.h	108;"	d
GL_OES_compressed_paletted_texture	include/GLES/gl.h	111;"	d
GL_OES_matrix_get	include/GLES/gl.h	113;"	d
GL_OES_matrix_palette	include/GLES/gl.h	114;"	d
GL_OES_point_size_array	include/GLES/gl.h	115;"	d
GL_OES_point_sprite	include/GLES/gl.h	116;"	d
GL_OES_query_matrix	include/GLES/glext.h	70;"	d
GL_OES_read_format	include/GLES/gl.h	117;"	d
GL_ONE	include/GLES/gl.h	149;"	d
GL_ONE_MINUS_DST_ALPHA	include/GLES/gl.h	155;"	d
GL_ONE_MINUS_DST_COLOR	include/GLES/gl.h	161;"	d
GL_ONE_MINUS_SRC_ALPHA	include/GLES/gl.h	153;"	d
GL_ONE_MINUS_SRC_COLOR	include/GLES/gl.h	151;"	d
GL_OPERAND0_ALPHA	include/GLES/gl.h	634;"	d
GL_OPERAND0_RGB	include/GLES/gl.h	631;"	d
GL_OPERAND1_ALPHA	include/GLES/gl.h	635;"	d
GL_OPERAND1_RGB	include/GLES/gl.h	632;"	d
GL_OPERAND2_ALPHA	include/GLES/gl.h	636;"	d
GL_OPERAND2_RGB	include/GLES/gl.h	633;"	d
GL_OR	include/GLES/gl.h	412;"	d
GL_OR_INVERTED	include/GLES/gl.h	418;"	d
GL_OR_REVERSE	include/GLES/gl.h	416;"	d
GL_OUT_OF_MEMORY	include/GLES/gl.h	244;"	d
GL_PACK_ALIGNMENT	include/GLES/gl.h	309;"	d
GL_PACK_ALIGNMENT	include/GLES/gl.h	453;"	d
GL_PALETTE4_R5_G6_B5_OES	include/GLES/gl.h	574;"	d
GL_PALETTE4_RGB5_A1_OES	include/GLES/gl.h	576;"	d
GL_PALETTE4_RGB8_OES	include/GLES/gl.h	572;"	d
GL_PALETTE4_RGBA4_OES	include/GLES/gl.h	575;"	d
GL_PALETTE4_RGBA8_OES	include/GLES/gl.h	573;"	d
GL_PALETTE8_R5_G6_B5_OES	include/GLES/gl.h	579;"	d
GL_PALETTE8_RGB5_A1_OES	include/GLES/gl.h	581;"	d
GL_PALETTE8_RGB8_OES	include/GLES/gl.h	577;"	d
GL_PALETTE8_RGBA4_OES	include/GLES/gl.h	580;"	d
GL_PALETTE8_RGBA8_OES	include/GLES/gl.h	578;"	d
GL_PERSPECTIVE_CORRECTION_HINT	include/GLES/gl.h	373;"	d
GL_POINTS	include/GLES/gl.h	129;"	d
GL_POINT_DISTANCE_ATTENUATION	include/GLES/gl.h	270;"	d
GL_POINT_FADE_THRESHOLD_SIZE	include/GLES/gl.h	269;"	d
GL_POINT_SIZE	include/GLES/gl.h	266;"	d
GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES	include/GLES/gl.h	662;"	d
GL_POINT_SIZE_ARRAY_OES	include/GLES/gl.h	658;"	d
GL_POINT_SIZE_ARRAY_POINTER_OES	include/GLES/gl.h	661;"	d
GL_POINT_SIZE_ARRAY_STRIDE_OES	include/GLES/gl.h	660;"	d
GL_POINT_SIZE_ARRAY_TYPE_OES	include/GLES/gl.h	659;"	d
GL_POINT_SIZE_MAX	include/GLES/gl.h	268;"	d
GL_POINT_SIZE_MIN	include/GLES/gl.h	267;"	d
GL_POINT_SMOOTH	include/GLES/gl.h	221;"	d
GL_POINT_SMOOTH_HINT	include/GLES/gl.h	374;"	d
GL_POINT_SPRITE_OES	include/GLES/gl.h	654;"	d
GL_POLYGON_OFFSET_FACTOR	include/GLES/gl.h	329;"	d
GL_POLYGON_OFFSET_FILL	include/GLES/gl.h	227;"	d
GL_POLYGON_OFFSET_FILL	include/GLES/gl.h	328;"	d
GL_POLYGON_OFFSET_UNITS	include/GLES/gl.h	327;"	d
GL_POLYGON_SMOOTH_HINT	include/GLES/gl.h	376;"	d
GL_POSITION	include/GLES/gl.h	388;"	d
GL_PREVIOUS	include/GLES/gl.h	630;"	d
GL_PRIMARY_COLOR	include/GLES/gl.h	629;"	d
GL_PROJECTION	include/GLES/gl.h	435;"	d
GL_PROJECTION_MATRIX	include/GLES/gl.h	297;"	d
GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS	include/GLES/gl.h	364;"	d
GL_PROJECTION_STACK_DEPTH	include/GLES/gl.h	294;"	d
GL_QUADRATIC_ATTENUATION	include/GLES/gl.h	394;"	d
GL_RED_BITS	include/GLES/gl.h	321;"	d
GL_RENDERER	include/GLES/gl.h	485;"	d
GL_REPEAT	include/GLES/gl.h	568;"	d
GL_REPLACE	include/GLES/gl.h	478;"	d
GL_RESCALE_NORMAL	include/GLES/gl.h	226;"	d
GL_RGB	include/GLES/gl.h	446;"	d
GL_RGBA	include/GLES/gl.h	447;"	d
GL_RGB_SCALE	include/GLES/gl.h	625;"	d
GL_SAMPLES	include/GLES/gl.h	347;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	include/GLES/gl.h	233;"	d
GL_SAMPLE_ALPHA_TO_ONE	include/GLES/gl.h	234;"	d
GL_SAMPLE_BUFFERS	include/GLES/gl.h	346;"	d
GL_SAMPLE_COVERAGE	include/GLES/gl.h	235;"	d
GL_SAMPLE_COVERAGE_INVERT	include/GLES/gl.h	349;"	d
GL_SAMPLE_COVERAGE_VALUE	include/GLES/gl.h	348;"	d
GL_SCISSOR_BOX	include/GLES/gl.h	304;"	d
GL_SCISSOR_TEST	include/GLES/gl.h	223;"	d
GL_SCISSOR_TEST	include/GLES/gl.h	305;"	d
GL_SET	include/GLES/gl.h	420;"	d
GL_SHADE_MODEL	include/GLES/gl.h	278;"	d
GL_SHININESS	include/GLES/gl.h	427;"	d
GL_SHORT	include/GLES/gl.h	399;"	d
GL_SMOOTH	include/GLES/gl.h	463;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	include/GLES/gl.h	273;"	d
GL_SMOOTH_POINT_SIZE_RANGE	include/GLES/gl.h	271;"	d
GL_SPECULAR	include/GLES/gl.h	387;"	d
GL_SPOT_CUTOFF	include/GLES/gl.h	391;"	d
GL_SPOT_DIRECTION	include/GLES/gl.h	389;"	d
GL_SPOT_EXPONENT	include/GLES/gl.h	390;"	d
GL_SRC0_ALPHA	include/GLES/gl.h	643;"	d
GL_SRC0_RGB	include/GLES/gl.h	640;"	d
GL_SRC1_ALPHA	include/GLES/gl.h	644;"	d
GL_SRC1_RGB	include/GLES/gl.h	641;"	d
GL_SRC2_ALPHA	include/GLES/gl.h	645;"	d
GL_SRC2_RGB	include/GLES/gl.h	642;"	d
GL_SRC_ALPHA	include/GLES/gl.h	152;"	d
GL_SRC_ALPHA_SATURATE	include/GLES/gl.h	162;"	d
GL_SRC_COLOR	include/GLES/gl.h	150;"	d
GL_STACK_OVERFLOW	include/GLES/gl.h	242;"	d
GL_STACK_UNDERFLOW	include/GLES/gl.h	243;"	d
GL_STATIC_DRAW	include/GLES/gl.h	610;"	d
GL_STENCIL_BITS	include/GLES/gl.h	326;"	d
GL_STENCIL_BUFFER_BIT	include/GLES/gl.h	121;"	d
GL_STENCIL_CLEAR_VALUE	include/GLES/gl.h	283;"	d
GL_STENCIL_FAIL	include/GLES/gl.h	286;"	d
GL_STENCIL_FUNC	include/GLES/gl.h	284;"	d
GL_STENCIL_PASS_DEPTH_FAIL	include/GLES/gl.h	287;"	d
GL_STENCIL_PASS_DEPTH_PASS	include/GLES/gl.h	288;"	d
GL_STENCIL_REF	include/GLES/gl.h	289;"	d
GL_STENCIL_TEST	include/GLES/gl.h	211;"	d
GL_STENCIL_VALUE_MASK	include/GLES/gl.h	285;"	d
GL_STENCIL_WRITEMASK	include/GLES/gl.h	290;"	d
GL_SUBPIXEL_BITS	include/GLES/gl.h	320;"	d
GL_SUBTRACT	include/GLES/gl.h	621;"	d
GL_TEXTURE	include/GLES/gl.h	436;"	d
GL_TEXTURE0	include/GLES/gl.h	532;"	d
GL_TEXTURE1	include/GLES/gl.h	533;"	d
GL_TEXTURE10	include/GLES/gl.h	542;"	d
GL_TEXTURE11	include/GLES/gl.h	543;"	d
GL_TEXTURE12	include/GLES/gl.h	544;"	d
GL_TEXTURE13	include/GLES/gl.h	545;"	d
GL_TEXTURE14	include/GLES/gl.h	546;"	d
GL_TEXTURE15	include/GLES/gl.h	547;"	d
GL_TEXTURE16	include/GLES/gl.h	548;"	d
GL_TEXTURE17	include/GLES/gl.h	549;"	d
GL_TEXTURE18	include/GLES/gl.h	550;"	d
GL_TEXTURE19	include/GLES/gl.h	551;"	d
GL_TEXTURE2	include/GLES/gl.h	534;"	d
GL_TEXTURE20	include/GLES/gl.h	552;"	d
GL_TEXTURE21	include/GLES/gl.h	553;"	d
GL_TEXTURE22	include/GLES/gl.h	554;"	d
GL_TEXTURE23	include/GLES/gl.h	555;"	d
GL_TEXTURE24	include/GLES/gl.h	556;"	d
GL_TEXTURE25	include/GLES/gl.h	557;"	d
GL_TEXTURE26	include/GLES/gl.h	558;"	d
GL_TEXTURE27	include/GLES/gl.h	559;"	d
GL_TEXTURE28	include/GLES/gl.h	560;"	d
GL_TEXTURE29	include/GLES/gl.h	561;"	d
GL_TEXTURE3	include/GLES/gl.h	535;"	d
GL_TEXTURE30	include/GLES/gl.h	562;"	d
GL_TEXTURE31	include/GLES/gl.h	563;"	d
GL_TEXTURE4	include/GLES/gl.h	536;"	d
GL_TEXTURE5	include/GLES/gl.h	537;"	d
GL_TEXTURE6	include/GLES/gl.h	538;"	d
GL_TEXTURE7	include/GLES/gl.h	539;"	d
GL_TEXTURE8	include/GLES/gl.h	540;"	d
GL_TEXTURE9	include/GLES/gl.h	541;"	d
GL_TEXTURE_2D	include/GLES/gl.h	205;"	d
GL_TEXTURE_BINDING_2D	include/GLES/gl.h	330;"	d
GL_TEXTURE_COORD_ARRAY	include/GLES/gl.h	231;"	d
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING	include/GLES/gl.h	608;"	d
GL_TEXTURE_COORD_ARRAY_POINTER	include/GLES/gl.h	345;"	d
GL_TEXTURE_COORD_ARRAY_SIZE	include/GLES/gl.h	339;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE	include/GLES/gl.h	341;"	d
GL_TEXTURE_COORD_ARRAY_TYPE	include/GLES/gl.h	340;"	d
GL_TEXTURE_CROP_RECT_OES	include/GLES/gl.h	684;"	d
GL_TEXTURE_ENV	include/GLES/gl.h	507;"	d
GL_TEXTURE_ENV_COLOR	include/GLES/gl.h	504;"	d
GL_TEXTURE_ENV_MODE	include/GLES/gl.h	503;"	d
GL_TEXTURE_MAG_FILTER	include/GLES/gl.h	522;"	d
GL_TEXTURE_MATRIX	include/GLES/gl.h	298;"	d
GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS	include/GLES/gl.h	365;"	d
GL_TEXTURE_MIN_FILTER	include/GLES/gl.h	523;"	d
GL_TEXTURE_STACK_DEPTH	include/GLES/gl.h	295;"	d
GL_TEXTURE_WRAP_S	include/GLES/gl.h	524;"	d
GL_TEXTURE_WRAP_T	include/GLES/gl.h	525;"	d
GL_TRIANGLES	include/GLES/gl.h	133;"	d
GL_TRIANGLE_FAN	include/GLES/gl.h	135;"	d
GL_TRIANGLE_STRIP	include/GLES/gl.h	134;"	d
GL_TRUE	include/GLES/gl.h	126;"	d
GL_UNPACK_ALIGNMENT	include/GLES/gl.h	308;"	d
GL_UNPACK_ALIGNMENT	include/GLES/gl.h	452;"	d
GL_UNSIGNED_BYTE	include/GLES/gl.h	398;"	d
GL_UNSIGNED_SHORT	include/GLES/gl.h	400;"	d
GL_UNSIGNED_SHORT_4_4_4_4	include/GLES/gl.h	457;"	d
GL_UNSIGNED_SHORT_5_5_5_1	include/GLES/gl.h	458;"	d
GL_UNSIGNED_SHORT_5_6_5	include/GLES/gl.h	459;"	d
GL_VENDOR	include/GLES/gl.h	484;"	d
GL_VERSION	include/GLES/gl.h	486;"	d
GL_VERTEX_ARRAY	include/GLES/gl.h	228;"	d
GL_VERTEX_ARRAY_BUFFER_BINDING	include/GLES/gl.h	605;"	d
GL_VERTEX_ARRAY_POINTER	include/GLES/gl.h	342;"	d
GL_VERTEX_ARRAY_SIZE	include/GLES/gl.h	331;"	d
GL_VERTEX_ARRAY_STRIDE	include/GLES/gl.h	333;"	d
GL_VERTEX_ARRAY_TYPE	include/GLES/gl.h	332;"	d
GL_VIEWPORT	include/GLES/gl.h	292;"	d
GL_WEIGHT_ARRAY_BUFFER_BINDING_OES	include/GLES/gl.h	681;"	d
GL_WEIGHT_ARRAY_OES	include/GLES/gl.h	669;"	d
GL_WEIGHT_ARRAY_POINTER_OES	include/GLES/gl.h	680;"	d
GL_WEIGHT_ARRAY_SIZE_OES	include/GLES/gl.h	677;"	d
GL_WEIGHT_ARRAY_STRIDE_OES	include/GLES/gl.h	679;"	d
GL_WEIGHT_ARRAY_TYPE_OES	include/GLES/gl.h	678;"	d
GL_WRITE_ONLY	include/GLES/gl.h	613;"	d
GL_XOR	include/GLES/gl.h	411;"	d
GL_ZERO	include/GLES/gl.h	148;"	d
GLbitfield	include/GLES/gl.h	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	include/GLES/gl.h	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	include/GLES/gl.h	/^typedef signed char GLbyte;$/;"	t
GLclampf	include/GLES/gl.h	/^typedef float GLclampf;$/;"	t
GLclampx	include/GLES/gl.h	/^typedef int GLclampx;$/;"	t
GLenum	include/GLES/gl.h	/^typedef unsigned int GLenum;$/;"	t
GLfixed	include/GLES/gl.h	/^typedef int GLfixed;$/;"	t
GLfloat	include/GLES/gl.h	/^typedef float GLfloat;$/;"	t
GLint	include/GLES/gl.h	/^typedef int GLint;$/;"	t
GLintptr	include/GLES/gl.h	/^typedef int GLintptr;$/;"	t
GLshort	include/GLES/gl.h	/^typedef short GLshort;$/;"	t
GLsizei	include/GLES/gl.h	/^typedef int GLsizei;$/;"	t
GLsizeiptr	include/GLES/gl.h	/^typedef int GLsizeiptr;$/;"	t
GLubyte	include/GLES/gl.h	/^typedef unsigned char GLubyte;$/;"	t
GLuint	include/GLES/gl.h	/^typedef unsigned int GLuint;$/;"	t
GLushort	include/GLES/gl.h	/^typedef unsigned short GLushort;$/;"	t
GLvoid	include/GLES/gl.h	/^typedef void GLvoid;$/;"	t
GREP	projects/linux-ftk/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	projects/linux-x11/Makefile	/^GREP = \/bin\/grep$/;"	m
GZIP_ENV	projects/linux-ftk/Makefile	/^GZIP_ENV = --best$/;"	m
GZIP_ENV	projects/linux-x11/Makefile	/^GZIP_ENV = --best$/;"	m
Gc	test/epoc/appview.cpp	/^CWindowGc* CAppView::Gc() const$/;"	f	class:CAppView
GenBuffers	src/ContextBuffer.cpp	/^void Context :: GenBuffers(GLsizei n, GLuint *buffers) {$/;"	f	class:Context
GenTextures	src/ContextTexture.cpp	/^void Context :: GenTextures(GLsizei n, GLuint *textures) { $/;"	f	class:Context
GenerateFetchTexColor	src/arm/GenFragment.cpp	/^void CodeGenerator :: GenerateFetchTexColor(cg_proc_t * procedure, cg_block_t * currentBlock, $/;"	f	class:CodeGenerator
GenerateFragment	src/arm/GenFragment.cpp	/^void CodeGenerator :: GenerateFragment(cg_proc_t * procedure,  cg_block_t * currentBlock,$/;"	f	class:CodeGenerator
GenerateRasterLine	src/arm/GenLline.cpp	/^void CodeGenerator :: GenerateRasterLine() {$/;"	f	class:CodeGenerator
GenerateRasterPoint	src/arm/GenPoint.cpp	/^void CodeGenerator :: GenerateRasterPoint() {$/;"	f	class:CodeGenerator
GenerateRasterScanLine	src/arm/GenScanline.cpp	/^void CodeGenerator :: GenerateRasterScanLine() {$/;"	f	class:CodeGenerator
GenerateRasterTriangle	src/arm/GenTriangle.cpp	/^void CodeGenerator :: GenerateRasterTriangle() {$/;"	f	class:CodeGenerator
GeometryFunction	src/Context.h	/^		typedef void (Context::*GeometryFunction)(RasterPos * rasterPos);$/;"	t	class:EGL::Context
GetAlphaBuffer	src/Epoc/Surface.h	/^	inline U8 * Surface :: GetAlphaBuffer() {$/;"	f	class:EGL::Surface
GetAlphaBuffer	src/WinCE/Surface.h	/^	inline U8 * Surface :: GetAlphaBuffer() {$/;"	f	class:EGL::Surface
GetAlphaBuffer	src/linux-ftk/Surface.h	/^	inline U8 * Surface :: GetAlphaBuffer() {$/;"	f	class:EGL::Surface
GetAlphaBuffer	src/linux-x11/Surface.h	/^	inline U8 * Surface :: GetAlphaBuffer() {$/;"	f	class:EGL::Surface
GetAlphaBuffer	src/win/Surface.h	/^	inline U8 * Surface :: GetAlphaBuffer() {$/;"	f	class:EGL::Surface
GetAlphaFunc	src/RasterizerState.h	/^	inline RasterizerState::ComparisonFunc RasterizerState :: GetAlphaFunc() const {$/;"	f	class:EGL::RasterizerState
GetAlphaRef	src/RasterizerState.h	/^	inline EGL_Fixed RasterizerState :: GetAlphaRef() const {$/;"	f	class:EGL::RasterizerState
GetAmbientColor	src/Light.h	/^	inline FractionalColor Light :: GetAmbientColor() const {$/;"	f	class:EGL::Light
GetAmbientColor	src/Material.h	/^	inline const FractionalColor& Material :: GetAmbientColor() const {$/;"	f	class:EGL::Material
GetBitmap	src/Epoc/Surface.h	/^	inline CFbsBitmap * Surface :: GetBitmap() {$/;"	f	class:EGL::Surface
GetBitmap	src/WinCE/Surface.h	/^	inline HBITMAP Surface :: GetBitmap() {$/;"	f	class:EGL::Surface
GetBitmap	src/linux-ftk/Surface.h	/^	inline NativePixmapType Surface :: GetBitmap() {$/;"	f	class:EGL::Surface
GetBitmap	src/linux-x11/Surface.h	/^	inline NativePixmapType Surface :: GetBitmap() {$/;"	f	class:EGL::Surface
GetBitmap	src/win/Surface.h	/^	inline HBITMAP Surface :: GetBitmap() {$/;"	f	class:EGL::Surface
GetBlendFuncDst	src/RasterizerState.h	/^	inline RasterizerState::BlendFuncDst RasterizerState :: GetBlendFuncDst() const {$/;"	f	class:EGL::RasterizerState
GetBlendFuncSrc	src/RasterizerState.h	/^	inline RasterizerState::BlendFuncSrc RasterizerState :: GetBlendFuncSrc() const {$/;"	f	class:EGL::RasterizerState
GetBooleanv	src/Context.cpp	/^void Context :: GetBooleanv(GLenum pname, GLboolean *params) {$/;"	f	class:Context
GetBufferParameteriv	src/ContextBuffer.cpp	/^void Context :: GetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {$/;"	f	class:Context
GetBytesPerPixel	src/Texture.h	/^		U8 GetBytesPerPixel() const			{ return s_BytesPerPixel[m_InternalFormat]; }$/;"	f	class:EGL::Texture
GetClipPlanef	src/ContextFloat.cpp	/^void Context :: GetClipPlanef(GLenum plane, GLfloat eqn[4]) {$/;"	f	class:Context
GetClipPlanex	src/ContextRender.cpp	/^void Context :: GetClipPlanex(GLenum plane, GLfixed eqn[4]) {$/;"	f	class:Context
GetColorBuffer	src/Epoc/Surface.h	/^	inline U16 * Surface :: GetColorBuffer() {$/;"	f	class:EGL::Surface
GetColorBuffer	src/WinCE/Surface.h	/^	inline U16 * Surface :: GetColorBuffer() {$/;"	f	class:EGL::Surface
GetColorBuffer	src/linux-ftk/Surface.h	/^	inline U16 * Surface :: GetColorBuffer() {$/;"	f	class:EGL::Surface
GetColorBuffer	src/linux-x11/Surface.h	/^	inline U16 * Surface :: GetColorBuffer() {$/;"	f	class:EGL::Surface
GetColorBuffer	src/win/Surface.h	/^	inline U16 * Surface :: GetColorBuffer() {$/;"	f	class:EGL::Surface
GetColorMask	src/RasterizerState.h	/^	inline Color RasterizerState :: GetColorMask() const {$/;"	f	class:EGL::RasterizerState
GetConfig	src/Context.h	/^	inline Config * Context :: GetConfig() {$/;"	f	class:EGL::Context
GetConfig	src/Epoc/Surface.h	/^	inline Config * Surface :: GetConfig() {$/;"	f	class:EGL::Surface
GetConfig	src/WinCE/Surface.h	/^	inline Config * Surface :: GetConfig() {$/;"	f	class:EGL::Surface
GetConfig	src/linux-ftk/Surface.h	/^	inline Config * Surface :: GetConfig() {$/;"	f	class:EGL::Surface
GetConfig	src/linux-x11/Surface.h	/^	inline Config * Surface :: GetConfig() {$/;"	f	class:EGL::Surface
GetConfig	src/win/Surface.h	/^	inline Config * Surface :: GetConfig() {$/;"	f	class:EGL::Surface
GetConfigAttrib	src/Config.cpp	/^EGLint Config :: GetConfigAttrib(EGLint attribute) const {$/;"	f	class:Config
GetConfigAttrib	src/Epoc/ConfigEpoc.cpp	/^EGLint Config :: GetConfigAttrib(EGLint attribute) const {$/;"	f	class:Config
GetConfigs	src/Config.cpp	/^EGLBoolean Config :: GetConfigs(EGLConfig * result, EGLint configSize, EGLint * numConfig) {$/;"	f	class:Config
GetConfigs	src/Epoc/ConfigEpoc.cpp	/^EGLBoolean Config :: GetConfigs(EGLConfig * result, EGLint configSize, EGLint * numConfig) {$/;"	f	class:Config
GetConstantAttenuation	src/Light.h	/^	inline EGL_Fixed Light :: GetConstantAttenuation() const {$/;"	f	class:EGL::Light
GetCurrentContext	src/Epoc/ContextEpoc.cpp	/^Context * Context :: GetCurrentContext() {$/;"	f	class:Context
GetCurrentContext	src/Epoc/Surface.h	/^	inline Context * Surface :: GetCurrentContext() {$/;"	f	class:EGL::Surface
GetCurrentContext	src/WinCE/ContextWinCE.cpp	/^Context * Context :: GetCurrentContext() {$/;"	f	class:Context
GetCurrentContext	src/WinCE/Surface.h	/^	inline Context * Surface :: GetCurrentContext() {$/;"	f	class:EGL::Surface
GetCurrentContext	src/linux-ftk/ContextLinux.cpp	/^Context * Context :: GetCurrentContext() $/;"	f	class:Context
GetCurrentContext	src/linux-ftk/Surface.h	/^	inline Context * Surface :: GetCurrentContext() {$/;"	f	class:EGL::Surface
GetCurrentContext	src/linux-x11/ContextLinux.cpp	/^Context * Context :: GetCurrentContext() $/;"	f	class:Context
GetCurrentContext	src/linux-x11/Surface.h	/^	inline Context * Surface :: GetCurrentContext() {$/;"	f	class:EGL::Surface
GetCurrentContext	src/win/ContextWin.cpp	/^Context * Context :: GetCurrentContext() {$/;"	f	class:Context
GetCurrentContext	src/win/Surface.h	/^	inline Context * Surface :: GetCurrentContext() {$/;"	f	class:EGL::Surface
GetCurrentStackSize	src/MatrixStack.h	/^		inline I32 GetCurrentStackSize() const {$/;"	f	class:EGL::MatrixStack
GetCurrentTexture	src/Context.h	/^		MultiTexture * GetCurrentTexture() {$/;"	f	class:EGL::Context
GetCurrentTexture	src/Context.h	/^		const MultiTexture * GetCurrentTexture() const {$/;"	f	class:EGL::Context
GetData	src/Buffer.h	/^		void *	GetData() const {$/;"	f	class:EGL::Buffer
GetData	src/Texture.h	/^		void * GetData() const				{ return m_Data; }$/;"	f	class:EGL::Texture
GetDepthBuffer	src/Epoc/Surface.h	/^	inline U16 * Surface :: GetDepthBuffer() {$/;"	f	class:EGL::Surface
GetDepthBuffer	src/WinCE/Surface.h	/^	inline U16 * Surface :: GetDepthBuffer() {$/;"	f	class:EGL::Surface
GetDepthBuffer	src/linux-ftk/Surface.h	/^	inline U16 * Surface :: GetDepthBuffer() {$/;"	f	class:EGL::Surface
GetDepthBuffer	src/linux-x11/Surface.h	/^	inline U16 * Surface :: GetDepthBuffer() {$/;"	f	class:EGL::Surface
GetDepthBuffer	src/win/Surface.h	/^	inline U16 * Surface :: GetDepthBuffer() {$/;"	f	class:EGL::Surface
GetDepthFunc	src/RasterizerState.h	/^	inline RasterizerState::ComparisonFunc RasterizerState :: GetDepthFunc() const {$/;"	f	class:EGL::RasterizerState
GetDepthMask	src/RasterizerState.h	/^	inline bool RasterizerState :: GetDepthMask() const {$/;"	f	class:EGL::RasterizerState
GetDiffuseColor	src/Light.h	/^	inline FractionalColor Light :: GetDiffuseColor() const {$/;"	f	class:EGL::Light
GetDiffuseColor	src/Material.h	/^	inline const FractionalColor& Material :: GetDiffuseColor() const {$/;"	f	class:EGL::Material
GetDirection	src/Light.h	/^	inline Vec3D Light :: GetDirection() const {$/;"	f	class:EGL::Light
GetDrawSurface	src/Context.h	/^	inline Surface * Context :: GetDrawSurface() const {$/;"	f	class:EGL::Context
GetEmissiveColor	src/Material.h	/^	inline const FractionalColor& Material :: GetEmissiveColor() const {$/;"	f	class:EGL::Material
GetError	src/Context.cpp	/^GLenum Context :: GetError(void) { $/;"	f	class:Context
GetFixedv	src/Context.cpp	/^bool Context :: GetFixedv(GLenum pname, GLfixed *params) {$/;"	f	class:Context
GetFloatv	src/ContextFloat.cpp	/^void Context :: GetFloatv(GLenum pname, GLfloat *params) {$/;"	f	class:Context
GetFogColor	src/RasterizerState.h	/^	inline Color RasterizerState :: GetFogColor() const {$/;"	f	class:EGL::RasterizerState
GetFunction	src/arm/FunctionCache.cpp	/^void * FunctionCache :: GetFunction(FunctionType type, const RasterizerState & state) {$/;"	f	class:FunctionCache
GetHeight	src/Epoc/Surface.h	/^	inline U16 Surface :: GetHeight() {$/;"	f	class:EGL::Surface
GetHeight	src/Texture.h	/^		U32 GetHeight() const				{ return 1 << m_LogHeight; }$/;"	f	class:EGL::Texture
GetHeight	src/WinCE/Surface.h	/^	inline U16 Surface :: GetHeight() {$/;"	f	class:EGL::Surface
GetHeight	src/linux-ftk/Surface.h	/^	inline U16 Surface :: GetHeight() {$/;"	f	class:EGL::Surface
GetHeight	src/linux-x11/Surface.h	/^	inline U16 Surface :: GetHeight() {$/;"	f	class:EGL::Surface
GetHeight	src/win/Surface.h	/^	inline U16 Surface :: GetHeight() {$/;"	f	class:EGL::Surface
GetImage	src/linux-x11/Surface.h	/^	inline XImage* Surface :: GetImage() {$/;"	f	class:EGL::Surface
GetIndex	src/Arrays.h	/^			size_t GetIndex() {$/;"	f	struct:EGL::ObjectArray::ObjectRecord
GetIndex	src/Arrays.h	/^		size_t GetIndex(const ELEMENT * element) const {$/;"	f	struct:EGL::ObjectArray
GetIntegerv	src/Context.cpp	/^void Context :: GetIntegerv(GLenum pname, GLint *params) { $/;"	f	class:Context
GetInternalFormat	src/Texture.h	/^			GetInternalFormat() const				{ return m_TextureLevels[0].GetInternalFormat(); }$/;"	f	class:EGL::MultiTexture
GetInternalFormat	src/Texture.h	/^			GetInternalFormat() const		{ return m_InternalFormat; }$/;"	f	class:EGL::Texture
GetKey	ug/ug_ftk.c	/^static int GetKey(int vk) $/;"	f	file:
GetKey	ug/ug_win32.c	/^static int GetKey(int vk) {$/;"	f	file:
GetLightfv	src/ContextFloat.cpp	/^void Context :: GetLightfv(GLenum light, GLenum pname, GLfloat *params) {$/;"	f	class:Context
GetLightxv	src/ContextLight.cpp	/^bool Context :: GetLightxv(GLenum light, GLenum pname, GLfixed *params) {$/;"	f	class:Context
GetLinearAttenuation	src/Light.h	/^	inline EGL_Fixed Light :: GetLinearAttenuation() const {$/;"	f	class:EGL::Light
GetLogBytesPerPixel	src/Texture.cpp	/^U32 Texture :: GetLogBytesPerPixel() const {$/;"	f	class:Texture
GetLogHeight	src/Texture.h	/^		U32 GetLogHeight() const			{ return m_LogHeight; }$/;"	f	class:EGL::Texture
GetLogWidth	src/Texture.h	/^		U32 GetLogWidth() const				{ return m_LogWidth; }$/;"	f	class:EGL::Texture
GetLogicOp	src/RasterizerState.h	/^	inline RasterizerState::LogicOp RasterizerState :: GetLogicOp() const {$/;"	f	class:EGL::RasterizerState
GetMagFilterMode	src/RasterizerState.h	/^		FilterMode GetMagFilterMode(size_t unit) const			{ return m_Texture[unit].MagFilterMode; }$/;"	f	class:EGL::RasterizerState
GetMagFilterMode	src/Texture.h	/^		RasterizerState::FilterMode GetMagFilterMode() const		{ return m_MagFilterMode; }$/;"	f	class:EGL::MultiTexture
GetMaterialfv	src/ContextFloat.cpp	/^void Context :: GetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {$/;"	f	class:Context
GetMaterialxv	src/ContextMaterial.cpp	/^bool Context :: GetMaterialxv(GLenum face, GLenum pname, GLfixed *params) {$/;"	f	class:Context
GetMemoryDC	src/WinCE/Surface.h	/^	inline HDC Surface :: GetMemoryDC() {$/;"	f	class:EGL::Surface
GetMemoryDC	src/linux-x11/Surface.h	/^	inline NativeDisplayType Surface :: GetMemoryDC() {$/;"	f	class:EGL::Surface
GetMemoryDC	src/win/Surface.h	/^	inline HDC Surface :: GetMemoryDC() {$/;"	f	class:EGL::Surface
GetMinFilterMode	src/RasterizerState.h	/^		FilterMode GetMinFilterMode(size_t unit) const			{ return m_Texture[unit].MinFilterMode; }$/;"	f	class:EGL::RasterizerState
GetMinFilterMode	src/Texture.h	/^		RasterizerState::FilterMode GetMinFilterMode() const		{ return m_MinFilterMode; }$/;"	f	class:EGL::MultiTexture
GetMipmapFilterMode	src/RasterizerState.h	/^		FilterMode GetMipmapFilterMode(size_t unit) const		{ return m_Texture[unit].MipmapFilterMode; }$/;"	f	class:EGL::RasterizerState
GetMipmapFilterMode	src/Texture.h	/^		RasterizerState::FilterMode GetMipmapFilterMode() const		{ return m_MipmapFilterMode; }$/;"	f	class:EGL::MultiTexture
GetNativeDisplay	src/WinCE/egl.cpp	/^static NativeDisplayType GetNativeDisplay (EGLDisplay display) {$/;"	f	file:
GetNativeDisplay	src/linux-ftk/egl.cpp	/^static NativeDisplayType GetNativeDisplay (EGLDisplay display) $/;"	f	file:
GetNativeDisplay	src/linux-x11/egl.cpp	/^static NativeDisplayType GetNativeDisplay (EGLDisplay display) $/;"	f	file:
GetNativeDisplay	src/win/egl.cpp	/^static NativeDisplayType GetNativeDisplay (EGLDisplay display) {$/;"	f	file:
GetNormalizedDirection	src/Light.h	/^	inline Vec3D Light :: GetNormalizedDirection() const {$/;"	f	class:EGL::Light
GetObject	src/Arrays.h	/^		ELEMENT * GetObject(size_t index) {$/;"	f	struct:EGL::ObjectArray
GetPixels	src/Epoc/Surface.h	/^	inline U32 Surface :: GetPixels() {$/;"	f	class:EGL::Surface
GetPixels	src/WinCE/Surface.h	/^	inline U32 Surface :: GetPixels() {$/;"	f	class:EGL::Surface
GetPixels	src/linux-ftk/Surface.h	/^	inline U32 Surface :: GetPixels() {$/;"	f	class:EGL::Surface
GetPixels	src/linux-x11/Surface.h	/^	inline U32 Surface :: GetPixels() {$/;"	f	class:EGL::Surface
GetPixels	src/win/Surface.h	/^	inline U32 Surface :: GetPixels() {$/;"	f	class:EGL::Surface
GetPointer	src/Arrays.h	/^			ELEMENT * GetPointer() {$/;"	f	struct:EGL::ObjectArray::ObjectRecord
GetPointerv	src/Context.cpp	/^void Context :: GetPointerv(GLenum pname, void **params) {$/;"	f	class:Context
GetPolygonOffsetFactor	src/RasterizerState.h	/^	inline EGL_Fixed RasterizerState :: GetPolygonOffsetFactor() const {$/;"	f	class:EGL::RasterizerState
GetPolygonOffsetUnits	src/RasterizerState.h	/^	inline EGL_Fixed RasterizerState :: GetPolygonOffsetUnits() const {$/;"	f	class:EGL::RasterizerState
GetPosition	src/Light.h	/^	inline Vec4D Light :: GetPosition() const {$/;"	f	class:EGL::Light
GetQuadraticAttenuation	src/Light.h	/^	inline EGL_Fixed Light :: GetQuadraticAttenuation() const {$/;"	f	class:EGL::Light
GetRasterizer	src/Context.h	/^		Rasterizer * GetRasterizer() {$/;"	f	class:EGL::Context
GetRasterizerState	src/Context.h	/^		RasterizerState * GetRasterizerState() {$/;"	f	class:EGL::Context
GetRasterizerState	src/Context.h	/^		const RasterizerState * GetRasterizerState() const {$/;"	f	class:EGL::Context
GetRawTexColor	src/Rasterizer.cpp	/^Color Rasterizer :: GetRawTexColor(const RasterizerState::TextureState * state, const Texture * texture, EGL_Fixed tu, EGL_Fixed tv) {$/;"	f	class:Rasterizer
GetReadSurface	src/Context.h	/^	inline Surface * Context :: GetReadSurface() const {$/;"	f	class:EGL::Context
GetRect	src/Epoc/Surface.h	/^	inline const Rect& Surface :: GetRect() const {$/;"	f	class:EGL::Surface
GetRect	src/WinCE/Surface.h	/^	inline const Rect& Surface :: GetRect() const {$/;"	f	class:EGL::Surface
GetRect	src/linux-ftk/Surface.h	/^	inline const Rect& Surface :: GetRect() const {$/;"	f	class:EGL::Surface
GetRect	src/linux-x11/Surface.h	/^	inline const Rect& Surface :: GetRect() const {$/;"	f	class:EGL::Surface
GetRect	src/win/Surface.h	/^	inline const Rect& Surface :: GetRect() const {$/;"	f	class:EGL::Surface
GetSampleCoverage	src/RasterizerState.h	/^	inline EGL_Fixed RasterizerState :: GetSampleCoverage() const {$/;"	f	class:EGL::RasterizerState
GetSampleCoverageInvert	src/RasterizerState.h	/^	inline bool RasterizerState :: GetSampleCoverageInvert() const {$/;"	f	class:EGL::RasterizerState
GetShadeModel	src/RasterizerState.h	/^	inline RasterizerState::ShadingModel RasterizerState :: GetShadeModel() const {$/;"	f	class:EGL::RasterizerState
GetSize	src/Buffer.h	/^		size_t GetSize() const {$/;"	f	class:EGL::Buffer
GetSpecularColor	src/Light.h	/^	inline FractionalColor Light :: GetSpecularColor() const {$/;"	f	class:EGL::Light
GetSpecularColor	src/Material.h	/^	inline const FractionalColor& Material :: GetSpecularColor() const {$/;"	f	class:EGL::Material
GetSpecularExponent	src/Material.h	/^	inline EGL_Fixed Material :: GetSpecularExponent() const {$/;"	f	class:EGL::Material
GetSpotCutoff	src/Light.h	/^	inline EGL_Fixed Light :: GetSpotCutoff() const {$/;"	f	class:EGL::Light
GetSpotExponent	src/Light.h	/^	inline EGL_Fixed Light :: GetSpotExponent() const {$/;"	f	class:EGL::Light
GetStackSize	src/MatrixStack.h	/^		inline I32 GetStackSize() const {$/;"	f	class:EGL::MatrixStack
GetState	src/Rasterizer.cpp	/^RasterizerState * Rasterizer :: GetState() const {$/;"	f	class:Rasterizer
GetState	src/arm/CodeGenerator.h	/^		const RasterizerState * GetState()				{ return m_State; }$/;"	f	class:EGL::CodeGenerator
GetStencilBuffer	src/Epoc/Surface.h	/^	inline U32 * Surface :: GetStencilBuffer() {$/;"	f	class:EGL::Surface
GetStencilBuffer	src/WinCE/Surface.h	/^	inline U32 * Surface :: GetStencilBuffer() {$/;"	f	class:EGL::Surface
GetStencilBuffer	src/linux-ftk/Surface.h	/^	inline U32 * Surface :: GetStencilBuffer() {$/;"	f	class:EGL::Surface
GetStencilBuffer	src/linux-x11/Surface.h	/^	inline U32 * Surface :: GetStencilBuffer() {$/;"	f	class:EGL::Surface
GetStencilBuffer	src/win/Surface.h	/^	inline U32 * Surface :: GetStencilBuffer() {$/;"	f	class:EGL::Surface
GetStencilComparisonMask	src/RasterizerState.h	/^	inline I32 RasterizerState :: GetStencilComparisonMask() const {$/;"	f	class:EGL::RasterizerState
GetStencilFunc	src/RasterizerState.h	/^	inline RasterizerState::ComparisonFunc RasterizerState :: GetStencilFunc() const {$/;"	f	class:EGL::RasterizerState
GetStencilMask	src/RasterizerState.h	/^	inline U32 RasterizerState :: GetStencilMask() const {$/;"	f	class:EGL::RasterizerState
GetStencilOpFail	src/RasterizerState.h	/^	inline RasterizerState::StencilOp RasterizerState :: GetStencilOpFail() const {$/;"	f	class:EGL::RasterizerState
GetStencilOpFailZFail	src/RasterizerState.h	/^	inline RasterizerState::StencilOp RasterizerState :: GetStencilOpFailZFail() const {$/;"	f	class:EGL::RasterizerState
GetStencilOpFailZPass	src/RasterizerState.h	/^	inline RasterizerState::StencilOp RasterizerState :: GetStencilOpFailZPass() const {$/;"	f	class:EGL::RasterizerState
GetStencilRef	src/RasterizerState.h	/^	inline I32 RasterizerState :: GetStencilRef() const {$/;"	f	class:EGL::RasterizerState
GetString	src/Context.cpp	/^const GLubyte * Context :: GetString(GLenum name) { $/;"	f	class:Context
GetSurface	src/Rasterizer.h	/^	inline Surface * Rasterizer :: GetSurface() const {$/;"	f	class:EGL::Rasterizer
GetSurfaceType	src/linux-ftk/Surface.h	/^	inline int Surface :: GetSurfaceType() {$/;"	f	class:EGL::Surface
GetSurfaceType	src/linux-x11/Surface.h	/^	inline int Surface :: GetSurfaceType() {$/;"	f	class:EGL::Surface
GetTexColor	src/Rasterizer.cpp	/^inline Color Rasterizer :: GetTexColor(const RasterizerState::TextureState * state, const Texture * texture, EGL_Fixed tu, EGL_Fixed tv,$/;"	f	class:Rasterizer
GetTexEnvColor	src/RasterizerState.h	/^	inline Color RasterizerState :: GetTexEnvColor(size_t unit) const {$/;"	f	class:EGL::RasterizerState
GetTexEnvfv	src/ContextFloat.cpp	/^void Context :: GetTexEnvfv(GLenum env, GLenum pname, GLfloat *params) {$/;"	f	class:Context
GetTexEnviv	src/ContextTexture.cpp	/^void Context :: GetTexEnviv(GLenum env, GLenum pname, GLint *params) {$/;"	f	class:Context
GetTexEnvxv	src/ContextTexture.cpp	/^bool Context :: GetTexEnvxv(GLenum env, GLenum pname, GLfixed *params) {$/;"	f	class:Context
GetTexParameterfv	src/ContextFloat.cpp	/^void Context :: GetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {$/;"	f	class:Context
GetTexParameteriv	src/ContextTexture.cpp	/^void Context :: GetTexParameteriv(GLenum target, GLenum pname, GLint *params) {$/;"	f	class:Context
GetTexParameterxv	src/ContextTexture.cpp	/^void Context :: GetTexParameterxv(GLenum target, GLenum pname, GLfixed *params) {$/;"	f	class:Context
GetTexture	src/Rasterizer.h	/^		MultiTexture * GetTexture(size_t unit)				{ return m_Texture[unit]; }$/;"	f	class:EGL::Rasterizer
GetTexture	src/Rasterizer.h	/^		const MultiTexture * GetTexture(size_t unit) const	{ return m_Texture[unit]; }$/;"	f	class:EGL::Rasterizer
GetTexture	src/Texture.h	/^		Texture * GetTexture(int level)				{ return m_TextureLevels + level; }$/;"	f	class:EGL::MultiTexture
GetTexture	src/Texture.h	/^		const Texture * GetTexture(int level) const	{ return m_TextureLevels + level; }$/;"	f	class:EGL::MultiTexture
GetTextureCombineFuncAlpha	src/RasterizerState.h	/^	inline RasterizerState::TextureModeCombineFunc RasterizerState :: GetTextureCombineFuncAlpha(size_t unit) const {$/;"	f	class:EGL::RasterizerState
GetTextureCombineFuncRGB	src/RasterizerState.h	/^	inline RasterizerState::TextureModeCombineFunc RasterizerState :: GetTextureCombineFuncRGB(size_t unit) const {$/;"	f	class:EGL::RasterizerState
GetTextureCombineOpAlpha	src/RasterizerState.h	/^	inline RasterizerState::TextureCombineOp RasterizerState :: GetTextureCombineOpAlpha(size_t unit, size_t idx) const {$/;"	f	class:EGL::RasterizerState
GetTextureCombineOpRGB	src/RasterizerState.h	/^	inline RasterizerState::TextureCombineOp RasterizerState :: GetTextureCombineOpRGB(size_t unit, size_t idx) const {$/;"	f	class:EGL::RasterizerState
GetTextureCombineSrcAlpha	src/RasterizerState.h	/^	inline RasterizerState::TextureCombineSrc RasterizerState :: GetTextureCombineSrcAlpha(size_t unit, size_t idx) const {$/;"	f	class:EGL::RasterizerState
GetTextureCombineSrcRGB	src/RasterizerState.h	/^	inline RasterizerState::TextureCombineSrc RasterizerState :: GetTextureCombineSrcRGB(size_t unit, size_t idx) const {$/;"	f	class:EGL::RasterizerState
GetTextureMode	src/RasterizerState.h	/^	inline RasterizerState::TextureMode RasterizerState :: GetTextureMode(size_t unit) const {$/;"	f	class:EGL::RasterizerState
GetTextureScaleAlpha	src/RasterizerState.h	/^	inline EGL_Fixed RasterizerState :: GetTextureScaleAlpha(size_t unit) const {$/;"	f	class:EGL::RasterizerState
GetTextureScaleRGB	src/RasterizerState.h	/^	inline EGL_Fixed RasterizerState :: GetTextureScaleRGB(size_t unit) const {$/;"	f	class:EGL::RasterizerState
GetTransformedZ	src/linalg.h	/^		inline EGL_Fixed GetTransformedZ(const Vec3D& vector) const {$/;"	f	class:EGL::Matrix4x4
GetUsage	src/Buffer.h	/^		BufferUsage GetUsage() const {$/;"	f	class:EGL::Buffer
GetWidget	src/linux-ftk/Surface.h	/^	inline NativeWindowType Surface :: GetWidget() {$/;"	f	class:EGL::Surface
GetWidth	src/Epoc/Surface.h	/^	inline U16 Surface :: GetWidth() {$/;"	f	class:EGL::Surface
GetWidth	src/Texture.h	/^		U32 GetWidth() const				{ return 1 << m_LogWidth; }$/;"	f	class:EGL::Texture
GetWidth	src/WinCE/Surface.h	/^	inline U16 Surface :: GetWidth() {$/;"	f	class:EGL::Surface
GetWidth	src/linux-ftk/Surface.h	/^	inline U16 Surface :: GetWidth() {$/;"	f	class:EGL::Surface
GetWidth	src/linux-x11/Surface.h	/^	inline U16 Surface :: GetWidth() {$/;"	f	class:EGL::Surface
GetWidth	src/win/Surface.h	/^	inline U16 Surface :: GetWidth() {$/;"	f	class:EGL::Surface
GetWrappingModeS	src/RasterizerState.h	/^		WrappingMode GetWrappingModeS(size_t unit) const		{ return m_Texture[unit].WrappingModeS; }$/;"	f	class:EGL::RasterizerState
GetWrappingModeS	src/Texture.h	/^		RasterizerState::WrappingMode GetWrappingModeS() const		{ return m_WrappingModeS; }$/;"	f	class:EGL::MultiTexture
GetWrappingModeT	src/RasterizerState.h	/^		WrappingMode GetWrappingModeT(size_t unit) const		{ return m_Texture[unit].WrappingModeT; }$/;"	f	class:EGL::RasterizerState
GetWrappingModeT	src/Texture.h	/^		RasterizerState::WrappingMode GetWrappingModeT() const		{ return m_WrappingModeT; }$/;"	f	class:EGL::MultiTexture
Gradients	src/Rasterizer.h	/^	struct Gradients {$/;"	s	namespace:EGL
Greater	src/RasterizerTriangles.cpp	/^	inline int Greater(I32 x0, I32 x1) {$/;"	f	namespace:__anon20
Green	src/RasterizerState.h	/^			bool				Green;	\/\/ if true, write green channel$/;"	m	struct:EGL::RasterizerState::MaskState
HARD_SIZE	test/epoc/appglobal.h	7;"	d
HAVE_DLFCN_H	projects/linux-ftk/confdefs.h	18;"	d
HAVE_DLFCN_H	projects/linux-ftk/linux-config.h	5;"	d
HAVE_DLFCN_H	projects/linux-x11/linux-config.h	5;"	d
HAVE_INTTYPES_H	projects/linux-ftk/confdefs.h	15;"	d
HAVE_INTTYPES_H	projects/linux-ftk/linux-config.h	8;"	d
HAVE_INTTYPES_H	projects/linux-x11/linux-config.h	8;"	d
HAVE_MEMORY_H	projects/linux-ftk/confdefs.h	13;"	d
HAVE_MEMORY_H	projects/linux-ftk/linux-config.h	11;"	d
HAVE_MEMORY_H	projects/linux-x11/linux-config.h	11;"	d
HAVE_PTHREAD_H	projects/linux-ftk/linux-config.h	14;"	d
HAVE_PTHREAD_H	projects/linux-x11/linux-config.h	14;"	d
HAVE_STDINT_H	projects/linux-ftk/confdefs.h	16;"	d
HAVE_STDINT_H	projects/linux-ftk/linux-config.h	17;"	d
HAVE_STDINT_H	projects/linux-x11/linux-config.h	17;"	d
HAVE_STDLIB_H	projects/linux-ftk/confdefs.h	11;"	d
HAVE_STDLIB_H	projects/linux-ftk/linux-config.h	20;"	d
HAVE_STDLIB_H	projects/linux-x11/linux-config.h	20;"	d
HAVE_STRINGS_H	projects/linux-ftk/confdefs.h	14;"	d
HAVE_STRINGS_H	projects/linux-ftk/linux-config.h	23;"	d
HAVE_STRINGS_H	projects/linux-x11/linux-config.h	23;"	d
HAVE_STRING_H	projects/linux-ftk/confdefs.h	12;"	d
HAVE_STRING_H	projects/linux-ftk/linux-config.h	26;"	d
HAVE_STRING_H	projects/linux-x11/linux-config.h	26;"	d
HAVE_SYS_STAT_H	projects/linux-ftk/confdefs.h	10;"	d
HAVE_SYS_STAT_H	projects/linux-ftk/linux-config.h	29;"	d
HAVE_SYS_STAT_H	projects/linux-x11/linux-config.h	29;"	d
HAVE_SYS_TYPES_H	projects/linux-ftk/confdefs.h	9;"	d
HAVE_SYS_TYPES_H	projects/linux-ftk/linux-config.h	32;"	d
HAVE_SYS_TYPES_H	projects/linux-x11/linux-config.h	32;"	d
HAVE_UNISTD_H	projects/linux-ftk/confdefs.h	17;"	d
HAVE_UNISTD_H	projects/linux-ftk/linux-config.h	35;"	d
HAVE_UNISTD_H	projects/linux-x11/linux-config.h	35;"	d
HAVE_X11_EXTENSIONS_XSHM_H	projects/linux-x11/linux-config.h	38;"	d
HAVE_X11_XLIB_H	projects/linux-x11/linux-config.h	41;"	d
HEAP_ALIGNMENT	src/codegen/heap.c	34;"	d	file:
HandleCommandL	test/epoc/appui.cpp	/^void CAppUi::HandleCommandL(TInt aCmd)$/;"	f	class:CAppUi
HasColor	src/RasterizerTriangles.cpp	424;"	d	file:
HasColor	src/RasterizerTriangles.cpp	442;"	d	file:
HasColor	src/RasterizerTriangles.cpp	460;"	d	file:
HasColor	src/RasterizerTriangles.cpp	476;"	d	file:
HasColor	src/RasterizerTriangles.cpp	494;"	d	file:
HasColor	src/RasterizerTriangles.cpp	512;"	d	file:
HasColor	src/RasterizerTriangles.cpp	530;"	d	file:
HasColor	src/RasterizerTriangles.cpp	548;"	d	file:
HasColor	src/RasterizerTriangles.cpp	566;"	d	file:
HasColor	src/RasterizerTriangles.cpp	584;"	d	file:
HasColor	src/RasterizerTriangles.cpp	602;"	d	file:
HasColor	src/RasterizerTriangles.cpp	620;"	d	file:
HasColor	src/RasterizerTriangles.cpp	638;"	d	file:
HasColor	src/RasterizerTriangles.cpp	658;"	d	file:
HasColor	src/RasterizerTriangles.cpp	676;"	d	file:
HasColor	src/RasterizerTriangles.cpp	692;"	d	file:
HasColor	src/RasterizerTriangles.cpp	710;"	d	file:
HasColor	src/RasterizerTriangles.cpp	728;"	d	file:
HasColor	src/RasterizerTriangles.cpp	746;"	d	file:
HasColor	src/RasterizerTriangles.cpp	764;"	d	file:
HasColor	src/RasterizerTriangles.cpp	782;"	d	file:
HasColor	src/RasterizerTriangles.cpp	800;"	d	file:
HasColor	src/RasterizerTriangles.cpp	818;"	d	file:
HasColor	src/RasterizerTriangles.cpp	836;"	d	file:
HasColor	src/RasterizerTriangles.cpp	854;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	423;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	441;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	459;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	478;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	496;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	514;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	532;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	550;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	568;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	586;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	604;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	622;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	640;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	657;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	675;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	694;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	712;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	730;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	748;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	766;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	784;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	802;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	820;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	838;"	d	file:
HasDepth	src/RasterizerTriangles.cpp	856;"	d	file:
HasFog	src/RasterizerTriangles.cpp	422;"	d	file:
HasFog	src/RasterizerTriangles.cpp	440;"	d	file:
HasFog	src/RasterizerTriangles.cpp	458;"	d	file:
HasFog	src/RasterizerTriangles.cpp	479;"	d	file:
HasFog	src/RasterizerTriangles.cpp	497;"	d	file:
HasFog	src/RasterizerTriangles.cpp	515;"	d	file:
HasFog	src/RasterizerTriangles.cpp	533;"	d	file:
HasFog	src/RasterizerTriangles.cpp	551;"	d	file:
HasFog	src/RasterizerTriangles.cpp	569;"	d	file:
HasFog	src/RasterizerTriangles.cpp	587;"	d	file:
HasFog	src/RasterizerTriangles.cpp	605;"	d	file:
HasFog	src/RasterizerTriangles.cpp	623;"	d	file:
HasFog	src/RasterizerTriangles.cpp	641;"	d	file:
HasFog	src/RasterizerTriangles.cpp	656;"	d	file:
HasFog	src/RasterizerTriangles.cpp	674;"	d	file:
HasFog	src/RasterizerTriangles.cpp	695;"	d	file:
HasFog	src/RasterizerTriangles.cpp	713;"	d	file:
HasFog	src/RasterizerTriangles.cpp	731;"	d	file:
HasFog	src/RasterizerTriangles.cpp	749;"	d	file:
HasFog	src/RasterizerTriangles.cpp	767;"	d	file:
HasFog	src/RasterizerTriangles.cpp	785;"	d	file:
HasFog	src/RasterizerTriangles.cpp	803;"	d	file:
HasFog	src/RasterizerTriangles.cpp	821;"	d	file:
HasFog	src/RasterizerTriangles.cpp	839;"	d	file:
HasFog	src/RasterizerTriangles.cpp	857;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	427;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	445;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	463;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	481;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	499;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	517;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	535;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	553;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	571;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	589;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	607;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	625;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	643;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	660;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	679;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	697;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	715;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	733;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	751;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	769;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	787;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	805;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	823;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	841;"	d	file:
HasScissor	src/RasterizerTriangles.cpp	859;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	426;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	444;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	462;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	480;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	498;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	516;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	534;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	552;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	570;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	588;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	606;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	624;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	642;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	661;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	678;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	696;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	714;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	732;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	750;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	768;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	786;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	804;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	822;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	840;"	d	file:
HasStencil	src/RasterizerTriangles.cpp	858;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	425;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	443;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	461;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	477;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	495;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	513;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	531;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	549;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	567;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	585;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	603;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	621;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	639;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	659;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	677;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	693;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	711;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	729;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	747;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	765;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	783;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	801;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	819;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	837;"	d	file:
HasTexture	src/RasterizerTriangles.cpp	855;"	d	file:
Height	src/RasterizerState.h	/^			U32					Width, Height;$/;"	m	struct:EGL::RasterizerState::ScissorTestState
Height	test/paint.cpp	/^ GLint Height;$/;"	m	struct:GLTXTLOAD	file:
Hint	src/Context.cpp	/^void Context :: Hint(GLenum target, GLenum mode) { $/;"	f	class:Context
I16	src/OGLES.h	/^	    typedef short 				I16;$/;"	t
I16	src/OGLES.h	/^        typedef TInt16  I16;$/;"	t
I16	src/codegen/codegen.h	/^	    typedef short 				I16;$/;"	t
I16	src/codegen/codegen.h	/^        typedef TInt16  I16;$/;"	t
I32	src/OGLES.h	/^	    typedef int 				I32;$/;"	t
I32	src/OGLES.h	/^        typedef TInt    I32;$/;"	t
I32	src/codegen/codegen.h	/^	    typedef int 				I32;$/;"	t
I32	src/codegen/codegen.h	/^        typedef TInt    I32;$/;"	t
I64	src/OGLES.h	/^typedef TInt64X	I64;$/;"	t
I64	src/OGLES.h	/^typedef __int64				I64;$/;"	t
I64	src/OGLES.h	/^typedef long long          I64;$/;"	t
I8	src/OGLES.h	/^	    typedef TInt8	 I8;$/;"	t
I8	src/OGLES.h	/^	    typedef signed char 		I8;$/;"	t
I8	src/codegen/codegen.h	/^	    typedef TInt8	 I8;$/;"	t
I8	src/codegen/codegen.h	/^	    typedef signed char 		I8;$/;"	t
IDC_MYICON	test/Resource.h	5;"	d
IDC_STATIC	test/Resource.h	15;"	d
IDC_TEST	test/Resource.h	13;"	d
IDD_ABOUTBOX	test/Resource.h	8;"	d
IDD_TEST_DIALOG	test/Resource.h	6;"	d
IDI_SMALL	test/Resource.h	12;"	d
IDI_TEST	test/Resource.h	11;"	d
IDM_ABOUT	test/Resource.h	9;"	d
IDM_EXIT	test/Resource.h	10;"	d
IDR_MAINFRAME	test/Resource.h	14;"	d
IDS_APP_TITLE	test/Resource.h	7;"	d
INCLUDES	projects/linux-ftk/Makefile	/^INCLUDES = -I$(inc_dir) -I$(src_dir) -I$(src_dir)\/linux-ftk \\$/;"	m
INCLUDES	projects/linux-x11/Makefile	/^INCLUDES = -I$(inc_dir) -I$(src_dir) -I$(src_dir)\/linux-x11 \\$/;"	m
INITIAL_SIZE	src/Arrays.h	/^			INITIAL_SIZE = 64,$/;"	e	enum:EGL::ObjectArray::__anon5
INSTALL	projects/linux-ftk/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	projects/linux-x11/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	projects/linux-ftk/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	projects/linux-x11/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	projects/linux-ftk/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	projects/linux-x11/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	projects/linux-ftk/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	projects/linux-x11/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	projects/linux-ftk/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	projects/linux-x11/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	projects/linux-ftk/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	projects/linux-x11/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INTERLEAVED	redbook/varray.c	46;"	d	file:
INVALID_HANDLE_VALUE	src/OGLES.h	143;"	d
Increase	src/Arrays.h	/^		void Increase(size_t minSize = 0) {$/;"	f	struct:EGL::ObjectArray
Info	test/paint.cpp	/^ BITMAPINFOHEADER *Info;$/;"	m	struct:DIB2D	file:
InfoHeader	src/WinCE/Surface.cpp	/^		InfoHeader(U32 width, U32 height) {$/;"	f	struct:__anon54::InfoHeader
InfoHeader	src/WinCE/Surface.cpp	/^	struct InfoHeader {$/;"	s	namespace:__anon54	file:
InfoHeader	src/linux-ftk/Surface.cpp	/^struct InfoHeader $/;"	s	file:
InfoHeader	src/linux-x11/Surface.cpp	/^struct InfoHeader $/;"	s	file:
InfoHeader	src/win/Surface.cpp	/^		InfoHeader(U32 width, U32 height) {$/;"	f	struct:__anon47::InfoHeader
InfoHeader	src/win/Surface.cpp	/^	struct InfoHeader {$/;"	s	namespace:__anon47	file:
Init	src/Rasterizer.cpp	/^void RasterInfo::Init(Surface * surface, I32 y) {$/;"	f	class:RasterInfo
Init	src/Texture.cpp	/^void Texture :: Init()	$/;"	f	class:Texture
InitInfoHeader	src/linux-ftk/Surface.cpp	/^void InitInfoHeader(struct InfoHeader *h, int width, int height) $/;"	f
InitInfoHeader	src/linux-x11/Surface.cpp	/^void InitInfoHeader(struct InfoHeader *h, int width, int height) $/;"	f
InitInstance	test/testce.cpp	/^BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)$/;"	f
InitInstance	test/testwin.cpp	/^BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)$/;"	f
InitOpenGL	test/epoc/paint.cpp	/^TBool InitOpenGL(CWindowGc* hdc, RWindow* hWnd, TAppGlobal* data) $/;"	f
InitOpenGL	test/paint.cpp	/^extern "C" BOOL InitOpenGL(HWND hWnd) {$/;"	f
InitScanlineDeltas	src/RasterizerTriangles.cpp	419;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	437;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	455;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	473;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	491;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	509;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	527;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	545;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	563;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	581;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	599;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	617;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	635;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	653;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	671;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	689;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	707;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	725;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	743;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	761;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	779;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	797;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	815;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	833;"	d	file:
InitScanlineDeltas	src/RasterizerTriangles.cpp	851;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	418;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	436;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	454;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	472;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	490;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	508;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	526;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	544;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	562;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	580;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	598;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	616;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	634;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	652;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	670;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	688;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	706;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	724;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	742;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	760;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	778;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	796;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	814;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	832;"	d	file:
InitScanlineStart	src/RasterizerTriangles.cpp	850;"	d	file:
InitWithMaterial	src/Light.cpp	/^void Light :: InitWithMaterial(const Material& material) {$/;"	f	class:Light
Initialize	src/Texture.cpp	/^bool Texture :: Initialize(U32 width, U32 height, RasterizerState::TextureFormat format) {$/;"	f	class:Texture
InputCapabilities	test/epoc/appview.cpp	/^TCoeInputCapabilities CAppView::InputCapabilities() const$/;"	f	class:CAppView
InternalFormat	src/RasterizerState.h	/^			TextureFormat			InternalFormat;$/;"	m	struct:EGL::RasterizerState::TextureState
InternalTypeForInternalFormat	src/ContextTexture.cpp	/^	GLenum InternalTypeForInternalFormat(RasterizerState::TextureFormat format) {$/;"	f	namespace:__anon24
Interpolate	src/ContextLines.cpp	/^	inline EGL_Fixed Interpolate(EGL_Fixed x0, EGL_Fixed x1, EGL_Fixed num, EGL_Fixed denom) {$/;"	f	namespace:__anon46
Interpolate	src/ContextLines.cpp	/^	inline void Interpolate(RasterPos& result, const RasterPos& dst, const RasterPos& src, EGL_Fixed num, EGL_Fixed denom) {$/;"	f	namespace:__anon46
Interpolate	src/ContextTriangles.cpp	/^	inline EGL_Fixed Interpolate(EGL_Fixed x0, EGL_Fixed x1, EGL_Fixed num, EGL_Fixed denom) {$/;"	f	namespace:__anon13
Interpolate	src/ContextTriangles.cpp	/^	inline void Interpolate(RasterPos& result, const RasterPos& dst, const RasterPos& src, EGL_Fixed num, EGL_Fixed denom) {$/;"	f	namespace:__anon13
InterpolateU8	src/Rasterizer.cpp	/^	inline U8 InterpolateU8(U8 arg0, U8 arg1, U8 arg2) {$/;"	f	namespace:__anon41
InterpolateU8	src/Rasterizer.cpp	/^	inline U8 InterpolateU8(U8 arg0, U8 arg1, U8 arg2, EGL_Fixed scale) {$/;"	f	namespace:__anon41
InterpolateWithEye	src/ContextTriangles.cpp	/^	inline void InterpolateWithEye(RasterPos& result, const RasterPos& dst, const RasterPos& src, EGL_Fixed num, EGL_Fixed denom) {$/;"	f	namespace:__anon13
Intersect	src/Types.h	/^		static Rect Intersect(const Rect& first, const Rect& second) {$/;"	f	struct:EGL::Rect
Inverse	src/linalg.cpp	/^Matrix4x4 Matrix4x4 :: Inverse() const {$/;"	f	class:Matrix4x4
InverseUpper3	src/linalg.cpp	/^Matrix4x4 Matrix4x4 :: InverseUpper3(bool rescale) const {$/;"	f	class:Matrix4x4
InversionTable	src/Rasterizer.cpp	/^    const I32 InversionTable[32] = {$/;"	m	namespace:__anon41	file:
InversionTablePtr	src/Rasterizer.h	/^		const I32 *	InversionTablePtr;$/;"	m	struct:EGL::RasterInfo
IsBuffer	src/ContextBuffer.cpp	/^GLboolean Context :: IsBuffer(GLuint buffer) {$/;"	f	class:Context
IsComplete	src/Texture.cpp	/^bool MultiTexture :: IsComplete() const {$/;"	f	class:MultiTexture
IsCulled	src/ContextTriangles.cpp	/^inline bool Context :: IsCulled(RasterPos& a, RasterPos& b, RasterPos& c) {$/;"	f	class:Context
IsEnabled	src/Context.cpp	/^GLboolean Context :: IsEnabled(GLenum cap) {$/;"	f	class:Context
IsEnabledAlphaTest	src/RasterizerState.h	/^	inline bool RasterizerState :: IsEnabledAlphaTest() const {$/;"	f	class:EGL::RasterizerState
IsEnabledBlending	src/RasterizerState.h	/^	inline bool RasterizerState :: IsEnabledBlending() const {$/;"	f	class:EGL::RasterizerState
IsEnabledDepthTest	src/RasterizerState.h	/^	inline bool RasterizerState :: IsEnabledDepthTest() const {$/;"	f	class:EGL::RasterizerState
IsEnabledFog	src/RasterizerState.h	/^	inline bool RasterizerState :: IsEnabledFog() const {$/;"	f	class:EGL::RasterizerState
IsEnabledLogicOp	src/RasterizerState.h	/^	inline bool RasterizerState :: IsEnabledLogicOp() const {$/;"	f	class:EGL::RasterizerState
IsEnabledPolygonOffsetFill	src/RasterizerState.h	/^	inline bool RasterizerState :: IsEnabledPolygonOffsetFill() const {$/;"	f	class:EGL::RasterizerState
IsEnabledScissorTest	src/RasterizerState.h	/^	inline bool RasterizerState :: IsEnabledScissorTest() const {$/;"	f	class:EGL::RasterizerState
IsEnabledStencilTest	src/RasterizerState.h	/^	inline bool RasterizerState :: IsEnabledStencilTest() const {$/;"	f	class:EGL::RasterizerState
IsEnabledTexture	src/RasterizerState.h	/^	inline bool RasterizerState :: IsEnabledTexture(size_t unit) const {$/;"	f	class:EGL::RasterizerState
IsIdentity	src/linalg.h	/^		inline bool IsIdentity() const {$/;"	f	class:EGL::Matrix4x4
IsLineSmoothEnabled	src/RasterizerState.h	/^	inline bool RasterizerState :: IsLineSmoothEnabled() const {$/;"	f	class:EGL::RasterizerState
IsMipMap	src/Texture.h	/^	inline bool MultiTexture :: IsMipMap() const {$/;"	f	class:EGL::MultiTexture
IsNil	src/Arrays.h	/^			bool IsNil() {$/;"	f	struct:EGL::ObjectArray::ObjectRecord
IsObject	src/Arrays.h	/^		bool IsObject(size_t index) {$/;"	f	struct:EGL::ObjectArray
IsPointCoordReplaceEnabled	src/RasterizerState.h	/^	inline bool RasterizerState :: IsPointCoordReplaceEnabled(size_t unit) const {$/;"	f	class:EGL::RasterizerState
IsPointSmoothEnabled	src/RasterizerState.h	/^	inline bool RasterizerState :: IsPointSmoothEnabled() const {$/;"	f	class:EGL::RasterizerState
IsPointSpriteEnabled	src/RasterizerState.h	/^	inline bool RasterizerState :: IsPointSpriteEnabled() const {$/;"	f	class:EGL::RasterizerState
IsPointer	src/Arrays.h	/^			bool IsPointer() {$/;"	f	struct:EGL::ObjectArray::ObjectRecord
IsPowerOf2	src/ContextTexture.cpp	/^	bool IsPowerOf2(GLsizei value) {$/;"	f	namespace:__anon39
IsTexture	src/ContextTexture.cpp	/^GLboolean Context :: IsTexture(GLuint texture) {$/;"	f	class:Context
IsValidAttribute	src/Config.cpp	/^bool Config :: IsValidAttribute(const EGLint * validAttributes, EGLint attribute) {$/;"	f	class:Config
IsValidAttribute	src/Epoc/ConfigEpoc.cpp	/^bool Config :: IsValidAttribute(const EGLint * validAttributes, EGLint attribute) {$/;"	f	class:Config
KUidTest	test/epoc/app.cpp	/^const TUid KUidTest = {0x10202DA0};$/;"	v
LD	projects/linux-ftk/Makefile	/^LD = \/usr\/bin\/ld$/;"	m
LD	projects/linux-x11/Makefile	/^LD = \/usr\/bin\/ld$/;"	m
LDB	src/codegen/instruction.h	535;"	d
LDFLAGS	projects/linux-ftk/Makefile	/^LDFLAGS =  -lpthread $/;"	m
LDFLAGS	projects/linux-x11/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	redbook/Makefile	/^LDFLAGS = $(LLDLIBS)$/;"	m
LDH	src/codegen/instruction.h	536;"	d
LDI	src/codegen/instruction.h	555;"	d
LDW	src/codegen/instruction.h	537;"	d
LIBOBJS	projects/linux-ftk/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	projects/linux-x11/Makefile	/^LIBOBJS = $/;"	m
LIBS	projects/linux-ftk/Makefile	/^LIBS = $/;"	m
LIBS	projects/linux-x11/Makefile	/^LIBS = -lpthread -lXext -lX11 -dl$/;"	m
LIBTOOL	projects/linux-ftk/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	projects/linux-x11/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINEAR_SPAN	src/RasterizerTriangles.cpp	212;"	d	file:
LINEAR_SPAN	src/arm/GenScanline.cpp	95;"	d	file:
LINK	projects/linux-ftk/Makefile	/^LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
LINK	projects/linux-x11/Makefile	/^LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
LIPO	projects/linux-ftk/Makefile	/^LIPO = $/;"	m
LIPO	projects/linux-x11/Makefile	/^LIPO = $/;"	m
LLDLIBS	redbook/Makefile	/^LLDLIBS = -L.. -lug -L..\/..\/.. -lGLES_CL -L\/usr\/X11R6\/lib $/;"	m
LN_S	projects/linux-ftk/Makefile	/^LN_S = ln -s$/;"	m
LN_S	projects/linux-x11/Makefile	/^LN_S = ln -s$/;"	m
LOAD_DATA	src/arm/GenFragment.cpp	/^	inline cg_virtual_reg_t * LOAD_DATA(cg_block_t * block, cg_virtual_reg_t * base, I32 constant) {$/;"	f	namespace:__anon11
LOAD_DATA	src/arm/GenLline.cpp	/^	inline cg_virtual_reg_t * LOAD_DATA(cg_block_t * block, cg_virtual_reg_t * base, I32 constant) {$/;"	f	namespace:__anon9
LOAD_DATA	src/arm/GenPoint.cpp	/^	inline cg_virtual_reg_t * LOAD_DATA(cg_block_t * block, cg_virtual_reg_t * base, I32 constant) {$/;"	f	namespace:__anon6
LOAD_DATA	src/arm/GenScanline.cpp	/^	inline cg_virtual_reg_t * LOAD_DATA(cg_block_t * block, cg_virtual_reg_t * base, I32 constant) {$/;"	f	namespace:__anon10
LOAD_DATA	src/arm/GenTriangle.cpp	/^	inline cg_virtual_reg_t * LOAD_DATA(cg_block_t * block, cg_virtual_reg_t * base, I32 constant) {$/;"	f	namespace:__anon8
LOG2	src/codegen/instruction.h	449;"	d
LOG_LINEAR_SPAN	src/RasterizerTriangles.cpp	211;"	d	file:
LOG_LINEAR_SPAN	src/arm/GenScanline.cpp	94;"	d	file:
LSL	src/codegen/instruction.h	479;"	d
LSL_S	src/codegen/instruction.h	507;"	d
LSR	src/codegen/instruction.h	480;"	d
LSR_S	src/codegen/instruction.h	508;"	d
LTCOMPILE	projects/linux-ftk/Makefile	/^LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \\$/;"	m
LTCOMPILE	projects/linux-x11/Makefile	/^LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \\$/;"	m
LTCXXCOMPILE	projects/linux-ftk/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	projects/linux-x11/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTLIBOBJS	projects/linux-ftk/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	projects/linux-x11/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	projects/linux-ftk/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTLIBRARIES	projects/linux-x11/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LT_OBJDIR	projects/linux-ftk/confdefs.h	19;"	d
LT_OBJDIR	projects/linux-ftk/linux-config.h	39;"	d
LT_OBJDIR	projects/linux-x11/linux-config.h	45;"	d
Length	src/linalg.h	/^		inline EGL_Fixed Length() const {$/;"	f	class:EGL::Vec3D
Length	src/linalg.h	/^		inline EGL_Fixed Length() const {$/;"	f	class:EGL::Vec4D
LengthSq	src/linalg.h	/^		inline EGL_Fixed LengthSq() const {$/;"	f	class:EGL::Vec3D
LengthSq	src/linalg.h	/^		inline EGL_Fixed LengthSq() const {$/;"	f	class:EGL::Vec4D
Light	src/Light.cpp	/^Light :: Light() $/;"	f	class:Light
Light	src/Light.h	/^	class Light {$/;"	c	namespace:EGL
LightModelf	src/ContextFloat.cpp	/^void Context :: LightModelf (GLenum pname, GLfloat param) {$/;"	f	class:Context
LightModelfv	src/ContextFloat.cpp	/^void Context :: LightModelfv (GLenum pname, const GLfloat *params) {$/;"	f	class:Context
LightModelx	src/ContextLight.cpp	/^void Context :: LightModelx(GLenum pname, GLfixed param) { $/;"	f	class:Context
LightModelxv	src/ContextLight.cpp	/^void Context :: LightModelxv(GLenum pname, const GLfixed *params) { $/;"	f	class:Context
Lightf	src/ContextFloat.cpp	/^void Context :: Lightf (GLenum light, GLenum pname, GLfloat param) {$/;"	f	class:Context
Lightfv	src/ContextFloat.cpp	/^void Context :: Lightfv (GLenum light, GLenum pname, const GLfloat *params) {$/;"	f	class:Context
Lightx	src/ContextLight.cpp	/^void Context :: Lightx(GLenum light, GLenum pname, GLfixed param) { $/;"	f	class:Context
Lightxv	src/ContextLight.cpp	/^void Context :: Lightxv(GLenum light, GLenum pname, const GLfixed *params) { $/;"	f	class:Context
Limits	src/RasterizerState.h	/^		enum Limits {$/;"	g	class:EGL::RasterizerState
LineFunction	src/Rasterizer.h	/^	typedef void (LineFunction)(const RasterInfo * info, const RasterPos * from, const RasterPos * to);$/;"	t	namespace:EGL
LineState	src/RasterizerState.h	/^			LineState() {$/;"	f	struct:EGL::RasterizerState::LineState
LineState	src/RasterizerState.h	/^			LineState(const LineState& other) {$/;"	f	struct:EGL::RasterizerState::LineState
LineState	src/RasterizerState.h	/^		struct LineState {$/;"	s	class:EGL::RasterizerState
LineWidth	src/ContextFloat.cpp	/^void Context :: LineWidth (GLfloat width) {$/;"	f	class:Context
LineWidthx	src/ContextLines.cpp	/^void Context :: LineWidthx(GLfixed width) { $/;"	f	class:Context
LoadIdentity	src/ContextMatrix.cpp	/^void Context :: LoadIdentity(void) { $/;"	f	class:Context
LoadIdentity	src/MatrixStack.cpp	/^void MatrixStack :: LoadIdentity(void) {$/;"	f	class:MatrixStack
LoadMatrix	src/MatrixStack.cpp	/^void MatrixStack :: LoadMatrix(const Matrix4x4& matrix) {$/;"	f	class:MatrixStack
LoadMatrixf	src/ContextFloat.cpp	/^void Context :: LoadMatrixf (const GLfloat *m) {$/;"	f	class:Context
LoadMatrixx	src/ContextMatrix.cpp	/^void Context :: LoadMatrixx(const GLfixed *m) { $/;"	f	class:Context
LoadPaletteFromModelViewMatrix	src/ContextMatrix.cpp	/^void Context :: LoadPaletteFromModelViewMatrix(void) {$/;"	f	class:Context
LoadTexture	test/paint.cpp	/^	bool LoadTexture(const WCHAR *filename) {$/;"	f	namespace:__anon100
LoadTextureL	test/epoc/paint.cpp	/^	void LoadTextureL(const TDesC& filename) $/;"	f	namespace:__anon99
Log	src/ContextTexture.cpp	/^	U32 Log(U32 value) {$/;"	f	namespace:__anon40
Log	src/Texture.cpp	/^	U32 Log(U32 value) {$/;"	f	namespace:__anon16
Log	src/arm/GenLline.cpp	/^	U32 Log(U32 value) {$/;"	f	namespace:__anon9
Log	src/arm/GenPoint.cpp	/^	U32 Log(U32 value) {$/;"	f	namespace:__anon6
Log	src/arm/GenScanline.cpp	/^	U32 Log(U32 value) {$/;"	f	namespace:__anon10
Log	src/arm/GenTriangle.cpp	/^	U32 Log(U32 value) {$/;"	f	namespace:__anon8
Log2	src/Rasterizer.cpp	/^	inline int Log2(int value) {$/;"	f	namespace:__anon42
Log2	src/RasterizerTriangles.cpp	/^	inline int Log2(int value) {$/;"	f	namespace:__anon20
LogMaxTextureSize	src/RasterizerState.h	/^			LogMaxTextureSize = 12,$/;"	e	enum:EGL::RasterizerState::Limits
LogicOp	src/ContextRaster.cpp	/^void Context :: LogicOp(GLenum opcode) { $/;"	f	class:Context
LogicOp	src/RasterizerState.h	/^		enum LogicOp {$/;"	g	class:EGL::RasterizerState
LogicOpAnd	src/RasterizerState.h	/^			LogicOpAnd,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpAndInverted	src/RasterizerState.h	/^			LogicOpAndInverted,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpAndReverse	src/RasterizerState.h	/^			LogicOpAndReverse,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpClear	src/RasterizerState.h	/^			LogicOpClear,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpCopy	src/RasterizerState.h	/^			LogicOpCopy,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpCopyInverted	src/RasterizerState.h	/^			LogicOpCopyInverted,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpEquiv	src/RasterizerState.h	/^			LogicOpEquiv,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpFromEnum	src/ContextRaster.cpp	/^	RasterizerState::LogicOp LogicOpFromEnum(GLenum op) {$/;"	f	namespace:__anon50
LogicOpInvalid	src/RasterizerState.h	/^			LogicOpInvalid = -1,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpInvert	src/RasterizerState.h	/^			LogicOpInvert,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpNand	src/RasterizerState.h	/^			LogicOpNand,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpNoop	src/RasterizerState.h	/^			LogicOpNoop,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpNor	src/RasterizerState.h	/^			LogicOpNor,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpOr	src/RasterizerState.h	/^			LogicOpOr,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpOrInverted	src/RasterizerState.h	/^			LogicOpOrInverted,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpOrReverse	src/RasterizerState.h	/^			LogicOpOrReverse,$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpSet	src/RasterizerState.h	/^			LogicOpSet$/;"	e	enum:EGL::RasterizerState::LogicOp
LogicOpState	src/RasterizerState.h	/^			LogicOpState() {$/;"	f	struct:EGL::RasterizerState::LogicOpState
LogicOpState	src/RasterizerState.h	/^			LogicOpState(const LogicOpState& other) {$/;"	f	struct:EGL::RasterizerState::LogicOpState
LogicOpState	src/RasterizerState.h	/^		struct LogicOpState {$/;"	s	class:EGL::RasterizerState
LogicOpXor	src/RasterizerState.h	/^			LogicOpXor,$/;"	e	enum:EGL::RasterizerState::LogicOp
MAKEINFO	projects/linux-ftk/Makefile	/^MAKEINFO = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-ftk\/missing --run makeinfo$/;"	m
MAKEINFO	projects/linux-x11/Makefile	/^MAKEINFO = ${SHELL} \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-x11\/missing --run makeinfo$/;"	m
MATRIX_PALETTE_SIZE	src/Context.h	/^			MATRIX_PALETTE_SIZE = 9,$/;"	e	enum:EGL::Context::__anon23
MAX	src/Color.h	/^			MAX = 0xff$/;"	e	enum:EGL::Color::__anon52
MAX	src/codegen/instruction.h	491;"	d
MAXZ	demos/hello.c	48;"	d	file:
MAXZ	redbook/alpha3D.c	48;"	d	file:
MAX_ARGS	ug/ug_win32.c	590;"	d	file:
MAX_BLOCKS	src/codegen/segment.c	35;"	d	file:
MAX_LEVELS	src/Texture.h	/^			MAX_LEVELS = RasterizerState::LogMaxTextureSize$/;"	e	enum:EGL::MultiTexture::__anon98
MAX_LOADSTRING	test/testce.cpp	14;"	d	file:
MAX_LOADSTRING	test/testwin.cpp	9;"	d	file:
MIN	src/codegen/instruction.h	490;"	d
MINZ	demos/hello.c	49;"	d	file:
MINZ	redbook/alpha3D.c	49;"	d	file:
MOD	src/codegen/instruction.h	481;"	d
MOD_S	src/codegen/instruction.h	509;"	d
MUL	src/codegen/instruction.h	482;"	d
MUL_S	src/codegen/instruction.h	510;"	d
M_PI	src/Light.cpp	47;"	d	file:
M_PI	src/linalg.cpp	44;"	d	file:
MagFilterMode	src/RasterizerState.h	/^			FilterMode				MagFilterMode;$/;"	m	struct:EGL::RasterizerState::TextureState
MagFilterModeFromEnum	src/ContextTexture.cpp	/^	RasterizerState::FilterMode MagFilterModeFromEnum(GLenum mode) {$/;"	f	namespace:__anon24
MakeIdentity	src/linalg.h	/^		inline void MakeIdentity() {$/;"	f	class:EGL::Matrix4x4
Mask	src/Color.h	/^		inline Color Mask(bool maskR, bool maskG, bool maskB, bool maskA) const {$/;"	f	class:EGL::Color
Mask	src/RasterizerState.h	/^			U32					Mask;$/;"	m	struct:EGL::RasterizerState::StencilState
MaskState	src/RasterizerState.h	/^			MaskState() {$/;"	f	struct:EGL::RasterizerState::MaskState
MaskState	src/RasterizerState.h	/^			MaskState(const MaskState& other) {$/;"	f	struct:EGL::RasterizerState::MaskState
MaskState	src/RasterizerState.h	/^		struct MaskState {$/;"	s	class:EGL::RasterizerState
Material	src/Material.cpp	/^Material :: Material():$/;"	f	class:Material
Material	src/Material.h	/^	class Material {$/;"	c	namespace:EGL
Materialf	src/ContextFloat.cpp	/^void Context :: Materialf (GLenum face, GLenum pname, GLfloat param) {$/;"	f	class:Context
Materialfv	src/ContextFloat.cpp	/^void Context :: Materialfv (GLenum face, GLenum pname, const GLfloat *params) {$/;"	f	class:Context
Materialx	src/ContextMaterial.cpp	/^void Context :: Materialx(GLenum face, GLenum pname, GLfixed param) { $/;"	f	class:Context
Materialxv	src/ContextMaterial.cpp	/^void Context :: Materialxv(GLenum face, GLenum pname, const GLfixed *params) { $/;"	f	class:Context
Matrix4x4	src/linalg.h	/^		inline Matrix4x4() {$/;"	f	class:EGL::Matrix4x4
Matrix4x4	src/linalg.h	/^		inline Matrix4x4(EGL_Fixed m00, EGL_Fixed m01, EGL_Fixed m02, EGL_Fixed m03,$/;"	f	class:EGL::Matrix4x4
Matrix4x4	src/linalg.h	/^		inline Matrix4x4(const EGL_Fixed * elements) {$/;"	f	class:EGL::Matrix4x4
Matrix4x4	src/linalg.h	/^		inline Matrix4x4(const Matrix4x4& other) {$/;"	f	class:EGL::Matrix4x4
Matrix4x4	src/linalg.h	/^	class Matrix4x4 {$/;"	c	namespace:EGL
MatrixIndexPointer	src/ContextRender.cpp	/^void Context :: MatrixIndexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {$/;"	f	class:Context
MatrixMode	src/ContextMatrix.cpp	/^void Context :: MatrixMode(GLenum mode) {$/;"	f	class:Context
MatrixStack	src/MatrixStack.cpp	/^MatrixStack :: MatrixStack(I32 maxStackElements)$/;"	f	class:MatrixStack
MatrixStack	src/MatrixStack.h	/^	class MatrixStack {$/;"	c	namespace:EGL
Max	src/Types.h	/^	template<class T> T Max(const T& a, const T& b) {$/;"	f	namespace:EGL
MaxMipmapLevel	src/Rasterizer.h	/^		U32			MaxMipmapLevel[EGL_NUM_TEXTURE_UNITS];$/;"	m	struct:EGL::RasterInfo
MaxTextureSize	src/RasterizerState.h	/^			MaxTextureSize = 1 << LogMaxTextureSize$/;"	e	enum:EGL::RasterizerState::Limits
Min	src/Types.h	/^	template<class T> T Min(const T& a, const T& b) {$/;"	f	namespace:EGL
MinFilterMode	src/RasterizerState.h	/^			FilterMode				MinFilterMode;$/;"	m	struct:EGL::RasterizerState::TextureState
MinFilterModeFromEnum	src/ContextTexture.cpp	/^	RasterizerState::FilterMode MinFilterModeFromEnum(GLenum mode) {$/;"	f	namespace:__anon24
MipmapFilterMode	src/RasterizerState.h	/^			FilterMode				MipmapFilterMode;$/;"	m	struct:EGL::RasterizerState::TextureState
MipmapFilterModeFromEnum	src/ContextTexture.cpp	/^	RasterizerState::FilterMode MipmapFilterModeFromEnum(GLenum mode) {$/;"	f	namespace:__anon24
MipmapLevel	src/Rasterizer.h	/^		U32			MipmapLevel[EGL_NUM_TEXTURE_UNITS];$/;"	m	struct:EGL::RasterInfo
Mode	src/RasterizerState.h	/^			TextureMode				Mode;$/;"	m	struct:EGL::RasterizerState::TextureState
Mul255	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: Mul255(cg_block_t * block, cg_virtual_reg_t * first, cg_virtual_reg_t * second) {$/;"	f	class:CodeGenerator
MulLong	src/ContextTriangles.cpp	/^	inline I64 MulLong(EGL_Fixed a, EGL_Fixed b) {$/;"	f	namespace:__anon13
MulU8	src/Rasterizer.cpp	/^	inline U8 MulU8(U8 a, U8 b) {$/;"	f	namespace:__anon41
MulU8	src/Rasterizer.cpp	/^	inline U8 MulU8(U8 a, U8 b, EGL_Fixed scale) {$/;"	f	namespace:__anon41
MultMatrix	src/ContextMatrix.cpp	/^void Context :: MultMatrix(const Matrix4x4 & m) {$/;"	f	class:Context
MultMatrix	src/MatrixStack.cpp	/^void MatrixStack :: MultMatrix(const Matrix4x4& matrix) {$/;"	f	class:MatrixStack
MultMatrixf	src/ContextFloat.cpp	/^void Context :: MultMatrixf (const GLfloat *m) {$/;"	f	class:Context
MultMatrixx	src/ContextMatrix.cpp	/^void Context :: MultMatrixx(const GLfixed *m) { $/;"	f	class:Context
MultiTexCoord4f	src/ContextFloat.cpp	/^void Context :: MultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {$/;"	f	class:Context
MultiTexCoord4x	src/ContextRender.cpp	/^void Context :: MultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { $/;"	f	class:Context
MultiTexture	src/Texture.cpp	/^MultiTexture :: MultiTexture():$/;"	f	class:MultiTexture
MultiTexture	src/Texture.h	/^	class MultiTexture {$/;"	c	namespace:EGL
Multiply	src/linalg.h	/^		inline void Multiply(const Vec4D& vector, Vec4D& result) const {$/;"	f	class:EGL::Matrix4x4
Multiply3x3	src/linalg.h	/^		inline Vec3D Multiply3x3(const Vec3D& vector) const {$/;"	f	class:EGL::Matrix4x4
MyRegisterClass	test/testce.cpp	/^ATOM MyRegisterClass(HINSTANCE hInstance, LPTSTR szWindowClass)$/;"	f
MyRegisterClass	test/testwin.cpp	/^ATOM MyRegisterClass(HINSTANCE hInstance)$/;"	f
NEG	src/codegen/instruction.h	440;"	d
NEG_S	src/codegen/instruction.h	458;"	d
NEW	src/codegen/heap.h	69;"	d
NM	projects/linux-ftk/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	projects/linux-x11/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	projects/linux-ftk/Makefile	/^NMEDIT = $/;"	m
NMEDIT	projects/linux-x11/Makefile	/^NMEDIT = $/;"	m
NORMAL_BUFFER	test/epoc/paint.cpp	1110;"	d	file:
NORMAL_BUFFER	test/paint.cpp	1230;"	d	file:
NORMAL_INSTALL	projects/linux-ftk/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	projects/linux-x11/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	projects/linux-ftk/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	projects/linux-x11/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOSHM	src/linux-x11/Surface.h	59;"	d
NOT	src/codegen/instruction.h	442;"	d
NOT_S	src/codegen/instruction.h	460;"	d
NUM_CLIP_PLANES	src/Context.h	/^			NUM_CLIP_PLANES = 6,$/;"	e	enum:EGL::Context::__anon23
NativeDisplayType	include/GLES/egltypes.h	/^typedef CWindowGc *		NativeDisplayType;$/;"	t
NativeDisplayType	include/GLES/egltypes.h	/^typedef Display* NativeDisplayType;$/;"	t
NativeDisplayType	include/GLES/egltypes.h	/^typedef FtkDisplay* NativeDisplayType;$/;"	t
NativeDisplayType	include/GLES/egltypes.h	/^typedef HDC		NativeDisplayType;$/;"	t
NativePixmapType	include/GLES/egltypes.h	/^typedef CFbsBitmap * 	NativePixmapType;$/;"	t
NativePixmapType	include/GLES/egltypes.h	/^typedef FtkBitmap*  NativePixmapType;$/;"	t
NativePixmapType	include/GLES/egltypes.h	/^typedef HBITMAP NativePixmapType;$/;"	t
NativePixmapType	include/GLES/egltypes.h	/^typedef Pixmap NativePixmapType;$/;"	t
NativeWindowType	include/GLES/egltypes.h	/^typedef FtkWidget*  NativeWindowType;$/;"	t
NativeWindowType	include/GLES/egltypes.h	/^typedef HWND	NativeWindowType;$/;"	t
NativeWindowType	include/GLES/egltypes.h	/^typedef RWindow *		NativeWindowType;$/;"	t
NativeWindowType	include/GLES/egltypes.h	/^typedef Window NativeWindowType;$/;"	t
NewApplication	test/epoc/test.cpp	/^EXPORT_C CApaApplication* NewApplication()$/;"	f
NewL	src/Epoc/Surface.cpp	/^Surface * Surface :: NewL(const Config & config) {$/;"	f	class:Surface
NewL	test/epoc/appview.cpp	/^CAppView* CAppView::NewL(const TRect& aRect)$/;"	f	class:CAppView
NewL	test/epoc/doc.cpp	/^CDoc* CDoc::NewL(CEikApplication& aApp)$/;"	f	class:CDoc
NewLC	src/Epoc/Surface.cpp	/^Surface * Surface :: NewLC(const Config & config) {$/;"	f	class:Surface
Normal3f	src/ContextFloat.cpp	/^void Context :: Normal3f (GLfloat nx, GLfloat ny, GLfloat nz) {$/;"	f	class:Context
Normal3x	src/ContextRender.cpp	/^void Context :: Normal3x(GLfixed nx, GLfixed ny, GLfixed nz) { $/;"	f	class:Context
NormalPointer	src/ContextRender.cpp	/^void Context :: NormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer) { $/;"	f	class:Context
Normalize	src/linalg.h	/^		inline void Normalize() {$/;"	f	class:EGL::Vec3D
Normalize	src/linalg.h	/^		inline void Normalize() {$/;"	f	class:EGL::Vec4D
OBJDUMP	projects/linux-ftk/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	projects/linux-x11/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	projects/linux-ftk/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	projects/linux-x11/Makefile	/^OBJEXT = o$/;"	m
OFFSET_COLOR_ALPHA	src/arm/CodeGenerator.h	191;"	d
OFFSET_COLOR_BLUE	src/arm/CodeGenerator.h	190;"	d
OFFSET_COLOR_GREEN	src/arm/CodeGenerator.h	189;"	d
OFFSET_COLOR_RED	src/arm/CodeGenerator.h	188;"	d
OFFSET_EDGE_BUFFER_COLOR	src/arm/CodeGenerator.h	226;"	d
OFFSET_EDGE_BUFFER_COLOR_A	src/arm/CodeGenerator.h	237;"	d
OFFSET_EDGE_BUFFER_COLOR_B	src/arm/CodeGenerator.h	236;"	d
OFFSET_EDGE_BUFFER_COLOR_G	src/arm/CodeGenerator.h	235;"	d
OFFSET_EDGE_BUFFER_COLOR_R	src/arm/CodeGenerator.h	234;"	d
OFFSET_EDGE_BUFFER_FOG	src/arm/CodeGenerator.h	228;"	d
OFFSET_EDGE_BUFFER_TEXTURE	src/arm/CodeGenerator.h	227;"	d
OFFSET_EDGE_BUFFER_TEX_DTUDX	src/arm/CodeGenerator.h	241;"	d
OFFSET_EDGE_BUFFER_TEX_DTUDY	src/arm/CodeGenerator.h	242;"	d
OFFSET_EDGE_BUFFER_TEX_DTVDX	src/arm/CodeGenerator.h	243;"	d
OFFSET_EDGE_BUFFER_TEX_DTVDY	src/arm/CodeGenerator.h	244;"	d
OFFSET_EDGE_BUFFER_TEX_TU	src/arm/CodeGenerator.h	239;"	d
OFFSET_EDGE_BUFFER_TEX_TV	src/arm/CodeGenerator.h	240;"	d
OFFSET_EDGE_BUFFER_WINDOW	src/arm/CodeGenerator.h	225;"	d
OFFSET_EDGE_BUFFER_WINDOW_DEPTH	src/arm/CodeGenerator.h	232;"	d
OFFSET_EDGE_BUFFER_WINDOW_INV_Z	src/arm/CodeGenerator.h	231;"	d
OFFSET_EDGE_BUFFER_WINDOW_X	src/arm/CodeGenerator.h	230;"	d
OFFSET_EDGE_COORD_DEPTH	src/arm/CodeGenerator.h	208;"	d
OFFSET_EDGE_COORD_INV_Z	src/arm/CodeGenerator.h	207;"	d
OFFSET_EDGE_COORD_X	src/arm/CodeGenerator.h	206;"	d
OFFSET_INVERSE_TABLE_PTR	src/arm/CodeGenerator.h	182;"	d
OFFSET_MAX_MIPMAP_LEVEL	src/arm/CodeGenerator.h	174;"	d
OFFSET_MIPMAP_LEVEL	src/arm/CodeGenerator.h	173;"	d
OFFSET_RASTER_POS_COLOR	src/arm/CodeGenerator.h	251;"	d
OFFSET_RASTER_POS_COLOR_A	src/arm/CodeGenerator.h	263;"	d
OFFSET_RASTER_POS_COLOR_B	src/arm/CodeGenerator.h	262;"	d
OFFSET_RASTER_POS_COLOR_G	src/arm/CodeGenerator.h	261;"	d
OFFSET_RASTER_POS_COLOR_R	src/arm/CodeGenerator.h	260;"	d
OFFSET_RASTER_POS_FOG	src/arm/CodeGenerator.h	253;"	d
OFFSET_RASTER_POS_TEXTURE	src/arm/CodeGenerator.h	252;"	d
OFFSET_RASTER_POS_TEX_DTUDX	src/arm/CodeGenerator.h	267;"	d
OFFSET_RASTER_POS_TEX_DTUDY	src/arm/CodeGenerator.h	268;"	d
OFFSET_RASTER_POS_TEX_DTVDX	src/arm/CodeGenerator.h	269;"	d
OFFSET_RASTER_POS_TEX_DTVDY	src/arm/CodeGenerator.h	270;"	d
OFFSET_RASTER_POS_TEX_TU	src/arm/CodeGenerator.h	265;"	d
OFFSET_RASTER_POS_TEX_TV	src/arm/CodeGenerator.h	266;"	d
OFFSET_RASTER_POS_WINDOW	src/arm/CodeGenerator.h	250;"	d
OFFSET_RASTER_POS_WINDOW_DEPTH	src/arm/CodeGenerator.h	258;"	d
OFFSET_RASTER_POS_WINDOW_INV_Z	src/arm/CodeGenerator.h	257;"	d
OFFSET_RASTER_POS_WINDOW_X	src/arm/CodeGenerator.h	255;"	d
OFFSET_RASTER_POS_WINDOW_Y	src/arm/CodeGenerator.h	256;"	d
OFFSET_SCREEN_DEPTH	src/arm/CodeGenerator.h	200;"	d
OFFSET_SCREEN_INV_Z	src/arm/CodeGenerator.h	199;"	d
OFFSET_SCREEN_X	src/arm/CodeGenerator.h	197;"	d
OFFSET_SCREEN_Y	src/arm/CodeGenerator.h	198;"	d
OFFSET_SURFACE_ALPHA_BUFFER	src/arm/CodeGenerator.h	170;"	d
OFFSET_SURFACE_COLOR_BUFFER	src/arm/CodeGenerator.h	168;"	d
OFFSET_SURFACE_DEPTH_BUFFER	src/arm/CodeGenerator.h	167;"	d
OFFSET_SURFACE_HEIGHT	src/arm/CodeGenerator.h	166;"	d
OFFSET_SURFACE_STENCIL_BUFFER	src/arm/CodeGenerator.h	169;"	d
OFFSET_SURFACE_WIDTH	src/arm/CodeGenerator.h	165;"	d
OFFSET_TEXTURES	src/arm/CodeGenerator.h	172;"	d
OFFSET_TEXTURE_DATA	src/arm/CodeGenerator.h	178;"	d
OFFSET_TEXTURE_LOG_HEIGHT	src/arm/CodeGenerator.h	177;"	d
OFFSET_TEXTURE_LOG_WIDTH	src/arm/CodeGenerator.h	176;"	d
OFFSET_TEX_COORD_DTUDX	src/arm/CodeGenerator.h	216;"	d
OFFSET_TEX_COORD_DTUDY	src/arm/CodeGenerator.h	217;"	d
OFFSET_TEX_COORD_DTVDX	src/arm/CodeGenerator.h	218;"	d
OFFSET_TEX_COORD_DTVDY	src/arm/CodeGenerator.h	219;"	d
OFFSET_TEX_COORD_TU	src/arm/CodeGenerator.h	214;"	d
OFFSET_TEX_COORD_TV	src/arm/CodeGenerator.h	215;"	d
OGLES_API	src/OGLES.h	45;"	d
OGLES_API	src/OGLES.h	47;"	d
OGLES_API	src/OGLES.h	50;"	d
OGLES_API	src/OGLES.h	57;"	d
OGLES_API	src/OGLES.h	59;"	d
OGLES_API	src/OGLES.h	64;"	d
OR	src/codegen/instruction.h	483;"	d
OR_S	src/codegen/instruction.h	511;"	d
OTOOL	projects/linux-ftk/Makefile	/^OTOOL = $/;"	m
OTOOL	projects/linux-x11/Makefile	/^OTOOL = $/;"	m
OTOOL64	projects/linux-ftk/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	projects/linux-x11/Makefile	/^OTOOL64 = $/;"	m
ObjectArray	src/Arrays.h	/^		ObjectArray() {$/;"	f	struct:EGL::ObjectArray
ObjectArray	src/Arrays.h	/^	struct ObjectArray {$/;"	s	namespace:EGL
ObjectRecord	src/Arrays.h	/^		struct ObjectRecord {$/;"	s	struct:EGL::ObjectArray
OfferKeyEventL	test/epoc/appview.cpp	/^TKeyResponse CAppView::OfferKeyEventL(const TKeyEvent& \/*aKeyEvent*\/,TEventCode \/*aType*\/)$/;"	f	class:CAppView
OffsetFactor	src/RasterizerState.h	/^			EGL_Fixed			OffsetFactor;$/;"	m	struct:EGL::RasterizerState::PolygonState
OffsetFillEnabled	src/RasterizerState.h	/^			bool				OffsetFillEnabled;$/;"	m	struct:EGL::RasterizerState::PolygonState
OffsetUnits	src/RasterizerState.h	/^			EGL_Fixed			OffsetUnits;$/;"	m	struct:EGL::RasterizerState::PolygonState
OnTimer	test/epoc/appview.cpp	/^int CAppView::OnTimer(void* aArg)$/;"	f	class:CAppView
Opcode	src/RasterizerState.h	/^			LogicOp				Opcode;$/;"	m	struct:EGL::RasterizerState::LogicOpState
Orthof	src/ContextFloat.cpp	/^void Context :: Orthof (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar) {$/;"	f	class:Context
Orthox	src/ContextMatrix.cpp	/^void Context :: Orthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar) { $/;"	f	class:Context
PACKAGE	projects/linux-ftk/Makefile	/^PACKAGE = libvincent$/;"	m
PACKAGE	projects/linux-ftk/confdefs.h	6;"	d
PACKAGE	projects/linux-ftk/linux-config.h	42;"	d
PACKAGE	projects/linux-x11/Makefile	/^PACKAGE = libvincent$/;"	m
PACKAGE	projects/linux-x11/linux-config.h	48;"	d
PACKAGE_BUGREPORT	projects/linux-ftk/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_BUGREPORT	projects/linux-ftk/confdefs.h	5;"	d
PACKAGE_BUGREPORT	projects/linux-ftk/linux-config.h	45;"	d
PACKAGE_BUGREPORT	projects/linux-x11/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_BUGREPORT	projects/linux-x11/linux-config.h	51;"	d
PACKAGE_NAME	projects/linux-ftk/Makefile	/^PACKAGE_NAME = $/;"	m
PACKAGE_NAME	projects/linux-ftk/confdefs.h	1;"	d
PACKAGE_NAME	projects/linux-ftk/linux-config.h	48;"	d
PACKAGE_NAME	projects/linux-x11/Makefile	/^PACKAGE_NAME = $/;"	m
PACKAGE_NAME	projects/linux-x11/linux-config.h	54;"	d
PACKAGE_STRING	projects/linux-ftk/Makefile	/^PACKAGE_STRING = $/;"	m
PACKAGE_STRING	projects/linux-ftk/confdefs.h	4;"	d
PACKAGE_STRING	projects/linux-ftk/linux-config.h	51;"	d
PACKAGE_STRING	projects/linux-x11/Makefile	/^PACKAGE_STRING = $/;"	m
PACKAGE_STRING	projects/linux-x11/linux-config.h	57;"	d
PACKAGE_TARNAME	projects/linux-ftk/Makefile	/^PACKAGE_TARNAME = $/;"	m
PACKAGE_TARNAME	projects/linux-ftk/confdefs.h	2;"	d
PACKAGE_TARNAME	projects/linux-ftk/linux-config.h	54;"	d
PACKAGE_TARNAME	projects/linux-x11/Makefile	/^PACKAGE_TARNAME = $/;"	m
PACKAGE_TARNAME	projects/linux-x11/linux-config.h	60;"	d
PACKAGE_VERSION	projects/linux-ftk/Makefile	/^PACKAGE_VERSION = $/;"	m
PACKAGE_VERSION	projects/linux-ftk/confdefs.h	3;"	d
PACKAGE_VERSION	projects/linux-ftk/linux-config.h	57;"	d
PACKAGE_VERSION	projects/linux-x11/Makefile	/^PACKAGE_VERSION = $/;"	m
PACKAGE_VERSION	projects/linux-x11/linux-config.h	63;"	d
PATH_SEPARATOR	projects/linux-ftk/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	projects/linux-x11/Makefile	/^PATH_SEPARATOR = :$/;"	m
PFNSAVESURFACE	ug/ug_ftk.c	/^typedef EGLBoolean (*PFNSAVESURFACE)(EGLSurface surface, const char* filename);$/;"	t	file:
PFNSAVESURFACE	ug/ug_win32.c	/^typedef EGLBoolean (__cdecl *PFNSAVESURFACE)(EGLSurface surface, const TCHAR * filename);$/;"	t	file:
PHI	src/codegen/instruction.h	583;"	d
PHYSICAL_REGISTERS	src/codegen/emit.c	278;"	d	file:
PI_	redbook/torus.c	47;"	d	file:
PI_	ug/ugshape.c	30;"	d	file:
PLATFORM	tools/makedist.cmd	/^set PLATFORM=%2$/;"	v
PLATFORM	tools/makezips.cmd	/^set PLATFORM=%2$/;"	v
POINTER	redbook/varray.c	45;"	d	file:
POST_INSTALL	projects/linux-ftk/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	projects/linux-x11/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	projects/linux-ftk/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	projects/linux-x11/Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	projects/linux-ftk/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	projects/linux-x11/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	projects/linux-ftk/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	projects/linux-x11/Makefile	/^PRE_UNINSTALL = :$/;"	m
PROGRAMS	projects/linux-ftk/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PSR_c	src/codegen/arm-codegen.h	/^	armword_t PSR_c : 8;$/;"	m	struct:__anon69
PSR_f	src/codegen/arm-codegen.h	/^	armword_t PSR_f : 8;$/;"	m	struct:__anon69
PSR_s	src/codegen/arm-codegen.h	/^	armword_t PSR_s : 8;$/;"	m	struct:__anon69
PSR_x	src/codegen/arm-codegen.h	/^	armword_t PSR_x : 8;$/;"	m	struct:__anon69
PT	redbook/stroke.c	48;"	d	file:
PaintProc	test/epoc/paint.cpp	/^TAny PaintProc(CWindowGc* hdc, const TRect& aRect, TAppGlobal* data) $/;"	f
PaintProc	test/paint.cpp	/^extern "C" void PaintProc(HWND hWnd) {$/;"	f
PaletteFormat	src/ContextTexture.cpp	/^	enum PaletteFormat {$/;"	g	namespace:__anon38	file:
PaletteInvalid	src/ContextTexture.cpp	/^		PaletteInvalid = -1,$/;"	e	enum:__anon38::PaletteFormat	file:
PaletteRGB565	src/ContextTexture.cpp	/^		PaletteRGB565,$/;"	e	enum:__anon38::PaletteFormat	file:
PaletteRGB8	src/ContextTexture.cpp	/^		PaletteRGB8,$/;"	e	enum:__anon38::PaletteFormat	file:
PaletteRGBA4444	src/ContextTexture.cpp	/^		PaletteRGBA4444,$/;"	e	enum:__anon38::PaletteFormat	file:
PaletteRGBA5551	src/ContextTexture.cpp	/^		PaletteRGBA5551$/;"	e	enum:__anon38::PaletteFormat	file:
PaletteRGBA8	src/ContextTexture.cpp	/^		PaletteRGBA8,$/;"	e	enum:__anon38::PaletteFormat	file:
Pdata	redbook/stroke.c	/^CP Pdata[] = {$/;"	v
Permutation	src/RasterizerTriangles.cpp	/^	const I8 Permutation[8][3] = {$/;"	m	namespace:__anon20	file:
PixelFormat	src/Rasterizer.h	/^		enum PixelFormat {$/;"	g	class:EGL::Rasterizer
PixelFormatAlpha	src/Rasterizer.h	/^			PixelFormatAlpha$/;"	e	enum:EGL::Rasterizer::PixelFormat
PixelFormatAlpha	test/paint.cpp	19;"	d	file:
PixelFormatLuminance	src/Rasterizer.h	/^			PixelFormatLuminance,$/;"	e	enum:EGL::Rasterizer::PixelFormat
PixelFormatLuminanceAlpha	src/Rasterizer.h	/^			PixelFormatLuminanceAlpha,$/;"	e	enum:EGL::Rasterizer::PixelFormat
PixelFormatRGB	src/Rasterizer.h	/^			PixelFormatRGB,$/;"	e	enum:EGL::Rasterizer::PixelFormat
PixelFormatRGBA	src/Rasterizer.h	/^			PixelFormatRGBA,$/;"	e	enum:EGL::Rasterizer::PixelFormat
PixelStorei	src/ContextTexture.cpp	/^void Context :: PixelStorei(GLenum pname, GLint param) { $/;"	f	class:Context
PixelType	src/Rasterizer.h	/^		enum PixelType {$/;"	g	class:EGL::Rasterizer
PixelTypeUnsignedByte	src/Rasterizer.h	/^			PixelTypeUnsignedByte,$/;"	e	enum:EGL::Rasterizer::PixelType
PixelTypeUnsignedShort_4_4_4_4	src/Rasterizer.h	/^			PixelTypeUnsignedShort_4_4_4_4,$/;"	e	enum:EGL::Rasterizer::PixelType
PixelTypeUnsignedShort_5_5_5_1	src/Rasterizer.h	/^			PixelTypeUnsignedShort_5_5_5_1,$/;"	e	enum:EGL::Rasterizer::PixelType
PixelTypeUnsignedShort_5_6_5	src/Rasterizer.h	/^			PixelTypeUnsignedShort_5_6_5$/;"	e	enum:EGL::Rasterizer::PixelType
PlotDiskPoints	ug/ugshape.c	/^void PlotDiskPoints(GLfloat inner_radius, GLfloat outer_radius, GLshort rings, GLshort slices, GLfloat* v)$/;"	f
PlotSpherePoints	ug/ugshape.c	/^void PlotSpherePoints(GLfloat radius, GLint stacks, GLint slices, GLfloat* v, GLfloat* n)$/;"	f
PlotTubePoints	ug/ugshape.c	/^void PlotTubePoints(GLfloat radius, GLfloat height, GLshort stacks, GLshort slices, GLfloat* v, GLfloat* n)$/;"	f
PointFunction	src/Rasterizer.h	/^	typedef void (PointFunction)(const RasterInfo * info, const RasterPos * pos, EGL_Fixed size);$/;"	t	namespace:EGL
PointParameterf	src/ContextFloat.cpp	/^void Context :: PointParameterf(GLenum pname, GLfloat param) {$/;"	f	class:Context
PointParameterfv	src/ContextFloat.cpp	/^void Context :: PointParameterfv(GLenum pname, const GLfloat *params) {$/;"	f	class:Context
PointParameterx	src/ContextPoints.cpp	/^void Context :: PointParameterx(GLenum pname, GLfixed param) {$/;"	f	class:Context
PointParameterxv	src/ContextPoints.cpp	/^void Context :: PointParameterxv(GLenum pname, const GLfixed *params) {$/;"	f	class:Context
PointSize	src/ContextFloat.cpp	/^void Context :: PointSize (GLfloat size) {$/;"	f	class:Context
PointSizePointer	src/ContextPoints.cpp	/^void Context :: PointSizePointer(GLenum type, GLsizei stride, const GLvoid *pointer) {$/;"	f	class:Context
PointSizex	src/ContextPoints.cpp	/^void Context :: PointSizex(GLfixed size) { $/;"	f	class:Context
PointState	src/RasterizerState.h	/^			PointState() {$/;"	f	struct:EGL::RasterizerState::PointState
PointState	src/RasterizerState.h	/^			PointState(const PointState& other) {$/;"	f	struct:EGL::RasterizerState::PointState
PointState	src/RasterizerState.h	/^		struct PointState {$/;"	s	class:EGL::RasterizerState
PolygonOffset	src/ContextFloat.cpp	/^void Context :: PolygonOffset (GLfloat factor, GLfloat units) {$/;"	f	class:Context
PolygonOffsetUnitSize	src/Rasterizer.h	/^			PolygonOffsetUnitSize = 1,		\/\/ how to determine this?$/;"	e	enum:EGL::Rasterizer::__anon17
PolygonOffsetx	src/ContextRaster.cpp	/^void Context :: PolygonOffsetx(GLfixed factor, GLfixed units) { $/;"	f	class:Context
PolygonState	src/RasterizerState.h	/^			PolygonState() {$/;"	f	struct:EGL::RasterizerState::PolygonState
PolygonState	src/RasterizerState.h	/^			PolygonState(const PolygonState& other) {$/;"	f	struct:EGL::RasterizerState::PolygonState
PolygonState	src/RasterizerState.h	/^		struct PolygonState {$/;"	s	class:EGL::RasterizerState
PopMatrix	src/ContextMatrix.cpp	/^void Context :: PopMatrix(void) { $/;"	f	class:Context
PopMatrix	src/MatrixStack.cpp	/^bool MatrixStack :: PopMatrix(void) {$/;"	f	class:MatrixStack
PrepareArray	src/ContextRender.cpp	/^void Context :: PrepareArray(VertexArray & array, bool enabled, bool isColor) {$/;"	f	class:Context
PrepareFetchValues	src/Arrays.h	/^		void PrepareFetchValues(bool colorMode) {$/;"	f	struct:EGL::VertexArray
PrepareLine	src/Rasterizer.cpp	/^void Rasterizer :: PrepareLine() {$/;"	f	class:Rasterizer
PreparePoint	src/Rasterizer.cpp	/^void Rasterizer :: PreparePoint() {$/;"	f	class:Rasterizer
PrepareRendering	src/ContextRender.cpp	/^void Context :: PrepareRendering() {$/;"	f	class:Context
PrepareTexture	src/Rasterizer.cpp	/^void Rasterizer :: PrepareTexture() {$/;"	f	class:Rasterizer
PrepareTriangle	src/RasterizerTriangles.cpp	/^void Rasterizer :: PrepareTriangle() {$/;"	f	class:Rasterizer
Project	src/linalg.h	/^		inline Vec3D Project() const {$/;"	f	class:EGL::Vec4D
PushMatrix	src/ContextMatrix.cpp	/^void Context :: PushMatrix(void) { $/;"	f	class:Context
PushMatrix	src/MatrixStack.cpp	/^bool MatrixStack :: PushMatrix(void) {$/;"	f	class:MatrixStack
QueryMatrixx	src/ContextMatrix.cpp	/^GLbitfield Context :: QueryMatrixx(GLfixed mantissa[16], GLint exponent[16]) {$/;"	f	class:Context
R	src/Color.h	/^		inline U8 R() const {$/;"	f	class:EGL::Color
RANLIB	projects/linux-ftk/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	projects/linux-x11/Makefile	/^RANLIB = ranlib$/;"	m
RET	src/codegen/instruction.h	606;"	d
RET_VALUE	src/codegen/instruction.h	613;"	d
RGB2Color	src/ContextTexture.cpp	/^	struct RGB2Color {$/;"	s	namespace:__anon24	file:
RGB5652Color	src/ContextTexture.cpp	/^	struct RGB5652Color {$/;"	s	namespace:__anon24	file:
RGBA2Color	src/ContextTexture.cpp	/^	struct RGBA2Color {$/;"	s	namespace:__anon24	file:
RGBA44442Color	src/ContextTexture.cpp	/^	struct RGBA44442Color {$/;"	s	namespace:__anon24	file:
RGBA55512Color	src/ContextTexture.cpp	/^	struct RGBA55512Color {$/;"	s	namespace:__anon24	file:
ROOT	tools/allzips.cmd	/^set ROOT=%1$/;"	v
ROOT	tools/makedist.cmd	/^set ROOT=%1$/;"	v
ROOT	tools/makezips.cmd	/^set ROOT=%1$/;"	v
ROUND	src/codegen/instruction.h	446;"	d
ROUND_S	src/codegen/instruction.h	464;"	d
ROWS	src/linalg.h	/^			ROWS = 4,			\/\/ number of rows per matrix$/;"	e	enum:EGL::Matrix4x4::__anon43
RasterInfo	src/Rasterizer.h	/^	struct RasterInfo {$/;"	s	namespace:EGL
RasterLine	src/Rasterizer.cpp	/^void Rasterizer :: RasterLine(RasterPos& p_from, RasterPos& p_to) {$/;"	f	class:Rasterizer
RasterLine	src/Rasterizer.h	/^	inline void Rasterizer :: RasterLine(RasterPos& p_from, RasterPos& p_to) {$/;"	f	class:EGL::Rasterizer
RasterPoint	src/Rasterizer.cpp	/^void Rasterizer :: RasterPoint(const RasterPos& point, EGL_Fixed size) {$/;"	f	class:Rasterizer
RasterPoint	src/Rasterizer.h	/^	inline void Rasterizer :: RasterPoint(const RasterPos& point, EGL_Fixed size) {$/;"	f	class:EGL::Rasterizer
RasterPos	src/Rasterizer.h	/^	struct RasterPos {$/;"	s	namespace:EGL
RasterScanLine	src/Rasterizer.h	/^	inline void Rasterizer :: RasterScanLine(RasterInfo & rasterInfo, const EdgePos & start, const EdgePos & end) {$/;"	f	class:EGL::Rasterizer
RasterScanLine	src/RasterizerTriangles.cpp	/^inline void Rasterizer :: RasterScanLine(RasterInfo & rasterInfo, const EdgePos & start, const EdgePos & delta) {$/;"	f	class:Rasterizer
RasterTriangle	src/Rasterizer.h	/^	inline void Rasterizer :: RasterTriangle(const RasterPos& a, const RasterPos& b, const RasterPos& c) {$/;"	f	class:EGL::Rasterizer
RasterTriangle	src/RasterizerTriangles.cpp	420;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	438;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	456;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	474;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	492;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	510;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	528;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	546;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	564;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	582;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	600;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	618;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	636;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	654;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	672;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	690;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	708;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	726;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	744;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	762;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	780;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	798;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	816;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	834;"	d	file:
RasterTriangle	src/RasterizerTriangles.cpp	852;"	d	file:
RasterTriangleBits	src/Rasterizer.h	/^		enum RasterTriangleBits {$/;"	g	class:EGL::Rasterizer
RasterTriangleColor	src/Rasterizer.h	/^			RasterTriangleColor,$/;"	e	enum:EGL::Rasterizer::RasterTriangleBits
RasterTriangleCount	src/Rasterizer.h	/^			RasterTriangleCount,$/;"	e	enum:EGL::Rasterizer::RasterTriangleBits
RasterTriangleDepth	src/Rasterizer.h	/^			RasterTriangleDepth,$/;"	e	enum:EGL::Rasterizer::RasterTriangleBits
RasterTriangleFog	src/Rasterizer.h	/^			RasterTriangleFog,$/;"	e	enum:EGL::Rasterizer::RasterTriangleBits
RasterTriangleFunction	src/Rasterizer.h	/^		typedef void (Rasterizer::*RasterTriangleFunction)(const RasterPos& a, const RasterPos& b,$/;"	t	class:EGL::Rasterizer
RasterTriangleScissor	src/Rasterizer.h	/^			RasterTriangleScissor,$/;"	e	enum:EGL::Rasterizer::RasterTriangleBits
RasterTriangleStencil	src/Rasterizer.h	/^			RasterTriangleStencil,$/;"	e	enum:EGL::Rasterizer::RasterTriangleBits
RasterTriangleTexture	src/Rasterizer.h	/^			RasterTriangleTexture,$/;"	e	enum:EGL::Rasterizer::RasterTriangleBits
Rasterizer	src/Rasterizer.cpp	/^Rasterizer :: Rasterizer(RasterizerState * state):$/;"	f	class:Rasterizer
Rasterizer	src/Rasterizer.h	/^	class Rasterizer {$/;"	c	namespace:EGL
RasterizerState	src/RasterizerState.cpp	/^RasterizerState :: RasterizerState():$/;"	f	class:RasterizerState
RasterizerState	src/RasterizerState.h	/^	class RasterizerState {$/;"	c	namespace:EGL
Rdata	redbook/stroke.c	/^CP Rdata[] = {$/;"	v
ReadPixels	src/ContextTexture.cpp	/^void Context :: ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, $/;"	f	class:Context
RebuildMatrices	src/ContextMatrix.cpp	/^void Context :: RebuildMatrices(void) {$/;"	f	class:Context
RecordError	src/Context.cpp	/^void Context :: RecordError(GLenum error) {$/;"	f	class:Context
Rect	src/Types.h	/^		Rect(GLint _x = 0, GLint _y = 0, GLsizei _width = 0, GLsizei _height = 0): $/;"	f	struct:EGL::Rect
Rect	src/Types.h	/^	struct Rect {$/;"	s	namespace:EGL
Red	src/RasterizerState.h	/^			bool				Red;	\/\/ if true, write red channel$/;"	m	struct:EGL::RasterizerState::MaskState
RefCount	src/WinCE/egl.cpp	/^static EGLint  RefCount = 0;$/;"	v	file:
RefCount	src/linux-ftk/egl.cpp	/^static EGLint  RefCount = 0;$/;"	v	file:
RefCount	src/linux-x11/egl.cpp	/^static EGLint  RefCount = 0;$/;"	v	file:
RefCount	src/win/egl.cpp	/^static EGLint  RefCount = 0;$/;"	v	file:
Reference	src/RasterizerState.h	/^			EGL_Fixed			Reference;$/;"	m	struct:EGL::RasterizerState::AlphaState
Reference	src/RasterizerState.h	/^			I32					Reference;$/;"	m	struct:EGL::RasterizerState::StencilState
RenderLine	src/ContextLines.cpp	/^void Context :: RenderLine(RasterPos& from, RasterPos& to) {$/;"	f	class:Context
RenderLineLoop	src/ContextLines.cpp	/^void Context :: RenderLineLoop(GLint first, GLsizei count) {$/;"	f	class:Context
RenderLineLoop	src/ContextLines.cpp	/^void Context :: RenderLineLoop(GLsizei count, const GLubyte * indices) {$/;"	f	class:Context
RenderLineLoop	src/ContextLines.cpp	/^void Context :: RenderLineLoop(GLsizei count, const GLushort * indices) {$/;"	f	class:Context
RenderLineStrip	src/ContextLines.cpp	/^void Context :: RenderLineStrip(GLint first, GLsizei count) {$/;"	f	class:Context
RenderLineStrip	src/ContextLines.cpp	/^void Context :: RenderLineStrip(GLsizei count, const GLubyte * indices) {$/;"	f	class:Context
RenderLineStrip	src/ContextLines.cpp	/^void Context :: RenderLineStrip(GLsizei count, const GLushort * indices) {$/;"	f	class:Context
RenderLines	src/ContextLines.cpp	/^void Context :: RenderLines(GLint first, GLsizei count) {$/;"	f	class:Context
RenderLines	src/ContextLines.cpp	/^void Context :: RenderLines(GLsizei count, const GLubyte * indices) {$/;"	f	class:Context
RenderLines	src/ContextLines.cpp	/^void Context :: RenderLines(GLsizei count, const GLushort * indices) {$/;"	f	class:Context
RenderPoint	src/ContextPoints.cpp	/^void Context :: RenderPoint(RasterPos& point, EGL_Fixed size) {$/;"	f	class:Context
RenderPoints	src/ContextPoints.cpp	/^void Context :: RenderPoints(GLint first, GLsizei count) {$/;"	f	class:Context
RenderPoints	src/ContextPoints.cpp	/^void Context :: RenderPoints(GLsizei count, const GLubyte * indices) {$/;"	f	class:Context
RenderPoints	src/ContextPoints.cpp	/^void Context :: RenderPoints(GLsizei count, const GLushort * indices) {$/;"	f	class:Context
RenderTriangle	src/ContextTriangles.cpp	/^void Context :: RenderTriangle(RasterPos& a, RasterPos& b, RasterPos& c) {$/;"	f	class:Context
RenderTriangleFan	src/ContextTriangles.cpp	/^void Context :: RenderTriangleFan(GLint first, GLsizei count) {$/;"	f	class:Context
RenderTriangleFan	src/ContextTriangles.cpp	/^void Context :: RenderTriangleFan(GLsizei count, const GLubyte * indices) {$/;"	f	class:Context
RenderTriangleFan	src/ContextTriangles.cpp	/^void Context :: RenderTriangleFan(GLsizei count, const GLushort * indices) {$/;"	f	class:Context
RenderTriangleStrip	src/ContextTriangles.cpp	/^void Context :: RenderTriangleStrip(GLint first, GLsizei count) {$/;"	f	class:Context
RenderTriangleStrip	src/ContextTriangles.cpp	/^void Context :: RenderTriangleStrip(GLsizei count, const GLubyte * indices) {$/;"	f	class:Context
RenderTriangleStrip	src/ContextTriangles.cpp	/^void Context :: RenderTriangleStrip(GLsizei count, const GLushort * indices) {$/;"	f	class:Context
RenderTriangles	src/ContextTriangles.cpp	/^void Context :: RenderTriangles(GLint first, GLsizei count) {$/;"	f	class:Context
RenderTriangles	src/ContextTriangles.cpp	/^void Context :: RenderTriangles(GLsizei count, const GLubyte * indices) {$/;"	f	class:Context
RenderTriangles	src/ContextTriangles.cpp	/^void Context :: RenderTriangles(GLsizei count, const GLushort * indices) {$/;"	f	class:Context
Rotatef	src/ContextFloat.cpp	/^void Context :: Rotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {$/;"	f	class:Context
Rotatex	src/ContextMatrix.cpp	/^void Context :: Rotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { $/;"	f	class:Context
Round	src/ContextTriangles.cpp	/^	inline EGL_Fixed Round(EGL_Fixed value) {$/;"	f	namespace:__anon13
SAVE_AREA_SIZE	src/codegen/emit.c	38;"	d	file:
SED	projects/linux-ftk/Makefile	/^SED = \/bin\/sed$/;"	m
SED	projects/linux-x11/Makefile	/^SED = \/bin\/sed$/;"	m
SET_COORDINATE	src/ContextTriangles.cpp	502;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	506;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	512;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	516;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	522;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	526;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	532;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	536;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	542;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	546;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	552;"	d	file:
SET_COORDINATE	src/ContextTriangles.cpp	556;"	d	file:
SET_MAKE	projects/linux-ftk/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	projects/linux-x11/Makefile	/^SET_MAKE = $/;"	m
SHELL	projects/linux-ftk/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	projects/linux-x11/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHMPIXMAP	src/linux-x11/Surface.h	61;"	d
SHMSTD	src/linux-x11/Surface.h	60;"	d
SIZE	test/epoc/paint.cpp	1173;"	d	file:
SIZE	test/paint.cpp	1293;"	d	file:
SIZE_TEXTURE	src/arm/CodeGenerator.h	179;"	d
SOLVE_PARAM_XY	src/RasterizerTriangles.cpp	128;"	d	file:
SOLVE_XY	src/RasterizerTriangles.cpp	141;"	d	file:
SOURCES	projects/linux-ftk/Makefile	/^SOURCES = $(libvincent_la_SOURCES) $(lines_SOURCES)$/;"	m
SOURCES	projects/linux-x11/Makefile	/^SOURCES = $(libvincent_la_SOURCES)$/;"	m
STB	src/codegen/instruction.h	545;"	d
STDC_HEADERS	projects/linux-ftk/confdefs.h	8;"	d
STDC_HEADERS	projects/linux-ftk/linux-config.h	60;"	d
STDC_HEADERS	projects/linux-x11/linux-config.h	66;"	d
STH	src/codegen/instruction.h	546;"	d
STRIKENUM_MAX	ug/ug_win32.c	546;"	d	file:
STRIP	projects/linux-ftk/Makefile	/^STRIP = strip$/;"	m
STRIP	projects/linux-x11/Makefile	/^STRIP = strip$/;"	m
STROKE	redbook/stroke.c	49;"	d	file:
STW	src/codegen/instruction.h	547;"	d
SUB	src/codegen/instruction.h	484;"	d
SUB_S	src/codegen/instruction.h	512;"	d
SWAP_ROWS	src/linalg.cpp	124;"	d	file:
SampleCoverage	src/ContextFloat.cpp	/^void Context :: SampleCoverage (GLclampf value, GLboolean invert) {$/;"	f	class:Context
SampleCoveragex	src/ContextRaster.cpp	/^void Context :: SampleCoveragex(GLclampx value, GLboolean invert) { $/;"	f	class:Context
Save	src/WinCE/Surface.cpp	/^bool Surface :: Save(const TCHAR * filename) {$/;"	f	class:Surface
Save	src/linux-ftk/Surface.cpp	/^bool Surface::Save(const char *filename)$/;"	f	class:Surface
Save	src/linux-x11/Surface.cpp	/^bool Surface::Save(const char *filename)$/;"	f	class:Surface
Save	src/win/Surface.cpp	/^bool Surface :: Save(const TCHAR * filename) {$/;"	f	class:Surface
ScaleAlpha	src/RasterizerState.h	/^			EGL_Fixed				ScaleRGB, ScaleAlpha;$/;"	m	struct:EGL::RasterizerState::TextureState
ScaleRGB	src/RasterizerState.h	/^			EGL_Fixed				ScaleRGB, ScaleAlpha;$/;"	m	struct:EGL::RasterizerState::TextureState
Scalef	src/ContextFloat.cpp	/^void Context :: Scalef (GLfloat x, GLfloat y, GLfloat z) {$/;"	f	class:Context
Scalex	src/ContextMatrix.cpp	/^void Context :: Scalex(GLfixed x, GLfixed y, GLfixed z) { $/;"	f	class:Context
ScanlineFunction	src/Rasterizer.h	/^	typedef void (ScanlineFunction)(const RasterInfo * info, const EdgePos * start, const EdgePos * end);$/;"	t	namespace:EGL
Scissor	src/ContextViewport.cpp	/^void Context :: Scissor(GLint x, GLint y, GLsizei width, GLsizei height) { $/;"	f	class:Context
ScissorTestState	src/RasterizerState.h	/^			ScissorTestState() {$/;"	f	struct:EGL::RasterizerState::ScissorTestState
ScissorTestState	src/RasterizerState.h	/^			ScissorTestState(const ScissorTestState& other) {$/;"	f	struct:EGL::RasterizerState::ScissorTestState
ScissorTestState	src/RasterizerState.h	/^		struct ScissorTestState {$/;"	s	class:EGL::RasterizerState
ScreenCoord	src/Rasterizer.h	/^	struct ScreenCoord {$/;"	s	namespace:EGL
Sdata	redbook/stroke.c	/^CP Sdata[] = {$/;"	v
SelectArrayElement	src/ContextRender.cpp	/^void Context :: SelectArrayElement(int index) {$/;"	f	class:Context
SelectPointSizeArrayElement	src/ContextPoints.cpp	/^inline EGL_Fixed Context :: SelectPointSizeArrayElement(int index) {$/;"	f	class:Context
SetAlphaFunc	src/RasterizerState.h	/^	inline void RasterizerState :: SetAlphaFunc(ComparisonFunc func, EGL_Fixed ref) {$/;"	f	class:EGL::RasterizerState
SetAmbientColor	src/Light.cpp	/^void Light :: SetAmbientColor(const FractionalColor & color) {$/;"	f	class:Light
SetAmbientColor	src/Material.cpp	/^void Material :: SetAmbientColor(const FractionalColor & color) {$/;"	f	class:Material
SetArrays	test/epoc/paint.cpp	/^void SetArrays(GLfixed vertexArray[][3], GLfixed normalArray[][3], GLfixed textureArray[][2], GLuint buffers[3]) {$/;"	f
SetArrays	test/paint.cpp	/^void SetArrays(GLfixed vertexArray[][3], GLfixed normalArray[][3], GLfixed textureArray[][2]) {$/;"	f
SetBlendFunc	src/RasterizerState.h	/^	inline void RasterizerState :: SetBlendFunc(BlendFuncSrc sfactor, BlendFuncDst dfactor) {$/;"	f	class:EGL::RasterizerState
SetColorMask	src/RasterizerState.h	/^	inline void RasterizerState :: SetColorMask(bool red, bool green, bool blue, bool alpha) {$/;"	f	class:EGL::RasterizerState
SetConfigAttrib	src/Config.cpp	/^void Config :: SetConfigAttrib(EGLint attribute, EGLint value) {$/;"	f	class:Config
SetConfigAttrib	src/Epoc/ConfigEpoc.cpp	/^void Config :: SetConfigAttrib(EGLint attribute, EGLint value) {$/;"	f	class:Config
SetConstantAttenuation	src/Light.cpp	/^void Light :: SetConstantAttenuation(EGL_Fixed attenuation) {$/;"	f	class:Light
SetCurrent	src/Context.cpp	/^void Context :: SetCurrent(bool current) {$/;"	f	class:Context
SetCurrentContext	src/Epoc/ContextEpoc.cpp	/^void Context :: SetCurrentContext(Context * context) {$/;"	f	class:Context
SetCurrentContext	src/Epoc/Surface.cpp	/^void Surface :: SetCurrentContext(Context * context) {$/;"	f	class:Surface
SetCurrentContext	src/WinCE/ContextWinCE.cpp	/^void Context :: SetCurrentContext(Context * context) {$/;"	f	class:Context
SetCurrentContext	src/WinCE/Surface.cpp	/^void Surface :: SetCurrentContext(Context * context) {$/;"	f	class:Surface
SetCurrentContext	src/linux-ftk/ContextLinux.cpp	/^void Context :: SetCurrentContext(Context * context) $/;"	f	class:Context
SetCurrentContext	src/linux-ftk/Surface.cpp	/^void Surface :: SetCurrentContext(Context * context) $/;"	f	class:Surface
SetCurrentContext	src/linux-x11/ContextLinux.cpp	/^void Context :: SetCurrentContext(Context * context) $/;"	f	class:Context
SetCurrentContext	src/linux-x11/Surface.cpp	/^void Surface :: SetCurrentContext(Context * context) $/;"	f	class:Surface
SetCurrentContext	src/win/ContextWin.cpp	/^void Context :: SetCurrentContext(Context * context) {$/;"	f	class:Context
SetCurrentContext	src/win/Surface.cpp	/^void Surface :: SetCurrentContext(Context * context) {$/;"	f	class:Surface
SetDepthFunc	src/RasterizerState.h	/^	inline void RasterizerState :: SetDepthFunc(ComparisonFunc func) {$/;"	f	class:EGL::RasterizerState
SetDepthMask	src/RasterizerState.h	/^	inline void RasterizerState :: SetDepthMask(bool flag) {$/;"	f	class:EGL::RasterizerState
SetDiffuseColor	src/Light.cpp	/^void Light :: SetDiffuseColor(const FractionalColor & color) {$/;"	f	class:Light
SetDiffuseColor	src/Material.cpp	/^void Material :: SetDiffuseColor(const FractionalColor & color) {$/;"	f	class:Material
SetDirection	src/Light.cpp	/^void Light :: SetDirection(const Vec3D & direction) {$/;"	f	class:Light
SetDrawSurface	src/Context.cpp	/^void Context :: SetDrawSurface(EGL::Surface * surface) {$/;"	f	class:Context
SetEmissiveColor	src/Material.cpp	/^void Material :: SetEmissiveColor(const FractionalColor & color) {$/;"	f	class:Material
SetFogColor	src/RasterizerState.h	/^	inline void RasterizerState :: SetFogColor(const Color& color) {$/;"	f	class:EGL::RasterizerState
SetIndex	src/Arrays.h	/^			void SetIndex(size_t index) {$/;"	f	struct:EGL::ObjectArray::ObjectRecord
SetInternalFormat	src/RasterizerState.h	/^	inline void RasterizerState :: SetInternalFormat(size_t unit, TextureFormat format) {$/;"	f	class:EGL::RasterizerState
SetLineSmoothEnabled	src/RasterizerState.h	/^	inline void RasterizerState :: SetLineSmoothEnabled(bool enabled) {$/;"	f	class:EGL::RasterizerState
SetLineWidth	src/RasterizerState.h	/^	inline void RasterizerState :: SetLineWidth(EGL_Fixed width) {$/;"	f	class:EGL::RasterizerState
SetLinearAttenuation	src/Light.cpp	/^void Light :: SetLinearAttenuation(EGL_Fixed attenuation) {$/;"	f	class:Light
SetLogicOp	src/RasterizerState.h	/^	inline void RasterizerState :: SetLogicOp(LogicOp opcode) {$/;"	f	class:EGL::RasterizerState
SetMagFilterMode	src/RasterizerState.h	/^	inline void RasterizerState :: SetMagFilterMode(size_t unit, FilterMode mode) {$/;"	f	class:EGL::RasterizerState
SetMagFilterMode	src/Texture.h	/^		void SetMagFilterMode(RasterizerState::FilterMode mode)		{ m_MagFilterMode = mode; }$/;"	f	class:EGL::MultiTexture
SetMinFilterMode	src/RasterizerState.h	/^	inline void RasterizerState :: SetMinFilterMode(size_t unit, FilterMode mode) {$/;"	f	class:EGL::RasterizerState
SetMinFilterMode	src/Texture.h	/^		void SetMinFilterMode(RasterizerState::FilterMode mode)		{ m_MinFilterMode = mode; }$/;"	f	class:EGL::MultiTexture
SetMipmapFilterMode	src/RasterizerState.h	/^	inline void RasterizerState :: SetMipmapFilterMode(size_t unit, FilterMode mode) {$/;"	f	class:EGL::RasterizerState
SetMipmapFilterMode	src/Texture.h	/^		void SetMipmapFilterMode(RasterizerState::FilterMode mode)	{ m_MipmapFilterMode = mode; }$/;"	f	class:EGL::MultiTexture
SetNil	src/Arrays.h	/^			void SetNil() {$/;"	f	struct:EGL::ObjectArray::ObjectRecord
SetPointCoordReplaceEnabled	src/RasterizerState.h	/^	inline void RasterizerState :: SetPointCoordReplaceEnabled(size_t unit, bool enabled) {$/;"	f	class:EGL::RasterizerState
SetPointSmoothEnabled	src/RasterizerState.h	/^	inline void RasterizerState :: SetPointSmoothEnabled(bool enabled) {$/;"	f	class:EGL::RasterizerState
SetPointSpriteEnabled	src/RasterizerState.h	/^	inline void RasterizerState :: SetPointSpriteEnabled(bool enabled) {$/;"	f	class:EGL::RasterizerState
SetPointer	src/Arrays.h	/^			void SetPointer(ELEMENT * texture) {$/;"	f	struct:EGL::ObjectArray::ObjectRecord
SetPolygonOffset	src/RasterizerState.h	/^	inline void RasterizerState :: SetPolygonOffset(EGL_Fixed factor, EGL_Fixed units) {$/;"	f	class:EGL::RasterizerState
SetPosition	src/Light.cpp	/^void Light :: SetPosition(const Vec4D & position) {$/;"	f	class:Light
SetQuadraticAttenuation	src/Light.cpp	/^void Light :: SetQuadraticAttenuation(EGL_Fixed attenuation) {$/;"	f	class:Light
SetReadSurface	src/Context.cpp	/^void Context :: SetReadSurface(EGL::Surface * surface) {$/;"	f	class:Context
SetSampleCoverage	src/RasterizerState.h	/^	inline void RasterizerState :: SetSampleCoverage(EGL_Fixed value, bool invert) {$/;"	f	class:EGL::RasterizerState
SetScissor	src/RasterizerState.h	/^	inline void RasterizerState :: SetScissor(I32 x, I32 y, U32 width, U32 height) {$/;"	f	class:EGL::RasterizerState
SetShadeModel	src/RasterizerState.h	/^	inline void RasterizerState :: SetShadeModel(ShadingModel mode) {$/;"	f	class:EGL::RasterizerState
SetSpecularColor	src/Light.cpp	/^void Light :: SetSpecularColor(const FractionalColor & color) {$/;"	f	class:Light
SetSpecularColor	src/Material.cpp	/^void Material :: SetSpecularColor(const FractionalColor & color) {$/;"	f	class:Material
SetSpecularExponent	src/Material.cpp	/^void Material :: SetSpecularExponent(EGL_Fixed exponent) {$/;"	f	class:Material
SetSpotCutoff	src/Light.cpp	/^void Light :: SetSpotCutoff(EGL_Fixed cutoff) {$/;"	f	class:Light
SetSpotExponent	src/Light.cpp	/^void Light :: SetSpotExponent(EGL_Fixed exponent) {$/;"	f	class:Light
SetState	src/Rasterizer.cpp	/^void Rasterizer :: SetState(RasterizerState * state) {$/;"	f	class:Rasterizer
SetState	src/arm/CodeGenerator.h	/^		void SetState(const RasterizerState * state)	{ m_State = state; }$/;"	f	class:EGL::CodeGenerator
SetStencilFunc	src/RasterizerState.h	/^	inline void RasterizerState :: SetStencilFunc(ComparisonFunc func, I32 ref, U32 mask) {$/;"	f	class:EGL::RasterizerState
SetStencilMask	src/RasterizerState.h	/^	inline void RasterizerState :: SetStencilMask(U32 mask) {$/;"	f	class:EGL::RasterizerState
SetStencilOp	src/RasterizerState.h	/^	inline void RasterizerState :: SetStencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass) {$/;"	f	class:EGL::RasterizerState
SetSurface	src/Rasterizer.h	/^	inline void Rasterizer :: SetSurface(Surface * surface) {$/;"	f	class:EGL::Rasterizer
SetTexEnvColor	src/RasterizerState.h	/^	inline void RasterizerState :: SetTexEnvColor(size_t unit, const Color& color) {$/;"	f	class:EGL::RasterizerState
SetTexture	src/Rasterizer.cpp	/^void Rasterizer :: SetTexture(size_t unit, MultiTexture * texture) {$/;"	f	class:Rasterizer
SetTextureCombineFuncAlpha	src/RasterizerState.h	/^	inline void RasterizerState :: SetTextureCombineFuncAlpha(size_t unit, TextureModeCombineFunc func) {$/;"	f	class:EGL::RasterizerState
SetTextureCombineFuncRGB	src/RasterizerState.h	/^	inline void RasterizerState :: SetTextureCombineFuncRGB(size_t unit, TextureModeCombineFunc func) {$/;"	f	class:EGL::RasterizerState
SetTextureCombineOpAlpha	src/RasterizerState.h	/^	inline void RasterizerState :: SetTextureCombineOpAlpha(size_t unit, size_t idx, TextureCombineOp op) {$/;"	f	class:EGL::RasterizerState
SetTextureCombineOpRGB	src/RasterizerState.h	/^	inline void RasterizerState :: SetTextureCombineOpRGB(size_t unit, size_t idx, TextureCombineOp op) {$/;"	f	class:EGL::RasterizerState
SetTextureCombineSrcAlpha	src/RasterizerState.h	/^	inline void RasterizerState :: SetTextureCombineSrcAlpha(size_t unit, size_t idx, TextureCombineSrc src) {$/;"	f	class:EGL::RasterizerState
SetTextureCombineSrcRGB	src/RasterizerState.h	/^	inline void RasterizerState :: SetTextureCombineSrcRGB(size_t unit, size_t idx, TextureCombineSrc src) {$/;"	f	class:EGL::RasterizerState
SetTextureMode	src/RasterizerState.h	/^	inline void RasterizerState :: SetTextureMode(size_t unit, TextureMode mode) {$/;"	f	class:EGL::RasterizerState
SetTextureScaleAlpha	src/RasterizerState.h	/^	inline void RasterizerState :: SetTextureScaleAlpha(size_t unit, EGL_Fixed scale) {$/;"	f	class:EGL::RasterizerState
SetTextureScaleRGB	src/RasterizerState.h	/^	inline void RasterizerState :: SetTextureScaleRGB(size_t unit, EGL_Fixed scale) {$/;"	f	class:EGL::RasterizerState
SetWrappingModeS	src/RasterizerState.h	/^	inline void RasterizerState :: SetWrappingModeS(size_t unit, WrappingMode mode) {$/;"	f	class:EGL::RasterizerState
SetWrappingModeS	src/Texture.h	/^		void SetWrappingModeS(RasterizerState::WrappingMode mode)	{ m_WrappingModeS = mode; }$/;"	f	class:EGL::MultiTexture
SetWrappingModeT	src/RasterizerState.h	/^	inline void RasterizerState :: SetWrappingModeT(size_t unit, WrappingMode mode) {$/;"	f	class:EGL::RasterizerState
SetWrappingModeT	src/Texture.h	/^		void SetWrappingModeT(RasterizerState::WrappingMode mode)	{ m_WrappingModeT = mode; }$/;"	f	class:EGL::MultiTexture
ShadeModel	src/ContextRaster.cpp	/^void Context :: ShadeModel(GLenum mode) { $/;"	f	class:Context
ShadeModelFlat	src/RasterizerState.h	/^			ShadeModelFlat,$/;"	e	enum:EGL::RasterizerState::ShadingModel
ShadeModelInvalid	src/RasterizerState.h	/^			ShadeModelInvalid = -1,$/;"	e	enum:EGL::RasterizerState::ShadingModel
ShadeModelSmooth	src/RasterizerState.h	/^			ShadeModelSmooth$/;"	e	enum:EGL::RasterizerState::ShadingModel
ShadingModel	src/RasterizerState.h	/^		enum ShadingModel {$/;"	g	class:EGL::RasterizerState
ShowBitmap	test/epoc/appview.cpp	/^void CAppView::ShowBitmap()$/;"	f	class:CAppView
ShowTest	test/epoc/appview.cpp	/^void CAppView::ShowTest()$/;"	f	class:CAppView
ShutdownOpenGL	test/epoc/paint.cpp	/^TAny ShutdownOpenGL(TAppGlobal* data)$/;"	f
SignedVal	src/Rasterizer.cpp	/^	inline I16 SignedVal(U8 in) {$/;"	f	namespace:__anon41
SignedVal	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: SignedVal(cg_block_t * block, cg_virtual_reg_t * value) {$/;"	f	class:CodeGenerator
SmoothEnabled	src/RasterizerState.h	/^			bool				SmoothEnabled;$/;"	m	struct:EGL::RasterizerState::LineState
SmoothEnabled	src/RasterizerState.h	/^			bool				SmoothEnabled;$/;"	m	struct:EGL::RasterizerState::PointState
SortPermutation	src/RasterizerTriangles.cpp	/^	inline const I8 * SortPermutation(I32 x0, I32 x1, I32 x2) {$/;"	f	namespace:__anon20
SpriteEnabled	src/RasterizerState.h	/^			bool				SpriteEnabled;$/;"	m	struct:EGL::RasterizerState::PointState
StencilBuffer	src/Rasterizer.h	/^		U32 *		StencilBuffer;$/;"	m	struct:EGL::RasterInfo
StencilFunc	src/ContextRaster.cpp	/^void Context :: StencilFunc(GLenum func, GLint ref, GLuint mask) {$/;"	f	class:Context
StencilMask	src/ContextRaster.cpp	/^void Context :: StencilMask(GLuint mask) { $/;"	f	class:Context
StencilOp	src/ContextRaster.cpp	/^void Context :: StencilOp(GLenum fail, GLenum zfail, GLenum zpass) {$/;"	f	class:Context
StencilOp	src/RasterizerState.h	/^		enum StencilOp {$/;"	g	class:EGL::RasterizerState
StencilOpDecr	src/RasterizerState.h	/^			StencilOpDecr,$/;"	e	enum:EGL::RasterizerState::StencilOp
StencilOpFromEnum	src/ContextRaster.cpp	/^	RasterizerState::StencilOp StencilOpFromEnum(GLenum op) {$/;"	f	namespace:__anon50
StencilOpIncr	src/RasterizerState.h	/^			StencilOpIncr,$/;"	e	enum:EGL::RasterizerState::StencilOp
StencilOpInvalid	src/RasterizerState.h	/^			StencilOpInvalid = -1,$/;"	e	enum:EGL::RasterizerState::StencilOp
StencilOpInvert	src/RasterizerState.h	/^			StencilOpInvert$/;"	e	enum:EGL::RasterizerState::StencilOp
StencilOpKeep	src/RasterizerState.h	/^			StencilOpKeep,$/;"	e	enum:EGL::RasterizerState::StencilOp
StencilOpReplace	src/RasterizerState.h	/^			StencilOpReplace,$/;"	e	enum:EGL::RasterizerState::StencilOp
StencilOpZero	src/RasterizerState.h	/^			StencilOpZero,$/;"	e	enum:EGL::RasterizerState::StencilOp
StencilState	src/RasterizerState.h	/^			StencilState() {$/;"	f	struct:EGL::RasterizerState::StencilState
StencilState	src/RasterizerState.h	/^			StencilState(const StencilState& other) {$/;"	f	struct:EGL::RasterizerState::StencilState
StencilState	src/RasterizerState.h	/^		struct StencilState {$/;"	s	class:EGL::RasterizerState
Sub	src/arm/CodeGenerator.cpp	/^cg_virtual_reg_t * CodeGenerator :: Sub(cg_block_t * block, cg_virtual_reg_t * first, cg_virtual_reg_t * second) {$/;"	f	class:CodeGenerator
SubU8	src/Rasterizer.cpp	/^	inline U8 SubU8(U8 arg0, U8 arg1) {$/;"	f	namespace:__anon41
SubU8	src/Rasterizer.cpp	/^	inline U8 SubU8(U8 arg0, U8 arg1, EGL_Fixed scale) {$/;"	f	namespace:__anon41
Surface	src/Epoc/Surface.cpp	/^Surface :: Surface() {$/;"	f	class:Surface
Surface	src/Epoc/Surface.h	/^	class Surface: public CBase {$/;"	c	namespace:EGL
Surface	src/WinCE/Surface.cpp	/^Surface :: Surface(const Config & config, HDC hdc)$/;"	f	class:Surface
Surface	src/WinCE/Surface.h	/^	class Surface {$/;"	c	namespace:EGL
Surface	src/linux-ftk/Surface.cpp	/^Surface :: Surface(const Config & config, NativeDisplayType display, NativeWindowType win)$/;"	f	class:Surface
Surface	src/linux-ftk/Surface.h	/^	class Surface {$/;"	c	namespace:EGL
Surface	src/linux-x11/Surface.cpp	/^Surface :: Surface(const Config & config, NativeDisplayType hdc)$/;"	f	class:Surface
Surface	src/linux-x11/Surface.h	/^	class Surface {$/;"	c	namespace:EGL
Surface	src/win/Surface.cpp	/^Surface :: Surface(const Config & config, HDC hdc)$/;"	f	class:Surface
Surface	src/win/Surface.h	/^	class Surface {$/;"	c	namespace:EGL
SurfaceHeight	src/Rasterizer.h	/^		I32			SurfaceHeight;$/;"	m	struct:EGL::RasterInfo
SurfaceWidth	src/Rasterizer.h	/^		I32			SurfaceWidth;$/;"	m	struct:EGL::RasterInfo
TARGETS	redbook/Makefile	/^TARGETS = $(subst .c,.exe,$(CFILES))$/;"	m
TAppGlobal	test/epoc/appglobal.h	/^    TAppGlobal(): angle(30.0f) {};$/;"	f	struct:TAppGlobal
TAppGlobal	test/epoc/appglobal.h	/^struct TAppGlobal$/;"	s
TEXTURE_BUFFER	test/epoc/paint.cpp	1111;"	d	file:
TEXTURE_BUFFER	test/paint.cpp	1231;"	d	file:
THUMBOP_ADC	src/codegen/arm-codegen.h	/^	THUMBOP_ADC  = 5,$/;"	e	enum:__anon71
THUMBOP_ADD	src/codegen/arm-codegen.h	/^	THUMBOP_ADD  = 18,$/;"	e	enum:__anon71
THUMBOP_AND	src/codegen/arm-codegen.h	/^	THUMBOP_AND  = 0,$/;"	e	enum:__anon71
THUMBOP_ASR	src/codegen/arm-codegen.h	/^	THUMBOP_ASR  = 4,$/;"	e	enum:__anon71
THUMBOP_BIC	src/codegen/arm-codegen.h	/^	THUMBOP_BIC  = 14,$/;"	e	enum:__anon71
THUMBOP_CMN	src/codegen/arm-codegen.h	/^	THUMBOP_CMN  = 11,$/;"	e	enum:__anon71
THUMBOP_CMP	src/codegen/arm-codegen.h	/^	THUMBOP_CMP  = 10,$/;"	e	enum:__anon71
THUMBOP_CMPH	src/codegen/arm-codegen.h	/^	THUMBOP_CMPH = 19,$/;"	e	enum:__anon71
THUMBOP_CMPI	src/codegen/arm-codegen.h	/^	THUMBOP_CMPI = 17,$/;"	e	enum:__anon71
THUMBOP_EOR	src/codegen/arm-codegen.h	/^	THUMBOP_EOR  = 1,$/;"	e	enum:__anon71
THUMBOP_LSL	src/codegen/arm-codegen.h	/^	THUMBOP_LSL  = 2,$/;"	e	enum:__anon71
THUMBOP_LSR	src/codegen/arm-codegen.h	/^	THUMBOP_LSR  = 3,$/;"	e	enum:__anon71
THUMBOP_MOV	src/codegen/arm-codegen.h	/^	THUMBOP_MOV  = 16,$/;"	e	enum:__anon71
THUMBOP_MOVH	src/codegen/arm-codegen.h	/^	THUMBOP_MOVH = 20$/;"	e	enum:__anon71
THUMBOP_MUL	src/codegen/arm-codegen.h	/^	THUMBOP_MUL  = 13,$/;"	e	enum:__anon71
THUMBOP_MVN	src/codegen/arm-codegen.h	/^	THUMBOP_MVN  = 15,$/;"	e	enum:__anon71
THUMBOP_NEG	src/codegen/arm-codegen.h	/^	THUMBOP_NEG  = 9,$/;"	e	enum:__anon71
THUMBOP_ORR	src/codegen/arm-codegen.h	/^	THUMBOP_ORR  = 12,$/;"	e	enum:__anon71
THUMBOP_ROR	src/codegen/arm-codegen.h	/^	THUMBOP_ROR  = 7,$/;"	e	enum:__anon71
THUMBOP_SBC	src/codegen/arm-codegen.h	/^	THUMBOP_SBC  = 6,$/;"	e	enum:__anon71
THUMBOP_SUB	src/codegen/arm-codegen.h	/^	THUMBOP_SUB  = 19,$/;"	e	enum:__anon71
THUMBOP_TST	src/codegen/arm-codegen.h	/^	THUMBOP_TST  = 8,$/;"	e	enum:__anon71
TITLEBARHEIGHT	ug/ug_ftk.c	/^static const int TITLEBARHEIGHT = 26;$/;"	v	file:
TITLEBARHEIGHT	ug/ug_win32.c	/^static const int TITLEBARHEIGHT = 26;$/;"	v	file:
TInt64X	include/epoc/int64x.h	/^class TInt64X: public TInt64 {$/;"	c
TInt64X	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X::TInt64X(): TInt64(0,0)$/;"	f	class:TInt64X
TInt64X	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X::TInt64X(TInt aVal): TInt64(aVal)$/;"	f	class:TInt64X
TInt64X	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X::TInt64X(const TInt64& aVal): TInt64(aVal)$/;"	f	class:TInt64X
TRUNC	src/codegen/instruction.h	445;"	d
TRUNC_S	src/codegen/instruction.h	463;"	d
TexCoord	src/Rasterizer.h	/^	struct TexCoord {$/;"	s	namespace:EGL
TexCoordPointer	src/ContextRender.cpp	/^void Context :: TexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { $/;"	f	class:Context
TexEnvf	src/ContextFloat.cpp	/^void Context :: TexEnvf (GLenum target, GLenum pname, GLfloat param) {$/;"	f	class:Context
TexEnvfv	src/ContextFloat.cpp	/^void Context :: TexEnvfv (GLenum target, GLenum pname, const GLfloat *params) {$/;"	f	class:Context
TexEnvx	src/ContextTexture.cpp	/^void Context :: TexEnvx(GLenum target, GLenum pname, GLfixed param) { $/;"	f	class:Context
TexEnvxv	src/ContextTexture.cpp	/^void Context :: TexEnvxv(GLenum target, GLenum pname, const GLfixed *params) { $/;"	f	class:Context
TexImage2D	src/ContextTexture.cpp	/^void Context :: TexImage2D(GLenum target, GLint level, GLint internalformat, $/;"	f	class:Context
TexParameterf	src/ContextFloat.cpp	/^void Context :: TexParameterf (GLenum target, GLenum pname, GLfloat param) {$/;"	f	class:Context
TexParameteri	src/ContextTexture.cpp	/^void Context :: TexParameteri(GLenum target, GLenum pname, GLint param) { $/;"	f	class:Context
TexParameterx	src/ContextTexture.cpp	/^void Context :: TexParameterx(GLenum target, GLenum pname, GLfixed param) { $/;"	f	class:Context
TexSubImage2D	src/ContextTexture.cpp	/^void Context :: TexSubImage2D(GLenum target, GLint level, $/;"	f	class:Context
Texture	src/Texture.h	/^	class Texture { $/;"	c	namespace:EGL
TextureArray	src/Arrays.h	/^	typedef ObjectArray<MultiTexture>	TextureArray;$/;"	t	namespace:EGL
TextureCombineOp	src/RasterizerState.h	/^		enum TextureCombineOp {$/;"	g	class:EGL::RasterizerState
TextureCombineOpOneMinusSrcAlpha	src/RasterizerState.h	/^			TextureCombineOpOneMinusSrcAlpha$/;"	e	enum:EGL::RasterizerState::TextureCombineOp
TextureCombineOpOneMinusSrcColor	src/RasterizerState.h	/^			TextureCombineOpOneMinusSrcColor,$/;"	e	enum:EGL::RasterizerState::TextureCombineOp
TextureCombineOpSrcAlpha	src/RasterizerState.h	/^			TextureCombineOpSrcAlpha,$/;"	e	enum:EGL::RasterizerState::TextureCombineOp
TextureCombineOpSrcColor	src/RasterizerState.h	/^			TextureCombineOpSrcColor,$/;"	e	enum:EGL::RasterizerState::TextureCombineOp
TextureCombineSrc	src/RasterizerState.h	/^		enum TextureCombineSrc {$/;"	g	class:EGL::RasterizerState
TextureCombineSrcConstant	src/RasterizerState.h	/^			TextureCombineSrcConstant,$/;"	e	enum:EGL::RasterizerState::TextureCombineSrc
TextureCombineSrcPrevious	src/RasterizerState.h	/^			TextureCombineSrcPrevious$/;"	e	enum:EGL::RasterizerState::TextureCombineSrc
TextureCombineSrcPrimaryColor	src/RasterizerState.h	/^			TextureCombineSrcPrimaryColor,$/;"	e	enum:EGL::RasterizerState::TextureCombineSrc
TextureCombineSrcTexture	src/RasterizerState.h	/^			TextureCombineSrcTexture,$/;"	e	enum:EGL::RasterizerState::TextureCombineSrc
TextureFormat	src/RasterizerState.h	/^		enum TextureFormat {$/;"	g	class:EGL::RasterizerState
TextureFormatAlpha	src/RasterizerState.h	/^			TextureFormatAlpha = 0,				\/\/ 8$/;"	e	enum:EGL::RasterizerState::TextureFormat
TextureFormatFromEnum	src/ContextTexture.cpp	/^	RasterizerState::TextureFormat TextureFormatFromEnum(GLenum format) {$/;"	f	namespace:__anon24
TextureFormatInvalid	src/RasterizerState.h	/^			TextureFormatInvalid = -1,$/;"	e	enum:EGL::RasterizerState::TextureFormat
TextureFormatLuminance	src/RasterizerState.h	/^			TextureFormatLuminance = 1,			\/\/ 8$/;"	e	enum:EGL::RasterizerState::TextureFormat
TextureFormatLuminanceAlpha	src/RasterizerState.h	/^			TextureFormatLuminanceAlpha = 2,	\/\/ 8-8$/;"	e	enum:EGL::RasterizerState::TextureFormat
TextureFormatRGB565	src/RasterizerState.h	/^			TextureFormatRGB565 = 5,			\/\/ 5-6-5$/;"	e	enum:EGL::RasterizerState::TextureFormat
TextureFormatRGB8	src/RasterizerState.h	/^			TextureFormatRGB8 = 3,				\/\/ 8-8-8$/;"	e	enum:EGL::RasterizerState::TextureFormat
TextureFormatRGBA4444	src/RasterizerState.h	/^			TextureFormatRGBA4444 = 6,			\/\/ 4-4-4-4$/;"	e	enum:EGL::RasterizerState::TextureFormat
TextureFormatRGBA5551	src/RasterizerState.h	/^			TextureFormatRGBA5551 = 7			\/\/ 5-5-5-1$/;"	e	enum:EGL::RasterizerState::TextureFormat
TextureFormatRGBA8	src/RasterizerState.h	/^			TextureFormatRGBA8 = 4,				\/\/ 8-8-8-8$/;"	e	enum:EGL::RasterizerState::TextureFormat
TextureMode	src/RasterizerState.h	/^		enum TextureMode {$/;"	g	class:EGL::RasterizerState
TextureModeAdd	src/RasterizerState.h	/^			TextureModeAdd,$/;"	e	enum:EGL::RasterizerState::TextureMode
TextureModeBlend	src/RasterizerState.h	/^			TextureModeBlend,$/;"	e	enum:EGL::RasterizerState::TextureMode
TextureModeCombine	src/RasterizerState.h	/^			TextureModeCombine$/;"	e	enum:EGL::RasterizerState::TextureMode
TextureModeCombineAdd	src/RasterizerState.h	/^			TextureModeCombineAdd,$/;"	e	enum:EGL::RasterizerState::TextureModeCombineFunc
TextureModeCombineAddSigned	src/RasterizerState.h	/^			TextureModeCombineAddSigned,$/;"	e	enum:EGL::RasterizerState::TextureModeCombineFunc
TextureModeCombineDot3RGB	src/RasterizerState.h	/^			TextureModeCombineDot3RGB,$/;"	e	enum:EGL::RasterizerState::TextureModeCombineFunc
TextureModeCombineDot3RGBA	src/RasterizerState.h	/^			TextureModeCombineDot3RGBA$/;"	e	enum:EGL::RasterizerState::TextureModeCombineFunc
TextureModeCombineFunc	src/RasterizerState.h	/^		enum TextureModeCombineFunc {$/;"	g	class:EGL::RasterizerState
TextureModeCombineInterpolate	src/RasterizerState.h	/^			TextureModeCombineInterpolate,$/;"	e	enum:EGL::RasterizerState::TextureModeCombineFunc
TextureModeCombineModulate	src/RasterizerState.h	/^			TextureModeCombineModulate,$/;"	e	enum:EGL::RasterizerState::TextureModeCombineFunc
TextureModeCombineReplace	src/RasterizerState.h	/^			TextureModeCombineReplace,$/;"	e	enum:EGL::RasterizerState::TextureModeCombineFunc
TextureModeCombineSubtract	src/RasterizerState.h	/^			TextureModeCombineSubtract,$/;"	e	enum:EGL::RasterizerState::TextureModeCombineFunc
TextureModeDecal	src/RasterizerState.h	/^			TextureModeDecal,$/;"	e	enum:EGL::RasterizerState::TextureMode
TextureModeInvalid	src/RasterizerState.h	/^			TextureModeInvalid = -1,$/;"	e	enum:EGL::RasterizerState::TextureMode
TextureModeModulate	src/RasterizerState.h	/^			TextureModeModulate,$/;"	e	enum:EGL::RasterizerState::TextureMode
TextureModeReplace	src/RasterizerState.h	/^			TextureModeReplace,$/;"	e	enum:EGL::RasterizerState::TextureMode
TextureState	src/RasterizerState.h	/^			TextureState() {$/;"	f	struct:EGL::RasterizerState::TextureState
TextureState	src/RasterizerState.h	/^			TextureState(const TextureState& other) {$/;"	f	struct:EGL::RasterizerState::TextureState
TextureState	src/RasterizerState.h	/^		struct TextureState {$/;"	s	class:EGL::RasterizerState
Textures	src/Rasterizer.h	/^		Texture *	Textures[EGL_NUM_TEXTURE_UNITS];$/;"	m	struct:EGL::RasterInfo
ThumbOpcode	src/codegen/arm-codegen.h	/^} ThumbOpcode;$/;"	t	typeref:enum:__anon71
TlsInfo	src/Epoc/ConfigEpoc.cpp	/^    TlsInfo::TlsInfo(): m_Context(0), m_LastError(0)$/;"	f	class:TlsInfo
TlsInfo	src/OGLES.h	/^	struct TlsInfo {$/;"	s	namespace:EGL
Toggle	src/Context.cpp	/^void Context :: Toggle(GLenum cap, bool value) { $/;"	f	class:Context
ToggleClientState	src/ContextRender.cpp	/^void Context :: ToggleClientState(GLenum array, bool value) { $/;"	f	class:Context
Translatef	src/ContextFloat.cpp	/^void Context :: Translatef (GLfloat x, GLfloat y, GLfloat z) {$/;"	f	class:Context
Translatex	src/ContextMatrix.cpp	/^void Context :: Translatex(GLfixed x, GLfixed y, GLfixed z) { $/;"	f	class:Context
Transpose	src/linalg.h	/^		Matrix4x4 Transpose() const {$/;"	f	class:EGL::Matrix4x4
TriangleArea	src/RasterizerTriangles.cpp	/^	inline EGL_Fixed TriangleArea(EGL_Fixed x0, EGL_Fixed y0,$/;"	f	namespace:__anon20
TypeForInternalFormat	src/ContextTexture.cpp	/^	GLenum TypeForInternalFormat(RasterizerState::TextureFormat format) {$/;"	f	namespace:__anon24
U16	src/OGLES.h	/^	    typedef unsigned short 		U16;$/;"	t
U16	src/OGLES.h	/^        typedef TUint16 U16;$/;"	t
U16	src/codegen/codegen.h	/^	    typedef unsigned short 		U16;$/;"	t
U16	src/codegen/codegen.h	/^        typedef TUint16 U16;$/;"	t
U32	src/OGLES.h	/^	    typedef unsigned int 		U32;$/;"	t
U32	src/OGLES.h	/^        typedef TUint   U32;$/;"	t
U32	src/codegen/codegen.h	/^	    typedef unsigned int 		U32;$/;"	t
U32	src/codegen/codegen.h	/^        typedef TUint   U32;$/;"	t
U64	src/OGLES.h	/^typedef TInt64X	U64;$/;"	t
U64	src/OGLES.h	/^typedef unsigned __int64	U64;$/;"	t
U64	src/OGLES.h	/^typedef unsigned long long U64;$/;"	t
U8	src/OGLES.h	/^	    typedef unsigned char 		U8;$/;"	t
U8	src/OGLES.h	/^        typedef TUint8  U8;$/;"	t
U8	src/codegen/codegen.h	/^	    typedef unsigned char 		U8;$/;"	t
U8	src/codegen/codegen.h	/^        typedef TUint8  U8;$/;"	t
UGCtx	include/ug.h	/^typedef long UGCtx;$/;"	t
UGCtx_t	ug/ug_ftk.c	/^} UGCtx_t;$/;"	t	typeref:struct:__anon1	file:
UGCtx_t	ug/ug_win32.c	/^} UGCtx_t;$/;"	t	typeref:struct:__anon2	file:
UGWindow	include/ug.h	/^typedef long UGWindow;$/;"	t
UGWindow_t	ug/ug_ftk.c	/^} UGWindow_t;$/;"	t	typeref:struct:ugwindow	file:
UGWindow_t	ug/ug_win32.c	/^} UGWindow_t;$/;"	t	typeref:struct:ugwindow	file:
UG_BUT_DOWN	include/ug.h	72;"	d
UG_BUT_LEFT	include/ug.h	67;"	d
UG_BUT_MIDDLE	include/ug.h	68;"	d
UG_BUT_RIGHT	include/ug.h	69;"	d
UG_BUT_UP	include/ug.h	73;"	d
UG_KEY_DOWN	include/ug.h	59;"	d
UG_KEY_END	include/ug.h	63;"	d
UG_KEY_F1	include/ug.h	42;"	d
UG_KEY_F10	include/ug.h	51;"	d
UG_KEY_F11	include/ug.h	52;"	d
UG_KEY_F12	include/ug.h	53;"	d
UG_KEY_F2	include/ug.h	43;"	d
UG_KEY_F3	include/ug.h	44;"	d
UG_KEY_F4	include/ug.h	45;"	d
UG_KEY_F5	include/ug.h	46;"	d
UG_KEY_F6	include/ug.h	47;"	d
UG_KEY_F7	include/ug.h	48;"	d
UG_KEY_F8	include/ug.h	49;"	d
UG_KEY_F9	include/ug.h	50;"	d
UG_KEY_HOME	include/ug.h	62;"	d
UG_KEY_INSERT	include/ug.h	64;"	d
UG_KEY_LEFT	include/ug.h	56;"	d
UG_KEY_PAGE_DOWN	include/ug.h	61;"	d
UG_KEY_PAGE_UP	include/ug.h	60;"	d
UG_KEY_RIGHT	include/ug.h	58;"	d
UG_KEY_UP	include/ug.h	57;"	d
USE_BUFFERS	test/epoc/paint.cpp	24;"	d	file:
USE_BUFFERS	test/paint.cpp	30;"	d	file:
UgRegisterClass	ug/ug_win32.c	/^static ATOM UgRegisterClass(HINSTANCE hInstance, LPTSTR szWindowClass)$/;"	f	file:
UpdateInverseModelViewMatrix	src/ContextMatrix.cpp	/^void Context :: UpdateInverseModelViewMatrix(void) {$/;"	f	class:Context
UpdateMipmaps	src/ContextTexture.cpp	/^void Context :: UpdateMipmaps(void) {$/;"	f	class:Context
UpdateScissorTest	src/ContextViewport.cpp	/^void Context :: UpdateScissorTest() {$/;"	f	class:Context
UpdateWindowPosition	ug/ug_win32.c	/^void UpdateWindowPosition(HWND hWnd)$/;"	f
Usage	tools/makecab.cmd	/^:Usage$/;"	l
VERSION	projects/linux-ftk/Makefile	/^VERSION = 0.0.1$/;"	m
VERSION	projects/linux-ftk/confdefs.h	7;"	d
VERSION	projects/linux-ftk/linux-config.h	63;"	d
VERSION	projects/linux-x11/Makefile	/^VERSION = 0.0.1$/;"	m
VERSION	projects/linux-x11/linux-config.h	69;"	d
VERSION	tools/allzips.cmd	/^set VERSION=%2$/;"	v
VERSION	tools/makezips.cmd	/^set VERSION=%3$/;"	v
VERTEX_BUFFER	test/epoc/paint.cpp	1109;"	d	file:
VERTEX_BUFFER	test/paint.cpp	1229;"	d	file:
VIEWPORT_FAR	src/Context.h	/^			VIEWPORT_FAR = EGL_ONE$/;"	e	enum:EGL::Context::__anon23
VIEWPORT_HEIGHT	src/Context.h	/^			VIEWPORT_HEIGHT = 320,$/;"	e	enum:EGL::Context::__anon23
VIEWPORT_NEAR	src/Context.h	/^			VIEWPORT_NEAR = 0,$/;"	e	enum:EGL::Context::__anon23
VIEWPORT_WIDTH	src/Context.h	/^			VIEWPORT_WIDTH = 240,$/;"	e	enum:EGL::Context::__anon23
VIEWPORT_X	src/Context.h	/^			VIEWPORT_X = 0,$/;"	e	enum:EGL::Context::__anon23
VIEWPORT_Y	src/Context.h	/^			VIEWPORT_Y = 0,$/;"	e	enum:EGL::Context::__anon23
ValidateFormats	src/ContextTexture.cpp	/^	bool ValidateFormats(RasterizerState::TextureFormat internalFormat,$/;"	f	namespace:__anon24
Vec3D	src/linalg.h	/^		inline Vec3D() {$/;"	f	class:EGL::Vec3D
Vec3D	src/linalg.h	/^		inline Vec3D(EGL_Fixed x, EGL_Fixed y, EGL_Fixed z) {$/;"	f	class:EGL::Vec3D
Vec3D	src/linalg.h	/^		inline Vec3D(const EGL_Fixed * coords) {$/;"	f	class:EGL::Vec3D
Vec3D	src/linalg.h	/^		inline Vec3D(const Vec3D& other) {$/;"	f	class:EGL::Vec3D
Vec3D	src/linalg.h	/^	class Vec3D {$/;"	c	namespace:EGL
Vec4D	src/linalg.h	/^		inline Vec4D() {$/;"	f	class:EGL::Vec4D
Vec4D	src/linalg.h	/^		inline Vec4D(EGL_Fixed x, EGL_Fixed y, EGL_Fixed z) {$/;"	f	class:EGL::Vec4D
Vec4D	src/linalg.h	/^		inline Vec4D(EGL_Fixed x, EGL_Fixed y, EGL_Fixed z, EGL_Fixed w) {$/;"	f	class:EGL::Vec4D
Vec4D	src/linalg.h	/^		inline Vec4D(const EGL_Fixed * coords) {$/;"	f	class:EGL::Vec4D
Vec4D	src/linalg.h	/^		inline Vec4D(const Vec4D& other) {$/;"	f	class:EGL::Vec4D
Vec4D	src/linalg.h	/^	class Vec4D {$/;"	c	namespace:EGL
VertexArray	src/Arrays.h	/^		VertexArray() {$/;"	f	struct:EGL::VertexArray
VertexArray	src/Arrays.h	/^	struct VertexArray {$/;"	s	namespace:EGL
VertexPointer	src/ContextRender.cpp	/^void Context :: VertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { $/;"	f	class:Context
Viewport	src/ContextViewport.cpp	/^void Context :: Viewport(GLint x, GLint y, GLsizei width, GLsizei height) { $/;"	f	class:Context
WIN32_LEAN_AND_MEAN	include/GLES/egltypes.h	24;"	d
WIN32_LEAN_AND_MEAN	include/GLES/gl.h	49;"	d
WINDOW_CLASS_NAME	ug/ug_win32.c	/^static wchar_t WINDOW_CLASS_NAME[] = L"ug window";$/;"	v	file:
WeightPointer	src/ContextRender.cpp	/^void Context :: WeightPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {$/;"	f	class:Context
Width	src/RasterizerState.h	/^			EGL_Fixed			Width;	\/\/ current line width$/;"	m	struct:EGL::RasterizerState::LineState
Width	src/RasterizerState.h	/^			U32					Width, Height;$/;"	m	struct:EGL::RasterizerState::ScissorTestState
Width	test/paint.cpp	/^ GLint Width;$/;"	m	struct:GLTXTLOAD	file:
Win	test/epoc/appview.cpp	/^RWindow* CAppView::Win() const$/;"	f	class:CAppView
WinMain	test/testce.cpp	/^int WINAPI WinMain(	HINSTANCE hInstance,$/;"	f
WinMain	ug/ug_win32.c	/^int WINAPI WinMain(	HINSTANCE hInstance,$/;"	f
WndProc	test/testce.cpp	/^LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
WndProc	test/testwin.cpp	/^LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
WndProc	ug/ug_win32.c	/^LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f
WrapOrClamp	src/arm/GenFragment.cpp	/^	void WrapOrClamp(cg_proc_t * procedure, cg_block_t * block, $/;"	f	namespace:__anon12
WrappingMode	src/RasterizerState.h	/^		enum WrappingMode {$/;"	g	class:EGL::RasterizerState
WrappingModeClampToEdge	src/RasterizerState.h	/^			WrappingModeClampToEdge,$/;"	e	enum:EGL::RasterizerState::WrappingMode
WrappingModeFromEnum	src/ContextTexture.cpp	/^	RasterizerState::WrappingMode WrappingModeFromEnum(GLenum mode) {$/;"	f	namespace:__anon24
WrappingModeInvalid	src/RasterizerState.h	/^			WrappingModeInvalid = -1,$/;"	e	enum:EGL::RasterizerState::WrappingMode
WrappingModeRepeat	src/RasterizerState.h	/^			WrappingModeRepeat$/;"	e	enum:EGL::RasterizerState::WrappingMode
WrappingModeS	src/RasterizerState.h	/^			WrappingMode			WrappingModeS;$/;"	m	struct:EGL::RasterizerState::TextureState
WrappingModeT	src/RasterizerState.h	/^			WrappingMode			WrappingModeT;$/;"	m	struct:EGL::RasterizerState::TextureState
X	src/RasterizerState.h	/^			I32					X, Y;$/;"	m	struct:EGL::RasterizerState::ScissorTestState
XOR	src/codegen/instruction.h	485;"	d
XOR_S	src/codegen/instruction.h	513;"	d
Y	src/RasterizerState.h	/^			I32					X, Y;$/;"	m	struct:EGL::RasterizerState::ScissorTestState
YELLOWMAT	redbook/stencil.c	49;"	d	file:
ZFail	src/RasterizerState.h	/^			StencilOp			Fail, ZFail, ZPass;$/;"	m	struct:EGL::RasterizerState::StencilState
ZINC	demos/hello.c	50;"	d	file:
ZINC	redbook/alpha3D.c	50;"	d	file:
ZIP_FILE	tools/makezips.cmd	/^set ZIP_FILE=%GLES_DIST%\\ogl-es-%PLATFORM%-%VERSION%.zip$/;"	v
ZPass	src/RasterizerState.h	/^			StencilOp			Fail, ZFail, ZPass;$/;"	m	struct:EGL::RasterizerState::StencilState
_ADCS_REG_IMM	src/codegen/arm_dpimacros.h	854;"	d
_ADCS_REG_IMM8	src/codegen/arm_dpimacros.h	876;"	d
_ADCS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	874;"	d
_ADCS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	920;"	d
_ADCS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	918;"	d
_ADCS_REG_IMM_COND	src/codegen/arm_dpimacros.h	852;"	d
_ADCS_REG_REG	src/codegen/arm_dpimacros.h	898;"	d
_ADCS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	942;"	d
_ADCS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	940;"	d
_ADCS_REG_REG_COND	src/codegen/arm_dpimacros.h	896;"	d
_ADC_REG_IMM	src/codegen/arm_dpimacros.h	850;"	d
_ADC_REG_IMM8	src/codegen/arm_dpimacros.h	872;"	d
_ADC_REG_IMM8_COND	src/codegen/arm_dpimacros.h	870;"	d
_ADC_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	916;"	d
_ADC_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	914;"	d
_ADC_REG_IMM_COND	src/codegen/arm_dpimacros.h	848;"	d
_ADC_REG_REG	src/codegen/arm_dpimacros.h	894;"	d
_ADC_REG_REGSHIFT	src/codegen/arm_dpimacros.h	938;"	d
_ADC_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	936;"	d
_ADC_REG_REG_COND	src/codegen/arm_dpimacros.h	892;"	d
_ADDS_REG_IMM	src/codegen/arm_dpimacros.h	742;"	d
_ADDS_REG_IMM8	src/codegen/arm_dpimacros.h	764;"	d
_ADDS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	762;"	d
_ADDS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	808;"	d
_ADDS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	806;"	d
_ADDS_REG_IMM_COND	src/codegen/arm_dpimacros.h	740;"	d
_ADDS_REG_REG	src/codegen/arm_dpimacros.h	786;"	d
_ADDS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	830;"	d
_ADDS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	828;"	d
_ADDS_REG_REG_COND	src/codegen/arm_dpimacros.h	784;"	d
_ADD_REG_IMM	src/codegen/arm_dpimacros.h	738;"	d
_ADD_REG_IMM8	src/codegen/arm_dpimacros.h	760;"	d
_ADD_REG_IMM8_COND	src/codegen/arm_dpimacros.h	758;"	d
_ADD_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	804;"	d
_ADD_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	802;"	d
_ADD_REG_IMM_COND	src/codegen/arm_dpimacros.h	736;"	d
_ADD_REG_REG	src/codegen/arm_dpimacros.h	782;"	d
_ADD_REG_REGSHIFT	src/codegen/arm_dpimacros.h	826;"	d
_ADD_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	824;"	d
_ADD_REG_REG_COND	src/codegen/arm_dpimacros.h	780;"	d
_ANDS_REG_IMM	src/codegen/arm_dpimacros.h	294;"	d
_ANDS_REG_IMM8	src/codegen/arm_dpimacros.h	316;"	d
_ANDS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	314;"	d
_ANDS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	360;"	d
_ANDS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	358;"	d
_ANDS_REG_IMM_COND	src/codegen/arm_dpimacros.h	292;"	d
_ANDS_REG_REG	src/codegen/arm_dpimacros.h	338;"	d
_ANDS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	382;"	d
_ANDS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	380;"	d
_ANDS_REG_REG_COND	src/codegen/arm_dpimacros.h	336;"	d
_AND_REG_IMM	src/codegen/arm_dpimacros.h	290;"	d
_AND_REG_IMM8	src/codegen/arm_dpimacros.h	312;"	d
_AND_REG_IMM8_COND	src/codegen/arm_dpimacros.h	310;"	d
_AND_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	356;"	d
_AND_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	354;"	d
_AND_REG_IMM_COND	src/codegen/arm_dpimacros.h	288;"	d
_AND_REG_REG	src/codegen/arm_dpimacros.h	334;"	d
_AND_REG_REGSHIFT	src/codegen/arm_dpimacros.h	378;"	d
_AND_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	376;"	d
_AND_REG_REG_COND	src/codegen/arm_dpimacros.h	332;"	d
_APS_NEXT_COMMAND_VALUE	test/Resource.h	23;"	d
_APS_NEXT_CONTROL_VALUE	test/Resource.h	24;"	d
_APS_NEXT_RESOURCE_VALUE	test/Resource.h	22;"	d
_APS_NEXT_SYMED_VALUE	test/Resource.h	25;"	d
_APS_NO_MFC	test/Resource.h	21;"	d
_ARMDis	src/codegen/arm-dis.h	/^typedef struct _ARMDis {$/;"	s
_BICS_REG_IMM	src/codegen/arm_dpimacros.h	1302;"	d
_BICS_REG_IMM8	src/codegen/arm_dpimacros.h	1324;"	d
_BICS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1322;"	d
_BICS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1368;"	d
_BICS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1366;"	d
_BICS_REG_IMM_COND	src/codegen/arm_dpimacros.h	1300;"	d
_BICS_REG_REG	src/codegen/arm_dpimacros.h	1346;"	d
_BICS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1390;"	d
_BICS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1388;"	d
_BICS_REG_REG_COND	src/codegen/arm_dpimacros.h	1344;"	d
_BIC_REG_IMM	src/codegen/arm_dpimacros.h	1298;"	d
_BIC_REG_IMM8	src/codegen/arm_dpimacros.h	1320;"	d
_BIC_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1318;"	d
_BIC_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1364;"	d
_BIC_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1362;"	d
_BIC_REG_IMM_COND	src/codegen/arm_dpimacros.h	1296;"	d
_BIC_REG_REG	src/codegen/arm_dpimacros.h	1342;"	d
_BIC_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1386;"	d
_BIC_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1384;"	d
_BIC_REG_REG_COND	src/codegen/arm_dpimacros.h	1340;"	d
_CMN_REG_IMM	src/codegen/arm_dpimacros.h	1592;"	d
_CMN_REG_IMM8	src/codegen/arm_dpimacros.h	1606;"	d
_CMN_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1604;"	d
_CMN_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1634;"	d
_CMN_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1632;"	d
_CMN_REG_IMM_COND	src/codegen/arm_dpimacros.h	1590;"	d
_CMN_REG_REG	src/codegen/arm_dpimacros.h	1620;"	d
_CMN_REG_REG_COND	src/codegen/arm_dpimacros.h	1618;"	d
_CMP_REG_IMM	src/codegen/arm_dpimacros.h	1522;"	d
_CMP_REG_IMM8	src/codegen/arm_dpimacros.h	1536;"	d
_CMP_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1534;"	d
_CMP_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1564;"	d
_CMP_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1562;"	d
_CMP_REG_IMM_COND	src/codegen/arm_dpimacros.h	1520;"	d
_CMP_REG_REG	src/codegen/arm_dpimacros.h	1550;"	d
_CMP_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1578;"	d
_CMP_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1576;"	d
_CMP_REG_REG_COND	src/codegen/arm_dpimacros.h	1548;"	d
_EORS_REG_IMM	src/codegen/arm_dpimacros.h	406;"	d
_EORS_REG_IMM8	src/codegen/arm_dpimacros.h	428;"	d
_EORS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	426;"	d
_EORS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	472;"	d
_EORS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	470;"	d
_EORS_REG_IMM_COND	src/codegen/arm_dpimacros.h	404;"	d
_EORS_REG_REG	src/codegen/arm_dpimacros.h	450;"	d
_EORS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	494;"	d
_EORS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	492;"	d
_EORS_REG_REG_COND	src/codegen/arm_dpimacros.h	448;"	d
_EOR_REG_IMM	src/codegen/arm_dpimacros.h	402;"	d
_EOR_REG_IMM8	src/codegen/arm_dpimacros.h	424;"	d
_EOR_REG_IMM8_COND	src/codegen/arm_dpimacros.h	422;"	d
_EOR_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	468;"	d
_EOR_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	466;"	d
_EOR_REG_IMM_COND	src/codegen/arm_dpimacros.h	400;"	d
_EOR_REG_REG	src/codegen/arm_dpimacros.h	446;"	d
_EOR_REG_REGSHIFT	src/codegen/arm_dpimacros.h	490;"	d
_EOR_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	488;"	d
_EOR_REG_REG_COND	src/codegen/arm_dpimacros.h	444;"	d
_FindAppT	ug/ug_win32.c	/^typedef struct _FindAppT$/;"	s	file:
_GLfuncptr	include/GLES/gl.h	/^typedef void (*_GLfuncptr)();$/;"	t
_MOVS_REG_IMM	src/codegen/arm_dpimacros.h	49;"	d
_MOVS_REG_IMM8	src/codegen/arm_dpimacros.h	73;"	d
_MOVS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	71;"	d
_MOVS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	121;"	d
_MOVS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	119;"	d
_MOVS_REG_IMM_COND	src/codegen/arm_dpimacros.h	47;"	d
_MOVS_REG_REG	src/codegen/arm_dpimacros.h	97;"	d
_MOVS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	146;"	d
_MOVS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	144;"	d
_MOVS_REG_REG_COND	src/codegen/arm_dpimacros.h	95;"	d
_MOV_REG_IMM	src/codegen/arm_dpimacros.h	44;"	d
_MOV_REG_IMM8	src/codegen/arm_dpimacros.h	68;"	d
_MOV_REG_IMM8_COND	src/codegen/arm_dpimacros.h	66;"	d
_MOV_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	116;"	d
_MOV_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	114;"	d
_MOV_REG_IMM_COND	src/codegen/arm_dpimacros.h	42;"	d
_MOV_REG_REG	src/codegen/arm_dpimacros.h	92;"	d
_MOV_REG_REGSHIFT	src/codegen/arm_dpimacros.h	141;"	d
_MOV_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	139;"	d
_MOV_REG_REG_COND	src/codegen/arm_dpimacros.h	90;"	d
_MVNS_REG_IMM	src/codegen/arm_dpimacros.h	170;"	d
_MVNS_REG_IMM8	src/codegen/arm_dpimacros.h	194;"	d
_MVNS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	192;"	d
_MVNS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	242;"	d
_MVNS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	240;"	d
_MVNS_REG_IMM_COND	src/codegen/arm_dpimacros.h	168;"	d
_MVNS_REG_REG	src/codegen/arm_dpimacros.h	218;"	d
_MVNS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	267;"	d
_MVNS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	265;"	d
_MVNS_REG_REG_COND	src/codegen/arm_dpimacros.h	216;"	d
_MVN_REG_IMM	src/codegen/arm_dpimacros.h	165;"	d
_MVN_REG_IMM8	src/codegen/arm_dpimacros.h	189;"	d
_MVN_REG_IMM8_COND	src/codegen/arm_dpimacros.h	187;"	d
_MVN_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	237;"	d
_MVN_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	235;"	d
_MVN_REG_IMM_COND	src/codegen/arm_dpimacros.h	163;"	d
_MVN_REG_REG	src/codegen/arm_dpimacros.h	213;"	d
_MVN_REG_REGSHIFT	src/codegen/arm_dpimacros.h	262;"	d
_MVN_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	260;"	d
_MVN_REG_REG_COND	src/codegen/arm_dpimacros.h	211;"	d
_ORRS_REG_IMM	src/codegen/arm_dpimacros.h	1190;"	d
_ORRS_REG_IMM8	src/codegen/arm_dpimacros.h	1212;"	d
_ORRS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1210;"	d
_ORRS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1256;"	d
_ORRS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1254;"	d
_ORRS_REG_IMM_COND	src/codegen/arm_dpimacros.h	1188;"	d
_ORRS_REG_REG	src/codegen/arm_dpimacros.h	1234;"	d
_ORRS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1278;"	d
_ORRS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1276;"	d
_ORRS_REG_REG_COND	src/codegen/arm_dpimacros.h	1232;"	d
_ORR_REG_IMM	src/codegen/arm_dpimacros.h	1186;"	d
_ORR_REG_IMM8	src/codegen/arm_dpimacros.h	1208;"	d
_ORR_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1206;"	d
_ORR_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1252;"	d
_ORR_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1250;"	d
_ORR_REG_IMM_COND	src/codegen/arm_dpimacros.h	1184;"	d
_ORR_REG_REG	src/codegen/arm_dpimacros.h	1230;"	d
_ORR_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1274;"	d
_ORR_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1272;"	d
_ORR_REG_REG_COND	src/codegen/arm_dpimacros.h	1228;"	d
_RSBS_REG_IMM	src/codegen/arm_dpimacros.h	630;"	d
_RSBS_REG_IMM8	src/codegen/arm_dpimacros.h	652;"	d
_RSBS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	650;"	d
_RSBS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	696;"	d
_RSBS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	694;"	d
_RSBS_REG_IMM_COND	src/codegen/arm_dpimacros.h	628;"	d
_RSBS_REG_REG	src/codegen/arm_dpimacros.h	674;"	d
_RSBS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	718;"	d
_RSBS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	716;"	d
_RSBS_REG_REG_COND	src/codegen/arm_dpimacros.h	672;"	d
_RSB_REG_IMM	src/codegen/arm_dpimacros.h	626;"	d
_RSB_REG_IMM8	src/codegen/arm_dpimacros.h	648;"	d
_RSB_REG_IMM8_COND	src/codegen/arm_dpimacros.h	646;"	d
_RSB_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	692;"	d
_RSB_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	690;"	d
_RSB_REG_IMM_COND	src/codegen/arm_dpimacros.h	624;"	d
_RSB_REG_REG	src/codegen/arm_dpimacros.h	670;"	d
_RSB_REG_REGSHIFT	src/codegen/arm_dpimacros.h	714;"	d
_RSB_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	712;"	d
_RSB_REG_REG_COND	src/codegen/arm_dpimacros.h	668;"	d
_RSCS_REG_IMM	src/codegen/arm_dpimacros.h	1078;"	d
_RSCS_REG_IMM8	src/codegen/arm_dpimacros.h	1100;"	d
_RSCS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1098;"	d
_RSCS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1144;"	d
_RSCS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1142;"	d
_RSCS_REG_IMM_COND	src/codegen/arm_dpimacros.h	1076;"	d
_RSCS_REG_REG	src/codegen/arm_dpimacros.h	1122;"	d
_RSCS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1166;"	d
_RSCS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1164;"	d
_RSCS_REG_REG_COND	src/codegen/arm_dpimacros.h	1120;"	d
_RSC_REG_IMM	src/codegen/arm_dpimacros.h	1074;"	d
_RSC_REG_IMM8	src/codegen/arm_dpimacros.h	1096;"	d
_RSC_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1094;"	d
_RSC_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1140;"	d
_RSC_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1138;"	d
_RSC_REG_IMM_COND	src/codegen/arm_dpimacros.h	1072;"	d
_RSC_REG_REG	src/codegen/arm_dpimacros.h	1118;"	d
_RSC_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1162;"	d
_RSC_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1160;"	d
_RSC_REG_REG_COND	src/codegen/arm_dpimacros.h	1116;"	d
_SBCS_REG_IMM	src/codegen/arm_dpimacros.h	966;"	d
_SBCS_REG_IMM8	src/codegen/arm_dpimacros.h	988;"	d
_SBCS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	986;"	d
_SBCS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1032;"	d
_SBCS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1030;"	d
_SBCS_REG_IMM_COND	src/codegen/arm_dpimacros.h	964;"	d
_SBCS_REG_REG	src/codegen/arm_dpimacros.h	1010;"	d
_SBCS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1054;"	d
_SBCS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1052;"	d
_SBCS_REG_REG_COND	src/codegen/arm_dpimacros.h	1008;"	d
_SBC_REG_IMM	src/codegen/arm_dpimacros.h	962;"	d
_SBC_REG_IMM8	src/codegen/arm_dpimacros.h	984;"	d
_SBC_REG_IMM8_COND	src/codegen/arm_dpimacros.h	982;"	d
_SBC_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1028;"	d
_SBC_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1026;"	d
_SBC_REG_IMM_COND	src/codegen/arm_dpimacros.h	960;"	d
_SBC_REG_REG	src/codegen/arm_dpimacros.h	1006;"	d
_SBC_REG_REGSHIFT	src/codegen/arm_dpimacros.h	1050;"	d
_SBC_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	1048;"	d
_SBC_REG_REG_COND	src/codegen/arm_dpimacros.h	1004;"	d
_SUBS_REG_IMM	src/codegen/arm_dpimacros.h	518;"	d
_SUBS_REG_IMM8	src/codegen/arm_dpimacros.h	540;"	d
_SUBS_REG_IMM8_COND	src/codegen/arm_dpimacros.h	538;"	d
_SUBS_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	584;"	d
_SUBS_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	582;"	d
_SUBS_REG_IMM_COND	src/codegen/arm_dpimacros.h	516;"	d
_SUBS_REG_REG	src/codegen/arm_dpimacros.h	562;"	d
_SUBS_REG_REGSHIFT	src/codegen/arm_dpimacros.h	606;"	d
_SUBS_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	604;"	d
_SUBS_REG_REG_COND	src/codegen/arm_dpimacros.h	560;"	d
_SUB_REG_IMM	src/codegen/arm_dpimacros.h	514;"	d
_SUB_REG_IMM8	src/codegen/arm_dpimacros.h	536;"	d
_SUB_REG_IMM8_COND	src/codegen/arm_dpimacros.h	534;"	d
_SUB_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	580;"	d
_SUB_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	578;"	d
_SUB_REG_IMM_COND	src/codegen/arm_dpimacros.h	512;"	d
_SUB_REG_REG	src/codegen/arm_dpimacros.h	558;"	d
_SUB_REG_REGSHIFT	src/codegen/arm_dpimacros.h	602;"	d
_SUB_REG_REGSHIFT_COND	src/codegen/arm_dpimacros.h	600;"	d
_SUB_REG_REG_COND	src/codegen/arm_dpimacros.h	556;"	d
_TEQ_REG_IMM	src/codegen/arm_dpimacros.h	1466;"	d
_TEQ_REG_IMM8	src/codegen/arm_dpimacros.h	1480;"	d
_TEQ_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1478;"	d
_TEQ_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1508;"	d
_TEQ_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1506;"	d
_TEQ_REG_IMM_COND	src/codegen/arm_dpimacros.h	1464;"	d
_TEQ_REG_REG	src/codegen/arm_dpimacros.h	1494;"	d
_TEQ_REG_REG_COND	src/codegen/arm_dpimacros.h	1492;"	d
_TST_REG_IMM	src/codegen/arm_dpimacros.h	1410;"	d
_TST_REG_IMM8	src/codegen/arm_dpimacros.h	1424;"	d
_TST_REG_IMM8_COND	src/codegen/arm_dpimacros.h	1422;"	d
_TST_REG_IMMSHIFT	src/codegen/arm_dpimacros.h	1452;"	d
_TST_REG_IMMSHIFT_COND	src/codegen/arm_dpimacros.h	1450;"	d
_TST_REG_IMM_COND	src/codegen/arm_dpimacros.h	1408;"	d
_TST_REG_REG	src/codegen/arm_dpimacros.h	1438;"	d
_TST_REG_REG_COND	src/codegen/arm_dpimacros.h	1436;"	d
__APPGLOBAL_H__	test/epoc/appglobal.h	2;"	d
__APPUI_H__	test/epoc/appui.h	12;"	d
__APPVIEW_H__	test/epoc/appview.h	12;"	d
__APP_H__	test/epoc/app.h	12;"	d
__ARMINSTR_H	include/EVC3Inc/ARM/armintr.h	9;"	d
__ARMINSTR_H	include/EVC3Inc/X86/armintr.h	9;"	d
__ASSERT_H__	include/EVC3Inc/ARM/assert.h	10;"	d
__ASSERT_H__	include/EVC3Inc/X86/assert.h	10;"	d
__CMNINSTR_H	include/EVC3Inc/ARM/cmnintrin.h	9;"	d
__CMNINSTR_H	include/EVC3Inc/X86/cmnintrin.h	9;"	d
__DOC_H__	test/epoc/doc.h	11;"	d
__GL_FLOAT	ug/uglu.c	29;"	d	file:
__INT64X_H__	include/epoc/int64x.h	12;"	d
__PI	ug/uglu.c	39;"	d	file:
__cosx	ug/uglu.c	/^__cosx(GLfixed a) {$/;"	f
__divx	ug/uglu.c	38;"	d	file:
__egl_h_	include/GLES/egl.h	2;"	d
__egl_types_h_	include/GLES/egltypes.h	2;"	d
__f2x	ug/uglu.c	36;"	d	file:
__gl_h_	include/GLES/gl.h	2;"	d
__gl_sin_tab	src/fixed.cpp	/^static const U16 __gl_sin_tab[] = {$/;"	v	file:
__gl_sin_tab	ug/uglu.c	/^static const unsigned short __gl_sin_tab[] = {$/;"	v	file:
__glext_h_	include/GLES/glext.h	2;"	d
__identf	ug/uglu.c	/^__identf(GLfloat m[]) {$/;"	f	file:
__identx	ug/uglu.c	/^__identx(GLfixed m[]) {$/;"	f	file:
__int64	ug/uglu.c	/^typedef long long __int64;$/;"	t	file:
__mulx	ug/uglu.c	37;"	d	file:
__sinx	ug/uglu.c	/^__sinx(GLfixed a) {$/;"	f
__sqrtx	ug/uglu.c	/^__sqrtx(GLfixed a) {$/;"	f
__ug_h__	include/ug.h	26;"	d
_dummy_r2	src/codegen/arm-codegen.h	/^		arminstr_t _dummy_r2 : 7;$/;"	m	struct:__anon76::__anon77
_dummy_r2	src/codegen/arm-codegen.h	/^		arminstr_t _dummy_r2 : 7;$/;"	m	struct:__anon78::__anon79
_tWinMain	test/testwin.cpp	/^int APIENTRY _tWinMain(HINSTANCE hInstance,$/;"	f
a	src/Color.h	/^		U8	r, g, b, a;							\/\/ rgba components$/;"	m	class:EGL::Color
a	src/FractionalColor.h	/^		EGL_Fixed	r, g, b, a;			\/\/ rgba components$/;"	m	class:EGL::FractionalColor
ac_ct_CC	projects/linux-ftk/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	projects/linux-x11/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	projects/linux-ftk/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	projects/linux-x11/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	projects/linux-ftk/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	projects/linux-x11/Makefile	/^ac_ct_DUMPBIN = $/;"	m
add_interference	src/codegen/instruction.c	/^static void add_interference(cg_heap_t * heap, cg_virtual_reg_t * source, cg_virtual_reg_t * target)$/;"	f	file:
add_predecessor	src/codegen/instruction.c	/^static void add_predecessor(cg_block_t * block, cg_block_t * pred)$/;"	f	file:
add_reg	src/codegen/instruction.c	/^static cg_virtual_reg_t ** add_reg(cg_virtual_reg_t * reg,$/;"	f	file:
add_reg_list	src/codegen/instruction.c	/^static cg_virtual_reg_t ** add_reg_list(cg_virtual_reg_list_t * list,$/;"	f	file:
add_successor	src/codegen/instruction.c	/^static void add_successor(cg_block_t * block, cg_block_t * succ)$/;"	f	file:
all	src/codegen/arm-codegen.h	/^	} all;$/;"	m	union:__anon80	typeref:struct:__anon80::__anon81
all	src/codegen/arm-codegen.h	/^	} all;$/;"	m	union:__anon84	typeref:struct:__anon84::__anon85
all	src/codegen/arm-codegen.h	/^	} all;$/;"	m	union:__anon92	typeref:struct:__anon92::__anon93
allocate_globals	src/codegen/emit.c	/^static void allocate_globals(cg_codegen_t * gen)$/;"	f	file:
allocate_reg	src/codegen/emit.c	/^static cg_physical_reg_t * allocate_reg(cg_codegen_t * gen, cg_virtual_reg_t * reg,$/;"	f	file:
alpha	test/epoc/paint.cpp	/^ GLfloat alpha;$/;"	m	struct:sample_MATERIAL	file:
alpha	test/paint.cpp	/^ GLfloat alpha;$/;"	m	struct:sample_MATERIAL	file:
am__CONFIG_DISTCLEAN_FILES	projects/linux-ftk/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__CONFIG_DISTCLEAN_FILES	projects/linux-x11/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__cd	projects/linux-ftk/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	projects/linux-x11/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__depfiles_maybe	projects/linux-ftk/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	projects/linux-x11/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__fastdepCC_FALSE	projects/linux-ftk/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	projects/linux-x11/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_TRUE	projects/linux-ftk/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	projects/linux-x11/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCXX_FALSE	projects/linux-ftk/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	projects/linux-x11/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_TRUE	projects/linux-ftk/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	projects/linux-x11/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__include	projects/linux-ftk/Makefile	/^am__include = include$/;"	m
am__include	projects/linux-x11/Makefile	/^am__include = include$/;"	m
am__leading_dot	projects/linux-ftk/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	projects/linux-x11/Makefile	/^am__leading_dot = .$/;"	m
am__quote	projects/linux-ftk/Makefile	/^am__quote = $/;"	m
am__quote	projects/linux-x11/Makefile	/^am__quote = $/;"	m
am__remove_distdir	projects/linux-ftk/Makefile	/^am__remove_distdir = \\$/;"	m
am__remove_distdir	projects/linux-x11/Makefile	/^am__remove_distdir = \\$/;"	m
am_libvincent_la_OBJECTS	projects/linux-ftk/Makefile	/^am_libvincent_la_OBJECTS = Config.lo Context.lo ContextBuffer.lo \\$/;"	m
am_libvincent_la_OBJECTS	projects/linux-x11/Makefile	/^am_libvincent_la_OBJECTS = Config.lo Context.lo ContextBuffer.lo \\$/;"	m
am_lines_OBJECTS	projects/linux-ftk/Makefile	/^am_lines_OBJECTS = lines.$(OBJEXT)$/;"	m
ambient	test/epoc/paint.cpp	/^ GLfloat ambient[3];$/;"	m	struct:sample_MATERIAL	file:
ambient	test/paint.cpp	/^ GLfloat ambient[3];$/;"	m	struct:sample_MATERIAL	file:
amode_immed	src/codegen/instruction.c	/^	amode_immed,$/;"	e	enum:__anon63	file:
amode_register	src/codegen/instruction.c	/^	amode_register,$/;"	e	enum:__anon63	file:
amode_shift_immed	src/codegen/instruction.c	/^	amode_shift_immed,$/;"	e	enum:__anon63	file:
amode_shift_reg	src/codegen/instruction.c	/^	amode_shift_reg$/;"	e	enum:__anon63	file:
amode_t	src/codegen/instruction.c	/^amode_t;$/;"	t	typeref:enum:__anon63	file:
angle	test/epoc/appglobal.h	/^    float angle;$/;"	m	struct:TAppGlobal
angle	test/paint.cpp	/^float angle = 30.0f;$/;"	v
animate	demos/hello.c	/^void animate(UGWindow uwin)$/;"	f
animate	redbook/alpha3D.c	/^void animate(UGWindow uwin)$/;"	f
argc	ug/ug_ftk.c	/^static int argc = 1;$/;"	v	file:
args	src/codegen/instruction.h	/^	cg_virtual_reg_list_t * args;$/;"	m	struct:cg_inst_call_t
argv	ug/ug_ftk.c	/^static char* argv[] = {"gles", NULL};$/;"	v	file:
arm_bsf	src/codegen/arm-codegen.c	/^int arm_bsf(armword_t val) {$/;"	f
arm_const_steps	src/codegen/arm-codegen.c	/^int arm_const_steps(armword_t val) {$/;"	f
arm_emit_lean_prologue	src/codegen/arm-codegen.c	/^void arm_emit_lean_prologue(cg_segment_t * segment, unsigned int local_size, int push_regs) {$/;"	f
arm_emit_std_epilogue	src/codegen/arm-codegen.c	/^void arm_emit_std_epilogue(cg_segment_t * segment, unsigned int local_size, int pop_regs) {$/;"	f
arm_emit_std_prologue	src/codegen/arm-codegen.c	/^void arm_emit_std_prologue(cg_segment_t * segment, unsigned int local_size) {$/;"	f
arm_is_power_of_2	src/codegen/arm-codegen.c	/^int arm_is_power_of_2(armword_t val) {$/;"	f
arm_mov_reg_imm32	src/codegen/arm-codegen.c	/^void arm_mov_reg_imm32(cg_segment_t * segment, int reg, armword_t imm32) {$/;"	f
arm_mov_reg_imm32_cond	src/codegen/arm-codegen.c	/^void arm_mov_reg_imm32_cond(cg_segment_t * segment, int reg, armword_t imm32, int cond) {$/;"	f
arm_shift_type	src/codegen/emit.c	/^static ARMShiftType arm_shift_type(cg_shift_op_t shift_op)$/;"	f	file:
armdis_close	src/codegen/arm-dis.c	/^void armdis_close(ARMDis* dis) {$/;"	f
armdis_decode	src/codegen/arm-dis.c	/^void armdis_decode(ARMDis* dis, cg_segment_t * segment) {$/;"	f
armdis_dump	src/codegen/arm-dis.c	/^void armdis_dump(ARMDis* dis, const char* dump_name, cg_segment_t * segment) {$/;"	f
armdis_get_output	src/codegen/arm-dis.c	/^FILE* armdis_get_output(ARMDis* dis) {$/;"	f
armdis_init	src/codegen/arm-dis.c	/^void armdis_init(ARMDis* dis) {$/;"	f
armdis_open	src/codegen/arm-dis.c	/^void armdis_open(ARMDis* dis, const char* dump_name) {$/;"	f
armdis_set_output	src/codegen/arm-dis.c	/^void armdis_set_output(ARMDis* dis, FILE* f) {$/;"	f
arminstr_t	src/codegen/arm-codegen.h	/^typedef unsigned int arminstr_t;$/;"	t
armword_t	src/codegen/arm-codegen.h	/^typedef unsigned int armword_t;$/;"	t
as_func_failure	projects/linux-ftk/configure	/^as_func_failure () {$/;"	f
as_func_failure	projects/linux-x11/configure	/^as_func_failure () {$/;"	f
as_func_ret_failure	projects/linux-ftk/configure	/^as_func_ret_failure () {$/;"	f
as_func_ret_failure	projects/linux-x11/configure	/^as_func_ret_failure () {$/;"	f
as_func_ret_success	projects/linux-ftk/configure	/^as_func_ret_success () {$/;"	f
as_func_ret_success	projects/linux-x11/configure	/^as_func_ret_success () {$/;"	f
as_func_success	projects/linux-ftk/configure	/^as_func_success () {$/;"	f
as_func_success	projects/linux-x11/configure	/^as_func_success () {$/;"	f
assert	include/EVC3Inc/ARM/assert.h	16;"	d
assert	include/EVC3Inc/ARM/assert.h	20;"	d
assert	include/EVC3Inc/X86/assert.h	16;"	d
assert	include/EVC3Inc/X86/assert.h	20;"	d
assign_reg	src/codegen/emit.c	/^static void assign_reg(cg_codegen_t * gen,$/;"	f	file:
attribs	ug/ug_ftk.c	/^static int attribs[] = { EGL_RED_SIZE, 1, EGL_NONE }; \/*XXXblythe*\/$/;"	v	file:
attribs2	ug/ug_ftk.c	/^static int attribs2[] = {EGL_RED_SIZE, 1, EGL_DEPTH_SIZE, 1, EGL_NONE};$/;"	v	file:
b	src/Color.h	/^		U8	r, g, b, a;							\/\/ rgba components$/;"	m	class:EGL::Color
b	src/FractionalColor.h	/^		EGL_Fixed	r, g, b, a;			\/\/ rgba components$/;"	m	class:EGL::FractionalColor
b	src/codegen/arm-codegen.h	/^		arminstr_t b       :  1;$/;"	m	struct:__anon84::__anon85
b	src/codegen/arm-codegen.h	/^	arminstr_t b    : 1;$/;"	m	struct:__anon87
base	src/codegen/heap.c	/^	char * base;$/;"	m	struct:block_t	file:
base	src/codegen/instruction.h	/^		cg_virtual_reg_t *  base;$/;"	m	struct:__anon60::__anon61
base	src/codegen/instruction.h	/^		cg_virtual_reg_t *  base;$/;"	m	struct:__anon60::__anon62
base	src/codegen/instruction.h	/^	cg_inst_base_t			base;$/;"	m	struct:cg_inst_call_t
base	src/codegen/instruction.h	/^	cg_inst_base_t			base;$/;"	m	struct:cg_inst_phi_t
base	src/codegen/instruction.h	/^	cg_inst_base_t			base;$/;"	m	union:cg_inst_t
base	src/codegen/instruction.h	/^	cg_inst_base_t		base;$/;"	m	struct:cg_branch_t
base	src/codegen/instruction.h	/^	cg_inst_base_t		base;$/;"	m	struct:cg_inst_binary_t
base	src/codegen/instruction.h	/^	cg_inst_base_t		base;$/;"	m	struct:cg_inst_compare_t
base	src/codegen/instruction.h	/^	cg_inst_base_t		base;$/;"	m	struct:cg_inst_load_immed_t
base	src/codegen/instruction.h	/^	cg_inst_base_t		base;$/;"	m	struct:cg_inst_load_t
base	src/codegen/instruction.h	/^	cg_inst_base_t		base;$/;"	m	struct:cg_inst_ret_t
base	src/codegen/instruction.h	/^	cg_inst_base_t		base;$/;"	m	struct:cg_inst_store_t
base	src/codegen/instruction.h	/^	cg_inst_base_t		base;$/;"	m	struct:cg_inst_unary_t
base	src/codegen/instruction.h	/^	cg_virtual_reg_t *  base;$/;"	m	union:__anon60
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 1$/;"	e	enum:__anon24::Color2Alpha::__anon30	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 1$/;"	e	enum:__anon24::Color2Luminance::__anon29	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 2$/;"	e	enum:__anon24::Color2LuminanceAlpha::__anon31	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 2$/;"	e	enum:__anon24::Color2RGB565::__anon34	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 2$/;"	e	enum:__anon24::Color2RGBA4444::__anon33	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 2$/;"	e	enum:__anon24::Color2RGBA5551::__anon37	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 2$/;"	e	enum:__anon24::RGB5652Color::__anon35	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 2$/;"	e	enum:__anon24::RGBA44442Color::__anon32	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 2$/;"	e	enum:__anon24::RGBA55512Color::__anon36	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 3$/;"	e	enum:__anon24::Color2RGB::__anon26	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 3$/;"	e	enum:__anon24::RGB2Color::__anon25	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 4$/;"	e	enum:__anon24::Color2RGBA::__anon28	file:
baseIncr	src/ContextTexture.cpp	/^			baseIncr = 4$/;"	e	enum:__anon24::RGBA2Color::__anon27	file:
begin_block	src/codegen/emit.c	/^static void begin_block(cg_codegen_t * gen)$/;"	f	file:
begin_proc	src/codegen/emit.c	/^static void begin_proc(cg_codegen_t * gen, cg_proc_t * proc)$/;"	f	file:
bfOffBits	src/linux-ftk/Surface.cpp	/^  int bfOffBits; $/;"	m	struct:tagBITMAPFILEHEADER	file:
bfOffBits	src/linux-x11/Surface.cpp	/^  int bfOffBits; $/;"	m	struct:tagBITMAPFILEHEADER	file:
bfReserved1	src/linux-ftk/Surface.cpp	/^  short bfReserved1; $/;"	m	struct:tagBITMAPFILEHEADER	file:
bfReserved1	src/linux-x11/Surface.cpp	/^  short bfReserved1; $/;"	m	struct:tagBITMAPFILEHEADER	file:
bfReserved2	src/linux-ftk/Surface.cpp	/^  short bfReserved2; $/;"	m	struct:tagBITMAPFILEHEADER	file:
bfReserved2	src/linux-x11/Surface.cpp	/^  short bfReserved2; $/;"	m	struct:tagBITMAPFILEHEADER	file:
bfSize	src/linux-ftk/Surface.cpp	/^  int bfSize; $/;"	m	struct:tagBITMAPFILEHEADER	file:
bfSize	src/linux-x11/Surface.cpp	/^  int bfSize; $/;"	m	struct:tagBITMAPFILEHEADER	file:
bfType	src/linux-ftk/Surface.cpp	/^  short bfType; $/;"	m	struct:tagBITMAPFILEHEADER	file:
bfType	src/linux-x11/Surface.cpp	/^  short bfType; $/;"	m	struct:tagBITMAPFILEHEADER	file:
biBitCount	src/linux-ftk/Surface.cpp	/^    short biBitCount; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biBitCount	src/linux-x11/Surface.cpp	/^    short biBitCount; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biClrImportant	src/linux-ftk/Surface.cpp	/^    int biClrImportant; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biClrImportant	src/linux-x11/Surface.cpp	/^    int biClrImportant; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biClrUsed	src/linux-ftk/Surface.cpp	/^    int biClrUsed; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biClrUsed	src/linux-x11/Surface.cpp	/^    int biClrUsed; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biCompression	src/linux-ftk/Surface.cpp	/^    int biCompression; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biCompression	src/linux-x11/Surface.cpp	/^    int biCompression; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biHeight	src/linux-ftk/Surface.cpp	/^    long biHeight; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biHeight	src/linux-x11/Surface.cpp	/^    long biHeight; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biPlanes	src/linux-ftk/Surface.cpp	/^    short biPlanes; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biPlanes	src/linux-x11/Surface.cpp	/^    short biPlanes; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biSize	src/linux-ftk/Surface.cpp	/^    int biSize; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biSize	src/linux-x11/Surface.cpp	/^    int biSize; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biSizeImage	src/linux-ftk/Surface.cpp	/^    int biSizeImage; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biSizeImage	src/linux-x11/Surface.cpp	/^    int biSizeImage; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biWidth	src/linux-ftk/Surface.cpp	/^    long biWidth; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biWidth	src/linux-x11/Surface.cpp	/^    long biWidth; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biXPelsPerMeter	src/linux-ftk/Surface.cpp	/^    long biXPelsPerMeter; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biXPelsPerMeter	src/linux-x11/Surface.cpp	/^    long biXPelsPerMeter; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biYPelsPerMeter	src/linux-ftk/Surface.cpp	/^    long biYPelsPerMeter; $/;"	m	struct:tagBITMAPINFOHEADER	file:
biYPelsPerMeter	src/linux-x11/Surface.cpp	/^    long biYPelsPerMeter; $/;"	m	struct:tagBITMAPINFOHEADER	file:
binary	src/codegen/instruction.h	/^	cg_inst_binary_t		binary;$/;"	m	union:cg_inst_t
bind_context	ug/ug_ftk.c	/^bind_context(UGCtx_t* ug, UGWindow_t* w) {$/;"	f	file:
bind_context	ug/ug_win32.c	/^bind_context(UGCtx_t* ug, UGWindow_t* w) {$/;"	f	file:
bindir	projects/linux-ftk/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	projects/linux-x11/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bits	src/codegen/bitset.h	/^	U32			bits[1];$/;"	m	struct:cg_bitset_t
bits	test/paint.cpp	/^ BYTE    *bits;$/;"	m	struct:DIB2D	file:
bits	test/paint.cpp	/^ BYTE* bits;$/;"	m	struct:GLTXTLOAD	file:
block	src/codegen/instruction.h	/^	cg_block_t *			block;$/;"	m	struct:cg_block_ref_t
block	src/codegen/instruction.h	/^	cg_block_t *		block;$/;"	m	struct:cg_inst_base_t
block	src/codegen/instruction.h	/^	struct cg_block_t *			block;$/;"	m	struct:cg_block_list_t	typeref:struct:cg_block_list_t::cg_block_t
block_add	src/codegen/instruction.c	/^static void block_add(cg_block_t * block, cg_inst_t * inst)$/;"	f	file:
block_dataflow	src/codegen/instruction.c	/^static void block_dataflow(cg_block_t * block)$/;"	f	file:
block_interferences	src/codegen/instruction.c	/^static void block_interferences(cg_block_t * block)$/;"	f	file:
block_pointer	src/codegen/segment.c	/^static block_t * block_pointer(cg_segment_t * segment, size_t block_index) $/;"	f	file:
block_reorder_instructions	src/codegen/instruction.c	/^static void block_reorder_instructions(cg_block_t * block)$/;"	f	file:
block_reschedule	src/codegen/instruction.c	/^static void block_reschedule(cg_block_t * block, cg_inst_list_head_t * insts)$/;"	f	file:
block_t	src/codegen/heap.c	/^typedef struct block_t $/;"	s	file:
block_t	src/codegen/heap.c	/^} block_t;$/;"	t	typeref:struct:block_t	file:
block_t	src/codegen/segment.c	/^block_t;$/;"	t	typeref:struct:block_t	file:
block_t	src/codegen/segment.c	/^typedef struct block_t $/;"	s	file:
blocks	src/codegen/heap.c	/^	block_t *	blocks;$/;"	m	struct:cg_heap_t	file:
blocks	src/codegen/instruction.h	/^	cg_block_t *		blocks;				\/* linked list of blocks		*\/$/;"	m	struct:cg_proc_t
blocks	src/codegen/segment.c	/^	block_t *		blocks[MAX_BLOCKS];		\/* array of block pointers		*\/$/;"	m	struct:cg_segment_t	file:
bmiColors	src/WinCE/Surface.cpp	/^		DWORD            bmiColors[3];$/;"	m	struct:__anon54::InfoHeader	file:
bmiColors	src/linux-ftk/Surface.cpp	/^		short bmiColors[3];$/;"	m	struct:InfoHeader	file:
bmiColors	src/linux-x11/Surface.cpp	/^		short bmiColors[3];$/;"	m	struct:InfoHeader	file:
bmiColors	src/win/Surface.cpp	/^		DWORD            bmiColors[3];$/;"	m	struct:__anon47::InfoHeader	file:
bmiHeader	src/WinCE/Surface.cpp	/^		BITMAPINFOHEADER bmiHeader;$/;"	m	struct:__anon54::InfoHeader	file:
bmiHeader	src/linux-ftk/Surface.cpp	/^		BITMAPINFOHEADER bmiHeader;$/;"	m	struct:InfoHeader	file:
bmiHeader	src/linux-x11/Surface.cpp	/^		BITMAPINFOHEADER bmiHeader;$/;"	m	struct:InfoHeader	file:
bmiHeader	src/win/Surface.cpp	/^		BITMAPINFOHEADER bmiHeader;$/;"	m	struct:__anon47::InfoHeader	file:
boundBuffer	src/Arrays.h	/^		size_t				boundBuffer;$/;"	m	struct:EGL::VertexArray
boxndex	ug/ugshape.c	/^static GLushort boxndex [12][3] = $/;"	v	file:
boxvec	ug/ugshape.c	/^static GLfloat boxvec[6][3] =$/;"	v	file:
br	src/codegen/arm-codegen.h	/^	ARMInstrBR    br;$/;"	m	union:__anon96
branch	src/codegen/emit.c	/^static void branch(cg_codegen_t * gen, cg_label_t * target)$/;"	f	file:
branch	src/codegen/instruction.h	/^	cg_inst_branch_t		branch;$/;"	m	union:cg_inst_t
branch_cond	src/codegen/emit.c	/^static void branch_cond(cg_codegen_t * gen, cg_label_t * target, ARMCond cond)$/;"	f	file:
buffers	test/epoc/appglobal.h	/^    GLuint buffers[3];$/;"	m	struct:TAppGlobal
buffers	test/paint.cpp	/^GLuint buffers[3];$/;"	v
build	projects/linux-ftk/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	projects/linux-x11/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build_alias	projects/linux-ftk/Makefile	/^build_alias = $/;"	m
build_alias	projects/linux-x11/Makefile	/^build_alias = $/;"	m
build_cpu	projects/linux-ftk/Makefile	/^build_cpu = i686$/;"	m
build_cpu	projects/linux-x11/Makefile	/^build_cpu = i686$/;"	m
build_mmp	projects/epoc/make.bat	/^:build_mmp$/;"	l
build_os	projects/linux-ftk/Makefile	/^build_os = linux-gnu$/;"	m
build_os	projects/linux-x11/Makefile	/^build_os = linux-gnu$/;"	m
build_vendor	projects/linux-ftk/Makefile	/^build_vendor = pc$/;"	m
build_vendor	projects/linux-x11/Makefile	/^build_vendor = pc$/;"	m
calc_arm_mov_const_shift	src/codegen/arm-codegen.c	/^int calc_arm_mov_const_shift(armword_t val) {$/;"	f
call	src/codegen/emit.c	/^static void call(cg_codegen_t * gen, cg_label_t * target,$/;"	f	file:
call	src/codegen/instruction.h	/^	cg_inst_call_t			call;$/;"	m	union:cg_inst_t
call_load_register_args	src/codegen/emit.c	/^static void call_load_register_args(cg_codegen_t * gen, cg_virtual_reg_list_t * begin_args, cg_inst_t * inst)$/;"	f	file:
call_runtime	src/codegen/emit.c	/^static void call_runtime(cg_codegen_t * gen, void * target)$/;"	f	file:
call_store_additional_args	src/codegen/emit.c	/^static void call_store_additional_args(cg_codegen_t * gen, cg_virtual_reg_list_t * args, cg_inst_t * inst)$/;"	f	file:
cdp	src/codegen/arm-codegen.h	/^	ARMInstrCDP   cdp;$/;"	m	union:__anon96
cdt	src/codegen/arm-codegen.h	/^	ARMInstrCDT   cdt;$/;"	m	union:__anon96
cg_bitset_assign	src/codegen/bitset.c	/^void cg_bitset_assign(cg_bitset_t * target, cg_bitset_t * source) $/;"	f
cg_bitset_create	src/codegen/bitset.c	/^cg_bitset_t * cg_bitset_create(cg_heap_t * heap, size_t elements)$/;"	f
cg_bitset_intersects	src/codegen/bitset.c	/^int cg_bitset_intersects(const cg_bitset_t * first, const cg_bitset_t * second) $/;"	f
cg_bitset_t	src/codegen/bitset.h	/^cg_bitset_t;$/;"	t	typeref:struct:cg_bitset_t
cg_bitset_t	src/codegen/bitset.h	/^typedef struct cg_bitset_t$/;"	s
cg_bitset_union	src/codegen/bitset.c	/^int cg_bitset_union(cg_bitset_t * target, cg_bitset_t * source)$/;"	f
cg_bitset_union_minus	src/codegen/bitset.c	/^int cg_bitset_union_minus(cg_bitset_t * target, cg_bitset_t * source,$/;"	f
cg_block_create	src/codegen/instruction.c	/^cg_block_t * cg_block_create(cg_proc_t * proc, int weight)$/;"	f
cg_block_list_t	src/codegen/instruction.h	/^cg_block_list_t;$/;"	t	typeref:struct:cg_block_list_t
cg_block_list_t	src/codegen/instruction.h	/^typedef struct cg_block_list_t $/;"	s
cg_block_ref_create	src/codegen/instruction.c	/^cg_block_ref_t * cg_block_ref_create(cg_proc_t * proc)$/;"	f
cg_block_ref_t	src/arm/CodeGenerator.h	/^	typedef struct cg_block_ref_t cg_block_ref_t;$/;"	t	typeref:struct:cg_block_ref_t
cg_block_ref_t	src/codegen/instruction.h	/^struct cg_block_ref_t$/;"	s
cg_block_ref_t	src/codegen/instruction.h	/^typedef struct cg_block_ref_t cg_block_ref_t;$/;"	t	typeref:struct:cg_block_ref_t
cg_block_t	src/arm/CodeGenerator.h	/^	typedef struct cg_block_t cg_block_t;$/;"	t	typeref:struct:cg_block_t
cg_block_t	src/codegen/instruction.h	/^struct cg_block_t $/;"	s
cg_block_t	src/codegen/instruction.h	/^typedef struct cg_block_t cg_block_t;$/;"	t	typeref:struct:cg_block_t
cg_branch_t	src/codegen/instruction.h	/^typedef struct cg_branch_t$/;"	s
cg_codegen_create	src/codegen/emit.c	/^cg_codegen_t * cg_codegen_create(cg_heap_t * heap, cg_runtime_info_t * runtime,$/;"	f
cg_codegen_create_label	src/codegen/emit.c	/^cg_label_t * cg_codegen_create_label(cg_codegen_t * gen) $/;"	f
cg_codegen_define	src/codegen/emit.c	/^void cg_codegen_define(cg_codegen_t * gen, cg_label_t * label)$/;"	f
cg_codegen_destroy	src/codegen/emit.c	/^void cg_codegen_destroy(cg_codegen_t * gen)$/;"	f
cg_codegen_emit_block	src/codegen/emit.c	/^void cg_codegen_emit_block(cg_codegen_t * gen, cg_block_t * block, int reinit)$/;"	f
cg_codegen_emit_inst	src/codegen/emit.c	/^void cg_codegen_emit_inst(cg_codegen_t * gen, cg_inst_t * inst)$/;"	f
cg_codegen_emit_literal	src/codegen/emit.c	/^size_t cg_codegen_emit_literal(cg_codegen_t * gen, U32 value, int distinct)$/;"	f
cg_codegen_emit_module	src/codegen/emit.c	/^void cg_codegen_emit_module(cg_codegen_t * gen, cg_module_t * module)$/;"	f
cg_codegen_emit_proc	src/codegen/emit.c	/^void cg_codegen_emit_proc(cg_codegen_t * gen, cg_proc_t * proc)$/;"	f
cg_codegen_emit_simple_inst	src/codegen/emit.c	/^void cg_codegen_emit_simple_inst(cg_codegen_t * gen, cg_inst_t * inst)$/;"	f
cg_codegen_fix_refs	src/codegen/emit.c	/^void cg_codegen_fix_refs(cg_codegen_t * gen)$/;"	f
cg_codegen_reference	src/codegen/emit.c	/^void cg_codegen_reference(cg_codegen_t * gen, cg_label_t * label, $/;"	f
cg_codegen_segment	src/codegen/emit.c	/^cg_segment_t * cg_codegen_segment(cg_codegen_t * gen)$/;"	f
cg_codegen_t	src/codegen/emit.c	/^struct cg_codegen_t $/;"	s	file:
cg_codegen_t	src/codegen/emit.h	/^typedef struct cg_codegen_t cg_codegen_t;$/;"	t	typeref:struct:cg_codegen_t
cg_create_inst_binary	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_binary(cg_block_t * block, $/;"	f
cg_create_inst_binary_s	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_binary_s(cg_block_t * block, $/;"	f
cg_create_inst_branch_cond	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_branch_cond(cg_block_t * block, $/;"	f
cg_create_inst_branch_label	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_branch_label(cg_block_t * block, $/;"	f
cg_create_inst_call_func	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_call_func(cg_block_t * block, $/;"	f
cg_create_inst_call_proc	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_call_proc(cg_block_t * block, $/;"	f
cg_create_inst_compare	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_compare(cg_block_t * block, $/;"	f
cg_create_inst_load	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_load(cg_block_t * block, $/;"	f
cg_create_inst_load_immed	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_load_immed(cg_block_t * block, $/;"	f
cg_create_inst_phi	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_phi(cg_block_t * block, $/;"	f
cg_create_inst_ret	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_ret(cg_block_t * block, $/;"	f
cg_create_inst_ret_value	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_ret_value(cg_block_t * block, $/;"	f
cg_create_inst_store	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_store(cg_block_t * block, $/;"	f
cg_create_inst_unary	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_unary(cg_block_t * block, $/;"	f
cg_create_inst_unary_s	src/codegen/instruction.c	/^cg_inst_t * cg_create_inst_unary_s(cg_block_t * block, $/;"	f
cg_create_virtual_reg_list	src/codegen/instruction.c	/^cg_virtual_reg_list_t * cg_create_virtual_reg_list(cg_heap_t * heap, ...)$/;"	f
cg_data_operand_t	src/codegen/instruction.h	/^cg_data_operand_t;$/;"	t	typeref:union:__anon57
cg_heap_allocate	src/codegen/heap.c	/^void * cg_heap_allocate(cg_heap_t * heap, size_t amount)$/;"	f
cg_heap_create	src/codegen/heap.c	/^cg_heap_t * cg_heap_create(size_t default_block_size)$/;"	f
cg_heap_destroy	src/codegen/heap.c	/^void cg_heap_destroy(cg_heap_t * heap)$/;"	f
cg_heap_t	src/codegen/heap.c	/^struct cg_heap_t $/;"	s	file:
cg_heap_t	src/codegen/heap.h	/^typedef struct cg_heap_t cg_heap_t;$/;"	t	typeref:struct:cg_heap_t
cg_inst_arm_binary_immed	src/codegen/instruction.h	/^	cg_inst_arm_binary_immed,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_binary_shift_immed	src/codegen/instruction.h	/^	cg_inst_arm_binary_shift_immed,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_binary_shift_reg	src/codegen/instruction.h	/^	cg_inst_arm_binary_shift_reg,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_compare_immed	src/codegen/instruction.h	/^	cg_inst_arm_compare_immed,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_compare_shift_immed	src/codegen/instruction.h	/^	cg_inst_arm_compare_shift_immed,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_compare_shift_reg	src/codegen/instruction.h	/^	cg_inst_arm_compare_shift_reg,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_load_immed_offset	src/codegen/instruction.h	/^	cg_inst_arm_load_immed_offset,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_load_reg_offset	src/codegen/instruction.h	/^	cg_inst_arm_load_reg_offset,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_store_immed_offset	src/codegen/instruction.h	/^	cg_inst_arm_store_immed_offset,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_store_reg_offset	src/codegen/instruction.h	/^	cg_inst_arm_store_reg_offset,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_unary_immed	src/codegen/instruction.h	/^	cg_inst_arm_unary_immed,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_unary_shift_immed	src/codegen/instruction.h	/^	cg_inst_arm_unary_shift_immed,	$/;"	e	enum:cg_inst_kind_t
cg_inst_arm_unary_shift_reg	src/codegen/instruction.h	/^	cg_inst_arm_unary_shift_reg,	$/;"	e	enum:cg_inst_kind_t
cg_inst_base_t	src/codegen/instruction.h	/^cg_inst_base_t;$/;"	t	typeref:struct:cg_inst_base_t
cg_inst_base_t	src/codegen/instruction.h	/^typedef struct cg_inst_base_t $/;"	s
cg_inst_binary	src/codegen/instruction.h	/^	cg_inst_binary,		$/;"	e	enum:cg_inst_kind_t
cg_inst_binary_t	src/codegen/instruction.h	/^cg_inst_binary_t;$/;"	t	typeref:struct:cg_inst_binary_t
cg_inst_binary_t	src/codegen/instruction.h	/^typedef struct cg_inst_binary_t$/;"	s
cg_inst_branch_cond	src/codegen/instruction.h	/^	cg_inst_branch_cond,	$/;"	e	enum:cg_inst_kind_t
cg_inst_branch_label	src/codegen/instruction.h	/^	cg_inst_branch_label,	$/;"	e	enum:cg_inst_kind_t
cg_inst_branch_t	src/codegen/instruction.h	/^cg_inst_branch_t;$/;"	t	typeref:struct:cg_branch_t
cg_inst_call	src/codegen/instruction.h	/^	cg_inst_call,$/;"	e	enum:cg_inst_kind_t
cg_inst_call_t	src/codegen/instruction.h	/^cg_inst_call_t;$/;"	t	typeref:struct:cg_inst_call_t
cg_inst_call_t	src/codegen/instruction.h	/^typedef struct cg_inst_call_t$/;"	s
cg_inst_compare	src/codegen/instruction.h	/^	cg_inst_compare,	$/;"	e	enum:cg_inst_kind_t
cg_inst_compare_t	src/codegen/instruction.h	/^cg_inst_compare_t;$/;"	t	typeref:struct:cg_inst_compare_t
cg_inst_compare_t	src/codegen/instruction.h	/^typedef struct cg_inst_compare_t$/;"	s
cg_inst_count	src/codegen/instruction.h	/^	cg_inst_count$/;"	e	enum:cg_inst_kind_t
cg_inst_def	src/codegen/instruction.c	/^cg_virtual_reg_t ** cg_inst_def(const cg_inst_t * inst,$/;"	f
cg_inst_kind_t	src/codegen/instruction.h	/^cg_inst_kind_t;$/;"	t	typeref:enum:cg_inst_kind_t
cg_inst_kind_t	src/codegen/instruction.h	/^typedef enum cg_inst_kind_t {$/;"	g
cg_inst_list_head_t	src/codegen/instruction.h	/^cg_inst_list_head_t;$/;"	t	typeref:struct:cg_inst_list_head_t
cg_inst_list_head_t	src/codegen/instruction.h	/^typedef struct cg_inst_list_head_t$/;"	s
cg_inst_list_t	src/codegen/instruction.h	/^cg_inst_list_t;$/;"	t	typeref:struct:cg_inst_list_t
cg_inst_list_t	src/codegen/instruction.h	/^typedef struct cg_inst_list_t$/;"	s
cg_inst_load	src/codegen/instruction.h	/^	cg_inst_load,	$/;"	e	enum:cg_inst_kind_t
cg_inst_load_immed	src/codegen/instruction.h	/^	cg_inst_load_immed,$/;"	e	enum:cg_inst_kind_t
cg_inst_load_immed_t	src/codegen/instruction.h	/^cg_inst_load_immed_t;$/;"	t	typeref:struct:cg_inst_load_immed_t
cg_inst_load_immed_t	src/codegen/instruction.h	/^typedef struct cg_inst_load_immed_t$/;"	s
cg_inst_load_t	src/codegen/instruction.h	/^cg_inst_load_t;$/;"	t	typeref:struct:cg_inst_load_t
cg_inst_load_t	src/codegen/instruction.h	/^typedef struct cg_inst_load_t$/;"	s
cg_inst_none	src/codegen/instruction.h	/^	cg_inst_none,$/;"	e	enum:cg_inst_kind_t
cg_inst_phi	src/codegen/instruction.h	/^	cg_inst_phi,	$/;"	e	enum:cg_inst_kind_t
cg_inst_phi_t	src/codegen/instruction.h	/^cg_inst_phi_t;$/;"	t	typeref:struct:cg_inst_phi_t
cg_inst_phi_t	src/codegen/instruction.h	/^typedef struct cg_inst_phi_t$/;"	s
cg_inst_ret	src/codegen/instruction.h	/^	cg_inst_ret,						$/;"	e	enum:cg_inst_kind_t
cg_inst_ret_t	src/codegen/instruction.h	/^cg_inst_ret_t;$/;"	t	typeref:struct:cg_inst_ret_t
cg_inst_ret_t	src/codegen/instruction.h	/^typedef struct cg_inst_ret_t$/;"	s
cg_inst_store	src/codegen/instruction.h	/^	cg_inst_store,	$/;"	e	enum:cg_inst_kind_t
cg_inst_store_t	src/codegen/instruction.h	/^cg_inst_store_t;$/;"	t	typeref:struct:cg_inst_store_t
cg_inst_store_t	src/codegen/instruction.h	/^typedef struct cg_inst_store_t$/;"	s
cg_inst_t	src/codegen/instruction.h	/^typedef union cg_inst_t cg_inst_t;$/;"	t	typeref:union:cg_inst_t
cg_inst_t	src/codegen/instruction.h	/^union cg_inst_t$/;"	u
cg_inst_unary	src/codegen/instruction.h	/^	cg_inst_unary,		$/;"	e	enum:cg_inst_kind_t
cg_inst_unary_t	src/codegen/instruction.h	/^cg_inst_unary_t;$/;"	t	typeref:struct:cg_inst_unary_t
cg_inst_unary_t	src/codegen/instruction.h	/^typedef struct cg_inst_unary_t$/;"	s
cg_inst_use	src/codegen/instruction.c	/^cg_virtual_reg_t ** cg_inst_use(const cg_inst_t * inst,$/;"	f
cg_label_t	src/codegen/emit.c	/^struct cg_label_t $/;"	s	file:
cg_label_t	src/codegen/emit.h	/^typedef struct cg_label_t cg_label_t;$/;"	t	typeref:struct:cg_label_t
cg_mem_operand_t	src/codegen/instruction.h	/^cg_mem_operand_t;$/;"	t	typeref:union:__anon60
cg_module_allocate_variables	src/codegen/instruction.c	/^void cg_module_allocate_variables(cg_module_t * module)$/;"	f
cg_module_amode	src/codegen/instruction.c	/^void cg_module_amode(cg_module_t * module)$/;"	f
cg_module_create	src/codegen/instruction.c	/^cg_module_t * cg_module_create(cg_heap_t * heap)$/;"	f
cg_module_dataflow	src/codegen/instruction.c	/^void cg_module_dataflow(cg_module_t * module)$/;"	f
cg_module_dump	src/codegen/instruction.c	/^void cg_module_dump(cg_module_t * module, FILE * out)$/;"	f
cg_module_eliminate_dead_code	src/codegen/instruction.c	/^void cg_module_eliminate_dead_code(cg_module_t * module)$/;"	f
cg_module_inst_def	src/codegen/instruction.c	/^void cg_module_inst_def(cg_module_t * module)$/;"	f
cg_module_inst_use_chains	src/codegen/instruction.c	/^void cg_module_inst_use_chains(cg_module_t * module)$/;"	f
cg_module_interferences	src/codegen/instruction.c	/^void cg_module_interferences(cg_module_t * module)$/;"	f
cg_module_reorder_instructions	src/codegen/instruction.c	/^void cg_module_reorder_instructions(cg_module_t * module)$/;"	f
cg_module_t	src/arm/CodeGenerator.h	/^	typedef struct cg_module_t cg_module_t;$/;"	t	typeref:struct:cg_module_t
cg_module_t	src/codegen/instruction.h	/^struct cg_module_t$/;"	s
cg_module_t	src/codegen/instruction.h	/^typedef struct cg_module_t cg_module_t;$/;"	t	typeref:struct:cg_module_t
cg_module_unify_registers	src/codegen/instruction.c	/^void cg_module_unify_registers(cg_module_t * module)$/;"	f
cg_op_abs	src/codegen/instruction.h	/^	cg_op_fsub,		cg_op_finv,		cg_op_fsqrt,	cg_op_abs,		cg_op_log2,$/;"	e	enum:cg_opcode_t
cg_op_add	src/codegen/instruction.h	/^	cg_op_add,		cg_op_and,		cg_op_asr,		cg_op_cmp,		cg_op_div,		$/;"	e	enum:cg_opcode_t
cg_op_and	src/codegen/instruction.h	/^	cg_op_add,		cg_op_and,		cg_op_asr,		cg_op_cmp,		cg_op_div,		$/;"	e	enum:cg_opcode_t
cg_op_asr	src/codegen/instruction.h	/^	cg_op_add,		cg_op_and,		cg_op_asr,		cg_op_cmp,		cg_op_div,		$/;"	e	enum:cg_opcode_t
cg_op_beq	src/codegen/instruction.h	/^	cg_op_beq,		cg_op_bge,		cg_op_ble,		cg_op_bgt,		cg_op_blt,		$/;"	e	enum:cg_opcode_t
cg_op_bge	src/codegen/instruction.h	/^	cg_op_beq,		cg_op_bge,		cg_op_ble,		cg_op_bgt,		cg_op_blt,		$/;"	e	enum:cg_opcode_t
cg_op_bgt	src/codegen/instruction.h	/^	cg_op_beq,		cg_op_bge,		cg_op_ble,		cg_op_bgt,		cg_op_blt,		$/;"	e	enum:cg_opcode_t
cg_op_ble	src/codegen/instruction.h	/^	cg_op_beq,		cg_op_bge,		cg_op_ble,		cg_op_bgt,		cg_op_blt,		$/;"	e	enum:cg_opcode_t
cg_op_blt	src/codegen/instruction.h	/^	cg_op_beq,		cg_op_bge,		cg_op_ble,		cg_op_bgt,		cg_op_blt,		$/;"	e	enum:cg_opcode_t
cg_op_bne	src/codegen/instruction.h	/^	cg_op_bne,		cg_op_bra,			$/;"	e	enum:cg_opcode_t
cg_op_bra	src/codegen/instruction.h	/^	cg_op_bne,		cg_op_bra,			$/;"	e	enum:cg_opcode_t
cg_op_call	src/codegen/instruction.h	/^	cg_op_call,		cg_op_ret,		cg_op_phi$/;"	e	enum:cg_opcode_t
cg_op_cmp	src/codegen/instruction.h	/^	cg_op_add,		cg_op_and,		cg_op_asr,		cg_op_cmp,		cg_op_div,		$/;"	e	enum:cg_opcode_t
cg_op_div	src/codegen/instruction.h	/^	cg_op_add,		cg_op_and,		cg_op_asr,		cg_op_cmp,		cg_op_div,		$/;"	e	enum:cg_opcode_t
cg_op_fadd	src/codegen/instruction.h	/^	cg_op_fadd,		cg_op_fcmp,		cg_op_fdiv,		cg_op_fmul,		cg_op_fneg,		$/;"	e	enum:cg_opcode_t
cg_op_fcmp	src/codegen/instruction.h	/^	cg_op_fadd,		cg_op_fcmp,		cg_op_fdiv,		cg_op_fmul,		cg_op_fneg,		$/;"	e	enum:cg_opcode_t
cg_op_fcnv	src/codegen/instruction.h	/^	cg_op_trunc,	cg_op_round,	cg_op_fcnv,															$/;"	e	enum:cg_opcode_t
cg_op_fdiv	src/codegen/instruction.h	/^	cg_op_fadd,		cg_op_fcmp,		cg_op_fdiv,		cg_op_fmul,		cg_op_fneg,		$/;"	e	enum:cg_opcode_t
cg_op_finv	src/codegen/instruction.h	/^	cg_op_fsub,		cg_op_finv,		cg_op_fsqrt,	cg_op_abs,		cg_op_log2,$/;"	e	enum:cg_opcode_t
cg_op_fmul	src/codegen/instruction.h	/^	cg_op_fadd,		cg_op_fcmp,		cg_op_fdiv,		cg_op_fmul,		cg_op_fneg,		$/;"	e	enum:cg_opcode_t
cg_op_fneg	src/codegen/instruction.h	/^	cg_op_fadd,		cg_op_fcmp,		cg_op_fdiv,		cg_op_fmul,		cg_op_fneg,		$/;"	e	enum:cg_opcode_t
cg_op_fsqrt	src/codegen/instruction.h	/^	cg_op_fsub,		cg_op_finv,		cg_op_fsqrt,	cg_op_abs,		cg_op_log2,$/;"	e	enum:cg_opcode_t
cg_op_fsub	src/codegen/instruction.h	/^	cg_op_fsub,		cg_op_finv,		cg_op_fsqrt,	cg_op_abs,		cg_op_log2,$/;"	e	enum:cg_opcode_t
cg_op_ldb	src/codegen/instruction.h	/^	cg_op_ldb,		cg_op_ldh,		cg_op_ldi,		cg_op_ldw,		cg_op_stb,		$/;"	e	enum:cg_opcode_t
cg_op_ldh	src/codegen/instruction.h	/^	cg_op_ldb,		cg_op_ldh,		cg_op_ldi,		cg_op_ldw,		cg_op_stb,		$/;"	e	enum:cg_opcode_t
cg_op_ldi	src/codegen/instruction.h	/^	cg_op_ldb,		cg_op_ldh,		cg_op_ldi,		cg_op_ldw,		cg_op_stb,		$/;"	e	enum:cg_opcode_t
cg_op_ldw	src/codegen/instruction.h	/^	cg_op_ldb,		cg_op_ldh,		cg_op_ldi,		cg_op_ldw,		cg_op_stb,		$/;"	e	enum:cg_opcode_t
cg_op_log2	src/codegen/instruction.h	/^	cg_op_fsub,		cg_op_finv,		cg_op_fsqrt,	cg_op_abs,		cg_op_log2,$/;"	e	enum:cg_opcode_t
cg_op_lsl	src/codegen/instruction.h	/^	cg_op_lsl,		cg_op_lsr,		cg_op_mod,		cg_op_mul,		cg_op_neg,	$/;"	e	enum:cg_opcode_t
cg_op_lsr	src/codegen/instruction.h	/^	cg_op_lsl,		cg_op_lsr,		cg_op_mod,		cg_op_mul,		cg_op_neg,	$/;"	e	enum:cg_opcode_t
cg_op_max	src/codegen/instruction.h	/^	cg_op_min,		cg_op_max,$/;"	e	enum:cg_opcode_t
cg_op_min	src/codegen/instruction.h	/^	cg_op_min,		cg_op_max,$/;"	e	enum:cg_opcode_t
cg_op_mod	src/codegen/instruction.h	/^	cg_op_lsl,		cg_op_lsr,		cg_op_mod,		cg_op_mul,		cg_op_neg,	$/;"	e	enum:cg_opcode_t
cg_op_mul	src/codegen/instruction.h	/^	cg_op_lsl,		cg_op_lsr,		cg_op_mod,		cg_op_mul,		cg_op_neg,	$/;"	e	enum:cg_opcode_t
cg_op_neg	src/codegen/instruction.h	/^	cg_op_lsl,		cg_op_lsr,		cg_op_mod,		cg_op_mul,		cg_op_neg,	$/;"	e	enum:cg_opcode_t
cg_op_nop	src/codegen/instruction.h	/^	cg_op_nop,					$/;"	e	enum:cg_opcode_t
cg_op_not	src/codegen/instruction.h	/^	cg_op_not,		cg_op_or,		cg_op_sub,		cg_op_xor,				$/;"	e	enum:cg_opcode_t
cg_op_or	src/codegen/instruction.h	/^	cg_op_not,		cg_op_or,		cg_op_sub,		cg_op_xor,				$/;"	e	enum:cg_opcode_t
cg_op_phi	src/codegen/instruction.h	/^	cg_op_call,		cg_op_ret,		cg_op_phi$/;"	e	enum:cg_opcode_t
cg_op_ret	src/codegen/instruction.h	/^	cg_op_call,		cg_op_ret,		cg_op_phi$/;"	e	enum:cg_opcode_t
cg_op_round	src/codegen/instruction.h	/^	cg_op_trunc,	cg_op_round,	cg_op_fcnv,															$/;"	e	enum:cg_opcode_t
cg_op_stb	src/codegen/instruction.h	/^	cg_op_ldb,		cg_op_ldh,		cg_op_ldi,		cg_op_ldw,		cg_op_stb,		$/;"	e	enum:cg_opcode_t
cg_op_sth	src/codegen/instruction.h	/^	cg_op_sth,		cg_op_stw,							$/;"	e	enum:cg_opcode_t
cg_op_stw	src/codegen/instruction.h	/^	cg_op_sth,		cg_op_stw,							$/;"	e	enum:cg_opcode_t
cg_op_sub	src/codegen/instruction.h	/^	cg_op_not,		cg_op_or,		cg_op_sub,		cg_op_xor,				$/;"	e	enum:cg_opcode_t
cg_op_trunc	src/codegen/instruction.h	/^	cg_op_trunc,	cg_op_round,	cg_op_fcnv,															$/;"	e	enum:cg_opcode_t
cg_op_xor	src/codegen/instruction.h	/^	cg_op_not,		cg_op_or,		cg_op_sub,		cg_op_xor,				$/;"	e	enum:cg_opcode_t
cg_opcode_t	src/codegen/instruction.h	/^cg_opcode_t;$/;"	t	typeref:enum:cg_opcode_t
cg_opcode_t	src/codegen/instruction.h	/^typedef enum cg_opcode_t {$/;"	g
cg_physical_reg_t	src/codegen/emit.c	/^cg_physical_reg_t;$/;"	t	typeref:struct:cg_physical_reg_t	file:
cg_physical_reg_t	src/codegen/emit.c	/^typedef struct cg_physical_reg_t $/;"	s	file:
cg_proc_create	src/codegen/instruction.c	/^cg_proc_t * cg_proc_create(cg_module_t * module)$/;"	f
cg_proc_t	src/arm/CodeGenerator.h	/^	typedef struct cg_proc_t cg_proc_t;$/;"	t	typeref:struct:cg_proc_t
cg_proc_t	src/codegen/instruction.h	/^struct cg_proc_t $/;"	s
cg_proc_t	src/codegen/instruction.h	/^typedef struct cg_proc_t cg_proc_t;$/;"	t	typeref:struct:cg_proc_t
cg_processor_info_t	src/codegen/emit.h	/^cg_processor_info_t;$/;"	t	typeref:struct:cg_processor_info_t
cg_processor_info_t	src/codegen/emit.h	/^typedef struct cg_processor_info_t $/;"	s
cg_reference_absolute32	src/codegen/emit.h	/^	cg_reference_absolute32,				\/* absolute 32-bit address		*\/$/;"	e	enum:__anon97
cg_reference_branch24	src/codegen/emit.h	/^	cg_reference_branch24,					\/* branch relative from code	*\/$/;"	e	enum:__anon97
cg_reference_offset12	src/codegen/emit.h	/^	cg_reference_offset12,					\/* LDR relative from code		*\/$/;"	e	enum:__anon97
cg_reference_type_t	src/codegen/emit.h	/^cg_reference_type_t;$/;"	t	typeref:enum:__anon97
cg_reg_type_flags	src/codegen/instruction.h	/^	cg_reg_type_flags$/;"	e	enum:cg_reg_type_t
cg_reg_type_general	src/codegen/instruction.h	/^	cg_reg_type_general,$/;"	e	enum:cg_reg_type_t
cg_reg_type_t	src/codegen/instruction.h	/^cg_reg_type_t;$/;"	t	typeref:enum:cg_reg_type_t
cg_reg_type_t	src/codegen/instruction.h	/^typedef enum cg_reg_type_t$/;"	g
cg_runtime_info_t	src/codegen/emit.h	/^cg_runtime_info_t;$/;"	t	typeref:struct:cg_runtime_info_t
cg_runtime_info_t	src/codegen/emit.h	/^typedef struct cg_runtime_info_t$/;"	s
cg_segment_align	src/codegen/segment.c	/^size_t cg_segment_align(cg_segment_t * segment, size_t alignment)$/;"	f
cg_segment_create	src/codegen/segment.c	/^cg_segment_t * cg_segment_create(const char * name)$/;"	f
cg_segment_destroy	src/codegen/segment.c	/^void cg_segment_destroy(cg_segment_t * segment)$/;"	f
cg_segment_emit_block	src/codegen/segment.c	/^void cg_segment_emit_block(cg_segment_t * segment, const void * p, size_t size)$/;"	f
cg_segment_emit_i16	src/codegen/segment.c	/^void cg_segment_emit_i16(cg_segment_t * segment, I16 half_word) $/;"	f
cg_segment_emit_i32	src/codegen/segment.c	/^void cg_segment_emit_i32(cg_segment_t * segment, I32 word)$/;"	f
cg_segment_emit_i8	src/codegen/segment.c	/^void cg_segment_emit_i8(cg_segment_t * segment, I8 byte) $/;"	f
cg_segment_emit_u16	src/codegen/segment.c	/^void cg_segment_emit_u16(cg_segment_t * segment, U16 half_word) $/;"	f
cg_segment_emit_u32	src/codegen/segment.c	/^void cg_segment_emit_u32(cg_segment_t * segment, U32 word)$/;"	f
cg_segment_emit_u8	src/codegen/segment.c	/^void cg_segment_emit_u8(cg_segment_t * segment, U8 byte) $/;"	f
cg_segment_get_block	src/codegen/segment.c	/^void cg_segment_get_block(cg_segment_t * segment, size_t offset, void * p, $/;"	f
cg_segment_get_i16	src/codegen/segment.c	/^I16 cg_segment_get_i16(cg_segment_t * segment, size_t offset)$/;"	f
cg_segment_get_i32	src/codegen/segment.c	/^I32 cg_segment_get_i32(cg_segment_t * segment, size_t offset)$/;"	f
cg_segment_get_i8	src/codegen/segment.c	/^I8 cg_segment_get_i8(cg_segment_t * segment, size_t offset)$/;"	f
cg_segment_get_u16	src/codegen/segment.c	/^U16 cg_segment_get_u16(cg_segment_t * segment, size_t offset)$/;"	f
cg_segment_get_u32	src/codegen/segment.c	/^U32 cg_segment_get_u32(cg_segment_t * segment, size_t offset)$/;"	f
cg_segment_get_u8	src/codegen/segment.c	/^U8 cg_segment_get_u8(cg_segment_t * segment, size_t offset)$/;"	f
cg_segment_name	src/codegen/segment.c	/^const char * cg_segment_name(cg_segment_t * segment)$/;"	f
cg_segment_set_block	src/codegen/segment.c	/^void cg_segment_set_block(cg_segment_t * segment, size_t offset, const void * p, $/;"	f
cg_segment_set_i16	src/codegen/segment.c	/^void cg_segment_set_i16(cg_segment_t * segment, size_t offset, I16 half_word)$/;"	f
cg_segment_set_i32	src/codegen/segment.c	/^void cg_segment_set_i32(cg_segment_t * segment, size_t offset, I32 word)$/;"	f
cg_segment_set_i8	src/codegen/segment.c	/^void cg_segment_set_i8(cg_segment_t * segment, size_t offset, I8 byte)$/;"	f
cg_segment_set_u16	src/codegen/segment.c	/^void cg_segment_set_u16(cg_segment_t * segment, size_t offset, U16 half_word)$/;"	f
cg_segment_set_u32	src/codegen/segment.c	/^void cg_segment_set_u32(cg_segment_t * segment, size_t offset, U32 word)$/;"	f
cg_segment_set_u8	src/codegen/segment.c	/^void cg_segment_set_u8(cg_segment_t * segment, size_t offset, U8 byte)$/;"	f
cg_segment_size	src/codegen/segment.c	/^size_t cg_segment_size(cg_segment_t * segment) $/;"	f
cg_segment_t	src/codegen/segment.c	/^struct cg_segment_t $/;"	s	file:
cg_segment_t	src/codegen/segment.h	/^typedef struct cg_segment_t cg_segment_t;$/;"	t	typeref:struct:cg_segment_t
cg_shift_asr	src/codegen/instruction.h	/^	cg_shift_asr,$/;"	e	enum:cg_shift_op_t
cg_shift_lsl	src/codegen/instruction.h	/^	cg_shift_lsl,$/;"	e	enum:cg_shift_op_t
cg_shift_lsr	src/codegen/instruction.h	/^	cg_shift_lsr,$/;"	e	enum:cg_shift_op_t
cg_shift_op_t	src/codegen/instruction.h	/^cg_shift_op_t;$/;"	t	typeref:enum:cg_shift_op_t
cg_shift_op_t	src/codegen/instruction.h	/^typedef enum cg_shift_op_t$/;"	g
cg_shift_ror	src/codegen/instruction.h	/^	cg_shift_ror$/;"	e	enum:cg_shift_op_t
cg_virtual_reg_create	src/codegen/instruction.c	/^cg_virtual_reg_t * cg_virtual_reg_create(cg_proc_t * proc, cg_reg_type_t type)$/;"	f
cg_virtual_reg_list_t	src/codegen/instruction.h	/^cg_virtual_reg_list_t;$/;"	t	typeref:struct:cg_virtual_reg_list_t
cg_virtual_reg_list_t	src/codegen/instruction.h	/^typedef struct cg_virtual_reg_list_t$/;"	s
cg_virtual_reg_t	src/arm/CodeGenerator.h	/^	typedef struct cg_virtual_reg_t cg_virtual_reg_t;$/;"	t	typeref:struct:cg_virtual_reg_t
cg_virtual_reg_t	src/codegen/instruction.h	/^struct cg_virtual_reg_t $/;"	s
cg_virtual_reg_t	src/codegen/instruction.h	/^typedef struct cg_virtual_reg_t cg_virtual_reg_t;$/;"	t	typeref:struct:cg_virtual_reg_t
charpoint	redbook/stroke.c	/^typedef struct charpoint {$/;"	s	file:
checkImage	redbook/checker.c	/^static GLubyte checkImage[checkImageHeight][checkImageWidth][4];$/;"	v	file:
checkImage	redbook/texbind.c	/^static GLubyte checkImage[checkImageHeight][checkImageWidth][4];$/;"	v	file:
checkImage	redbook/texsub.c	/^static GLubyte checkImage[checkImageHeight][checkImageWidth][4];$/;"	v	file:
checkImage	redbook/wrap.c	/^static GLubyte checkImage[checkImageHeight][checkImageWidth][4];$/;"	v	file:
checkImageHeight	redbook/checker.c	49;"	d	file:
checkImageHeight	redbook/texbind.c	47;"	d	file:
checkImageHeight	redbook/texsub.c	51;"	d	file:
checkImageHeight	redbook/wrap.c	53;"	d	file:
checkImageWidth	redbook/checker.c	48;"	d	file:
checkImageWidth	redbook/texbind.c	46;"	d	file:
checkImageWidth	redbook/texsub.c	50;"	d	file:
checkImageWidth	redbook/wrap.c	52;"	d	file:
chk_out	src/codegen/arm-dis.c	/^void chk_out(ARMDis* dis) {$/;"	f
clamp	src/Color.h	/^		static inline U8 clamp(U16 value) {$/;"	f	class:EGL::Color
clz	src/codegen/arm-codegen.h	/^	ARMInstrCLZ   clz;$/;"	m	union:__anon96
compare	src/codegen/instruction.h	/^	cg_inst_compare_t		compare;$/;"	m	union:cg_inst_t
cond	src/codegen/arm-codegen.h	/^		arminstr_t cond    :  4;$/;"	m	struct:__anon84::__anon85
cond	src/codegen/arm-codegen.h	/^		arminstr_t cond   :  4;$/;"	m	struct:__anon80::__anon81
cond	src/codegen/arm-codegen.h	/^		arminstr_t cond : 4;$/;"	m	struct:__anon92::__anon93
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond     :  4;$/;"	m	struct:__anon82
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond   :  4;$/;"	m	struct:__anon73
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond   : 4;$/;"	m	struct:__anon83
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond   : 4;$/;"	m	struct:__anon86
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond  :  4;$/;"	m	struct:__anon72
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond :  4;$/;"	m	struct:__anon88
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond :  4;$/;"	m	struct:__anon94
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond :  4;$/;"	m	struct:__anon95
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond : 4;$/;"	m	struct:__anon87
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond : 4;$/;"	m	struct:__anon89
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond : 4;$/;"	m	struct:__anon90
cond	src/codegen/arm-codegen.h	/^	arminstr_t cond : 4;$/;"	m	struct:__anon91
cond	src/codegen/arm-dis.c	/^const static char* cond[] = {$/;"	v	file:
cond	src/codegen/instruction.h	/^	cg_virtual_reg_t *  cond;$/;"	m	struct:cg_branch_t
consolidate_amode	src/codegen/instruction.c	/^static amode_t consolidate_amode(cg_data_operand_t * operand)$/;"	f	file:
consolidate_dmode	src/codegen/instruction.c	/^static dmode_t consolidate_dmode(cg_mem_operand_t * operand)$/;"	f	file:
context	ug/ug_ftk.c	/^static UGCtx_t* context = NULL;$/;"	v	file:
context	ug/ug_win32.c	/^static UGCtx_t * context;$/;"	v	file:
count_uses	src/codegen/instruction.c	/^static void count_uses(int * result, cg_block_t * block) $/;"	f	file:
cpn	src/codegen/arm-codegen.h	/^	arminstr_t cpn  : 4; \/* CP number *\/$/;"	m	struct:__anon89
cpn	src/codegen/arm-codegen.h	/^	arminstr_t cpn  : 4;$/;"	m	struct:__anon90
cpn	src/codegen/arm-codegen.h	/^	arminstr_t cpn  : 4;$/;"	m	struct:__anon91
crd	src/codegen/arm-codegen.h	/^	arminstr_t crd  : 4;$/;"	m	struct:__anon89
crd	src/codegen/arm-codegen.h	/^	arminstr_t crd  : 4;$/;"	m	struct:__anon90
create_block	src/codegen/heap.c	/^static block_t * create_block(size_t block_size) $/;"	f	file:
crm	src/codegen/arm-codegen.h	/^	arminstr_t crm  : 4;$/;"	m	struct:__anon89
crm	src/codegen/arm-codegen.h	/^	arminstr_t crm  : 4;$/;"	m	struct:__anon91
crn	src/codegen/arm-codegen.h	/^	arminstr_t crn  : 4;$/;"	m	struct:__anon89
crn	src/codegen/arm-codegen.h	/^	arminstr_t crn  : 4;$/;"	m	struct:__anon91
crossf	ug/uglu.c	/^crossf(float v0[3], float v1[3], float r[3])$/;"	f	file:
crossx	ug/uglu.c	/^crossx(GLfixed v0[3], GLfixed v1[3], GLfixed r[3])$/;"	f	file:
crt	src/codegen/arm-codegen.h	/^	ARMInstrCRT   crt;$/;"	m	union:__anon96
cseg	src/codegen/emit.c	/^	cg_segment_t *			cseg;$/;"	m	struct:cg_codegen_t	file:
current	src/codegen/heap.c	/^	size_t current;$/;"	m	struct:block_t	file:
current_block	src/codegen/emit.c	/^	cg_block_t *			current_block;$/;"	m	struct:cg_codegen_t	file:
current_size	src/codegen/segment.c	/^	size_t			current_size;			\/* current size of the segment	*\/$/;"	m	struct:cg_segment_t	file:
data_pointer	src/codegen/segment.c	/^static void * data_pointer(cg_segment_t * segment, size_t offset) $/;"	f	file:
datadir	projects/linux-ftk/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	projects/linux-x11/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	projects/linux-ftk/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	projects/linux-x11/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
day	redbook/planet.c	/^static int year = 0, day = 0;$/;"	v	file:
dc_install_base	projects/linux-ftk/Makefile	/^	dc_install_base=`$(am__cd) $(distdir)\/_inst && pwd | sed -e 's,^[^:\\\\\/]:[\\\\\/],\/,'` \\$/;"	m
dc_install_base	projects/linux-x11/Makefile	/^	dc_install_base=`$(am__cd) $(distdir)\/_inst && pwd | sed -e 's,^[^:\\\\\/]:[\\\\\/],\/,'` \\$/;"	m
deallocate_reg	src/codegen/emit.c	/^static void deallocate_reg(cg_codegen_t * gen, cg_physical_reg_t * physical_reg)$/;"	f	file:
def	src/codegen/instruction.h	/^	cg_inst_t *					def;				\/* defining instruction			*\/$/;"	m	struct:cg_virtual_reg_t
def	src/codegen/instruction.h	/^	struct cg_bitset_t *	def;			\/* set of defined regs			*\/$/;"	m	struct:cg_block_t	typeref:struct:cg_block_t::cg_bitset_t
def_cost	src/codegen/instruction.h	/^	short						def_cost;			\/* definition cost				*\/$/;"	m	struct:cg_virtual_reg_t
default_block_size	src/codegen/heap.c	/^	size_t		default_block_size;$/;"	m	struct:cg_heap_t	file:
defined	src/codegen/emit.c	/^	int						defined:1;$/;"	m	struct:cg_physical_reg_t	file:
deltaX	test/testce.cpp	/^float deltaX = 4.0f;$/;"	v
deltaY	test/testce.cpp	/^float deltaY = 3.0f;$/;"	v
deltaZ	test/testce.cpp	/^float deltaZ = 2.0f;$/;"	v
depcomp	projects/linux-ftk/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	projects/linux-x11/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depth	src/Rasterizer.h	/^		EGL_Fixed		depth;		\/\/ depth coordinate after transformation$/;"	m	struct:EGL::ScreenCoord
depth	src/Rasterizer.h	/^		EGL_Fixed		depth;		\/\/ depth coordinate$/;"	m	struct:EGL::EdgeCoord
derefMethod	redbook/varray.c	/^int derefMethod = DRAWARRAY;$/;"	v
dest	src/codegen/instruction.h	/^	cg_virtual_reg_t *		dest;$/;"	m	struct:cg_inst_call_t
dest	src/codegen/instruction.h	/^	cg_virtual_reg_t *		dest;$/;"	m	struct:cg_inst_phi_t
dest	src/codegen/instruction.h	/^	cg_virtual_reg_t *  dest;$/;"	m	struct:cg_inst_load_immed_t
dest	src/codegen/instruction.h	/^	cg_virtual_reg_t *  dest;$/;"	m	struct:cg_inst_load_t
dest_flags	src/codegen/instruction.h	/^	cg_virtual_reg_t *  dest_flags;$/;"	m	struct:cg_inst_binary_t
dest_flags	src/codegen/instruction.h	/^	cg_virtual_reg_t *  dest_flags;$/;"	m	struct:cg_inst_compare_t
dest_flags	src/codegen/instruction.h	/^	cg_virtual_reg_t *  dest_flags;$/;"	m	struct:cg_inst_unary_t
dest_value	src/codegen/instruction.h	/^	cg_virtual_reg_t *  dest_value;$/;"	m	struct:cg_inst_binary_t
dest_value	src/codegen/instruction.h	/^	cg_virtual_reg_t *  dest_value;$/;"	m	struct:cg_inst_unary_t
diffuse	test/epoc/paint.cpp	/^ GLfloat diffuse[3];$/;"	m	struct:sample_MATERIAL	file:
diffuse	test/paint.cpp	/^ GLfloat diffuse[3];$/;"	m	struct:sample_MATERIAL	file:
diffuseMaterial	redbook/colormat.c	/^GLfloat diffuseMaterial[4] = { 0.5, 0.5, 0.5, 1.0 };$/;"	v
dirty	src/codegen/emit.c	/^	int						dirty: 1;$/;"	m	struct:cg_physical_reg_t	file:
dis_out	src/codegen/arm-dis.h	/^	FILE* dis_out;$/;"	m	struct:_ARMDis
dispatch_inst	src/codegen/emit.c	/^static void dispatch_inst(cg_codegen_t * gen, cg_inst_t * inst, int update_flags)$/;"	f	file:
display	demos/hello.c	/^void display(UGWindow uwin)$/;"	f
display	demos/l.c	/^static void display(UGWindow uwin)$/;"	f	file:
display	demos/lines.cpp	/^void display(UGWindow uwin)$/;"	f
display	redbook/aargb.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/alpha.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/alpha3D.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/checker.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/colormat.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/cube.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/double.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/fog.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/hello.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/light.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/lines.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/material.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/mipmap.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/model.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/movelight.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/planet.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/polyoff.c	/^void display (UGWindow uwin)$/;"	f
display	redbook/robot.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/scene.c	/^void display (UGWindow uwin)$/;"	f
display	redbook/smooth.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/stencil.c	/^void display(void)$/;"	f
display	redbook/stroke.c	/^void display(void)$/;"	f
display	redbook/texbind.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/texsub.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/torus.c	/^void display(UGWindow win)$/;"	f
display	redbook/varray.c	/^void display(UGWindow uwin)$/;"	f
display	redbook/wrap.c	/^void display(UGWindow uwin)$/;"	f
display	src/linux-x11/egl.cpp	/^EGLDisplay display;$/;"	v
distcleancheck_listfiles	projects/linux-ftk/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distcleancheck_listfiles	projects/linux-x11/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	projects/linux-ftk/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distdir	projects/linux-x11/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	projects/linux-ftk/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
distuninstallcheck_listfiles	projects/linux-x11/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
div	src/codegen/emit.h	/^	div_t (*div)				(I32 numer, I32 denom);	\/* Std. C runtime	*\/$/;"	m	struct:cg_runtime_info_t
div_HP_16_32s	src/codegen/emit.h	/^	I32 (*div_HP_16_32s)		(I32 num, I32 denom);$/;"	m	struct:cg_runtime_info_t
div_LP_16_32s	src/codegen/emit.h	/^	I32 (*div_LP_16_32s)		(I32 num, I32 denom);$/;"	m	struct:cg_runtime_info_t
dmode_immed_offset	src/codegen/instruction.c	/^	dmode_immed_offset,$/;"	e	enum:__anon64	file:
dmode_reg_offset	src/codegen/instruction.c	/^	dmode_reg_offset$/;"	e	enum:__anon64	file:
dmode_register	src/codegen/instruction.c	/^	dmode_register,$/;"	e	enum:__anon64	file:
dmode_t	src/codegen/instruction.c	/^dmode_t;$/;"	t	typeref:enum:__anon64	file:
docdir	projects/linux-ftk/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE}$/;"	m
docdir	projects/linux-x11/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE}$/;"	m
dpi	src/codegen/arm-codegen.h	/^	ARMInstrDPI   dpi;$/;"	m	union:__anon96
dpy	ug/ug_ftk.c	/^    NativeDisplayType dpy;$/;"	m	struct:__anon1	file:
dpy	ug/ug_win32.c	/^    NativeDisplayType dpy;$/;"	m	struct:__anon2	file:
draw	ug/ug_ftk.c	/^    void (*draw)(UGWindow w);$/;"	m	struct:ugwindow	file:
draw	ug/ug_win32.c	/^    void (*draw)(UGWindow w);$/;"	m	struct:ugwindow	file:
drawLeftTriangle	redbook/alpha.c	/^static void drawLeftTriangle(void)$/;"	f	file:
drawLetter	redbook/stroke.c	/^static void drawLetter(CP *l)$/;"	f	file:
drawOneLine	demos/lines.cpp	/^static void drawOneLine(float x1, float y1, float x2, float y2) {$/;"	f	file:
drawOneLine	redbook/lines.c	/^static void drawOneLine(float x1, float y1, float x2, float y2) {$/;"	f	file:
drawRightTriangle	redbook/alpha.c	/^static void drawRightTriangle(void)$/;"	f	file:
draw_line	demos/l.c	/^static void draw_line(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)$/;"	f	file:
draw_line	demos/lines.cpp	/^static void draw_line(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)$/;"	f	file:
draw_triangle	redbook/model.c	/^void draw_triangle(void)$/;"	f
dtudx	src/Rasterizer.h	/^		EGL_Fixed		dtudx, dtvdx;	\/\/ partial derivatives$/;"	m	struct:EGL::TexCoord
dtudy	src/Rasterizer.h	/^		EGL_Fixed		dtudy, dtvdy;	\/\/ partial derivatives$/;"	m	struct:EGL::TexCoord
dtvdx	src/Rasterizer.h	/^		EGL_Fixed		dtudx, dtvdx;	\/\/ partial derivatives$/;"	m	struct:EGL::TexCoord
dtvdy	src/Rasterizer.h	/^		EGL_Fixed		dtudy, dtvdy;	\/\/ partial derivatives$/;"	m	struct:EGL::TexCoord
dump_bitset	src/codegen/instruction.c	/^static void dump_bitset(const char * name, cg_bitset_t * bitset, FILE * out)$/;"	f	file:
dump_br	src/codegen/arm-dis.c	/^void dump_br(ARMDis* dis, ARMInstr i) {$/;"	f
dump_cdp	src/codegen/arm-dis.c	/^void dump_cdp(ARMDis* dis, ARMInstr i) {$/;"	f
dump_cdt	src/codegen/arm-dis.c	/^void dump_cdt(ARMDis* dis, ARMInstr i) {$/;"	f
dump_clz	src/codegen/arm-dis.c	/^void dump_clz(ARMDis* dis, ARMInstr i) {$/;"	f
dump_creg	src/codegen/arm-dis.c	/^void dump_creg(ARMDis* dis, int creg) {$/;"	f
dump_crt	src/codegen/arm-dis.c	/^void dump_crt(ARMDis* dis, ARMInstr i) {$/;"	f
dump_dpi	src/codegen/arm-dis.c	/^void dump_dpi(ARMDis* dis, ARMInstr i) {$/;"	f
dump_hxfer	src/codegen/arm-dis.c	/^void dump_hxfer(ARMDis* dis, ARMInstr i) {$/;"	f
dump_mrs	src/codegen/arm-dis.c	/^void dump_mrs(ARMDis* dis, ARMInstr i) {$/;"	f
dump_mrt	src/codegen/arm-dis.c	/^void dump_mrt(ARMDis* dis, ARMInstr i) {$/;"	f
dump_msr	src/codegen/arm-dis.c	/^void dump_msr(ARMDis* dis, ARMInstr i) {$/;"	f
dump_mul	src/codegen/arm-dis.c	/^void dump_mul(ARMDis* dis, ARMInstr i) {$/;"	f
dump_reg	src/codegen/arm-dis.c	/^void dump_reg(ARMDis* dis, int reg) {$/;"	f
dump_register_info	src/codegen/instruction.c	/^void dump_register_info(cg_virtual_reg_t * reg, FILE * out)$/;"	f
dump_reglist	src/codegen/arm-dis.c	/^void dump_reglist(ARMDis* dis, int reg_list) {$/;"	f
dump_swi	src/codegen/arm-dis.c	/^void dump_swi(ARMDis* dis, ARMInstr i) {$/;"	f
dump_swp	src/codegen/arm-dis.c	/^void dump_swp(ARMDis* dis, ARMInstr i) {$/;"	f
dump_wxfer	src/codegen/arm-dis.c	/^void dump_wxfer(ARMDis* dis, ARMInstr i) {$/;"	f
dvidir	projects/linux-ftk/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	projects/linux-x11/Makefile	/^dvidir = ${docdir}$/;"	m
dx	src/Rasterizer.h	/^		EdgePos				dx;$/;"	m	struct:EGL::Gradients
dy	src/Rasterizer.h	/^		EdgePos				dy;$/;"	m	struct:EGL::Gradients
effectivePointer	src/Arrays.h	/^		const void *		effectivePointer;$/;"	m	struct:EGL::VertexArray
eglBindTexImage	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) {$/;"	f
eglBindTexImage	src/linux-ftk/egl.cpp	/^eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) $/;"	f
eglBindTexImage	src/linux-x11/egl.cpp	/^eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) $/;"	f
eglBindTexImage	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) {$/;"	f
eglChooseConfig	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglChooseConfig (EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config) {$/;"	f
eglChooseConfig	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglChooseConfig (EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config) {$/;"	f
eglChooseConfig	src/linux-ftk/egl.cpp	/^eglChooseConfig (EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs,$/;"	f
eglChooseConfig	src/linux-x11/egl.cpp	/^eglChooseConfig (EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs,$/;"	f
eglChooseConfig	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglChooseConfig (EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config) {$/;"	f
eglCopyBuffers	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglCopyBuffers (EGLDisplay dpy, EGLSurface surface, NativePixmapType target) {$/;"	f
eglCopyBuffers	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglCopyBuffers (EGLDisplay dpy, EGLSurface surface, NativePixmapType target) {$/;"	f
eglCopyBuffers	src/linux-ftk/egl.cpp	/^eglCopyBuffers (EGLDisplay dpy, EGLSurface surface, NativePixmapType target) $/;"	f
eglCopyBuffers	src/linux-x11/egl.cpp	/^eglCopyBuffers (EGLDisplay dpy, EGLSurface surface, NativePixmapType target) $/;"	f
eglCopyBuffers	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglCopyBuffers (EGLDisplay dpy, EGLSurface surface, NativePixmapType target) {$/;"	f
eglCreateContext	src/Epoc/egl.cpp	/^	GLAPI EGLContext APIENTRY eglCreateContext (EGLDisplay dpy, EGLConfig config, EGLContext share_list, const EGLint *attrib_list) {$/;"	f
eglCreateContext	src/WinCE/egl.cpp	/^GLAPI EGLContext APIENTRY eglCreateContext (EGLDisplay dpy, EGLConfig config, EGLContext share_list, const EGLint *attrib_list) {$/;"	f
eglCreateContext	src/linux-ftk/egl.cpp	/^eglCreateContext (EGLDisplay dpy, EGLConfig config, EGLContext share_list, $/;"	f
eglCreateContext	src/linux-x11/egl.cpp	/^eglCreateContext (EGLDisplay dpy, EGLConfig config, EGLContext share_list, $/;"	f
eglCreateContext	src/win/egl.cpp	/^GLAPI EGLContext APIENTRY eglCreateContext (EGLDisplay dpy, EGLConfig config, EGLContext share_list, const EGLint *attrib_list) {$/;"	f
eglCreatePbufferSurface	src/Epoc/egl.cpp	/^	GLAPI EGLSurface APIENTRY eglCreatePbufferSurface (EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list) {$/;"	f
eglCreatePbufferSurface	src/WinCE/egl.cpp	/^GLAPI EGLSurface APIENTRY eglCreatePbufferSurface (EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list) {$/;"	f
eglCreatePbufferSurface	src/linux-ftk/egl.cpp	/^eglCreatePbufferSurface (EGLDisplay dpy, EGLConfig config, $/;"	f
eglCreatePbufferSurface	src/linux-x11/egl.cpp	/^eglCreatePbufferSurface (EGLDisplay dpy, EGLConfig config, $/;"	f
eglCreatePbufferSurface	src/win/egl.cpp	/^GLAPI EGLSurface APIENTRY eglCreatePbufferSurface (EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list) {$/;"	f
eglCreatePixmapSurface	src/Epoc/egl.cpp	/^	GLAPI EGLSurface APIENTRY eglCreatePixmapSurface (EGLDisplay dpy, EGLConfig config, NativePixmapType pixmap, const EGLint *attrib_list) {$/;"	f
eglCreatePixmapSurface	src/WinCE/egl.cpp	/^GLAPI EGLSurface APIENTRY eglCreatePixmapSurface (EGLDisplay dpy, EGLConfig config, NativePixmapType pixmap, const EGLint *attrib_list) {$/;"	f
eglCreatePixmapSurface	src/linux-ftk/egl.cpp	/^eglCreatePixmapSurface (EGLDisplay dpy, EGLConfig config, $/;"	f
eglCreatePixmapSurface	src/linux-x11/egl.cpp	/^eglCreatePixmapSurface (EGLDisplay dpy, EGLConfig config, $/;"	f
eglCreatePixmapSurface	src/win/egl.cpp	/^GLAPI EGLSurface APIENTRY eglCreatePixmapSurface (EGLDisplay dpy, EGLConfig config, NativePixmapType pixmap, const EGLint *attrib_list) {$/;"	f
eglCreateWindowSurface	src/Epoc/egl.cpp	/^	GLAPI EGLSurface APIENTRY eglCreateWindowSurface (EGLDisplay dpy, EGLConfig config, RWindow * window, const EGLint *attrib_list) {$/;"	f
eglCreateWindowSurface	src/WinCE/egl.cpp	/^GLAPI EGLSurface APIENTRY eglCreateWindowSurface (EGLDisplay dpy, EGLConfig config, NativeWindowType window, const EGLint *attrib_list) {$/;"	f
eglCreateWindowSurface	src/linux-ftk/egl.cpp	/^eglCreateWindowSurface (EGLDisplay dpy, EGLConfig config, $/;"	f
eglCreateWindowSurface	src/linux-x11/egl.cpp	/^eglCreateWindowSurface (EGLDisplay dpy, EGLConfig config, $/;"	f
eglCreateWindowSurface	src/win/egl.cpp	/^GLAPI EGLSurface APIENTRY eglCreateWindowSurface (EGLDisplay dpy, EGLConfig config, NativeWindowType window, const EGLint *attrib_list) {$/;"	f
eglDestroyContext	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglDestroyContext (EGLDisplay dpy, EGLContext ctx) {$/;"	f
eglDestroyContext	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglDestroyContext (EGLDisplay dpy, EGLContext ctx) {$/;"	f
eglDestroyContext	src/linux-ftk/egl.cpp	/^eglDestroyContext (EGLDisplay dpy, EGLContext ctx) $/;"	f
eglDestroyContext	src/linux-x11/egl.cpp	/^eglDestroyContext (EGLDisplay dpy, EGLContext ctx) $/;"	f
eglDestroyContext	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglDestroyContext (EGLDisplay dpy, EGLContext ctx) {$/;"	f
eglDestroySurface	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglDestroySurface (EGLDisplay dpy, EGLSurface surface) {$/;"	f
eglDestroySurface	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglDestroySurface (EGLDisplay dpy, EGLSurface surface) {$/;"	f
eglDestroySurface	src/linux-ftk/egl.cpp	/^eglDestroySurface (EGLDisplay dpy, EGLSurface surface) $/;"	f
eglDestroySurface	src/linux-x11/egl.cpp	/^eglDestroySurface (EGLDisplay dpy, EGLSurface surface) $/;"	f
eglDestroySurface	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglDestroySurface (EGLDisplay dpy, EGLSurface surface) {$/;"	f
eglGetConfigAttrib	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglGetConfigAttrib (EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value) {$/;"	f
eglGetConfigAttrib	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglGetConfigAttrib (EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value) {$/;"	f
eglGetConfigAttrib	src/linux-ftk/egl.cpp	/^eglGetConfigAttrib (EGLDisplay dpy, EGLConfig config, EGLint attribute, $/;"	f
eglGetConfigAttrib	src/linux-x11/egl.cpp	/^eglGetConfigAttrib (EGLDisplay dpy, EGLConfig config, EGLint attribute, $/;"	f
eglGetConfigAttrib	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglGetConfigAttrib (EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value) {$/;"	f
eglGetConfigs	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglGetConfigs (EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config) {$/;"	f
eglGetConfigs	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglGetConfigs (EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config) {$/;"	f
eglGetConfigs	src/linux-ftk/egl.cpp	/^eglGetConfigs (EGLDisplay dpy, EGLConfig *configs, EGLint config_size, $/;"	f
eglGetConfigs	src/linux-x11/egl.cpp	/^eglGetConfigs (EGLDisplay dpy, EGLConfig *configs, EGLint config_size, $/;"	f
eglGetConfigs	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglGetConfigs (EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config) {$/;"	f
eglGetCurrentContext	src/Epoc/egl.cpp	/^	GLAPI EGLContext APIENTRY eglGetCurrentContext (void) {$/;"	f
eglGetCurrentContext	src/WinCE/egl.cpp	/^GLAPI EGLContext APIENTRY eglGetCurrentContext (void) {$/;"	f
eglGetCurrentContext	src/linux-ftk/egl.cpp	/^GLAPI EGLContext APIENTRY eglGetCurrentContext (void) $/;"	f
eglGetCurrentContext	src/linux-x11/egl.cpp	/^GLAPI EGLContext APIENTRY eglGetCurrentContext (void) $/;"	f
eglGetCurrentContext	src/win/egl.cpp	/^GLAPI EGLContext APIENTRY eglGetCurrentContext (void) {$/;"	f
eglGetCurrentDisplay	src/Epoc/egl.cpp	/^	GLAPI EGLDisplay APIENTRY eglGetCurrentDisplay (void) {$/;"	f
eglGetCurrentDisplay	src/WinCE/egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetCurrentDisplay (void) {$/;"	f
eglGetCurrentDisplay	src/linux-ftk/egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetCurrentDisplay (void) $/;"	f
eglGetCurrentDisplay	src/linux-x11/egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetCurrentDisplay (void) $/;"	f
eglGetCurrentDisplay	src/win/egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetCurrentDisplay (void) {$/;"	f
eglGetCurrentSurface	src/Epoc/egl.cpp	/^	GLAPI EGLSurface APIENTRY eglGetCurrentSurface (EGLint readdraw) {$/;"	f
eglGetCurrentSurface	src/WinCE/egl.cpp	/^GLAPI EGLSurface APIENTRY eglGetCurrentSurface (EGLint readdraw) {$/;"	f
eglGetCurrentSurface	src/linux-ftk/egl.cpp	/^GLAPI EGLSurface APIENTRY eglGetCurrentSurface (EGLint readdraw) $/;"	f
eglGetCurrentSurface	src/linux-x11/egl.cpp	/^GLAPI EGLSurface APIENTRY eglGetCurrentSurface (EGLint readdraw) $/;"	f
eglGetCurrentSurface	src/win/egl.cpp	/^GLAPI EGLSurface APIENTRY eglGetCurrentSurface (EGLint readdraw) {$/;"	f
eglGetDisplay	src/Epoc/egl.cpp	/^	GLAPI EGLDisplay APIENTRY eglGetDisplay (NativeDisplayType display) {$/;"	f
eglGetDisplay	src/WinCE/egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetDisplay (NativeDisplayType display) {$/;"	f
eglGetDisplay	src/linux-ftk/egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetDisplay (NativeDisplayType display) $/;"	f
eglGetDisplay	src/linux-x11/egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetDisplay (NativeDisplayType display) $/;"	f
eglGetDisplay	src/win/egl.cpp	/^GLAPI EGLDisplay APIENTRY eglGetDisplay (NativeDisplayType display) {$/;"	f
eglGetError	src/WinCE/egl.cpp	/^GLAPI EGLint APIENTRY eglGetError (void) {$/;"	f
eglGetError	src/linux-ftk/egl.cpp	/^GLAPI EGLint APIENTRY eglGetError (void) $/;"	f
eglGetError	src/linux-x11/egl.cpp	/^GLAPI EGLint APIENTRY eglGetError (void) $/;"	f
eglGetError	src/win/egl.cpp	/^GLAPI EGLint APIENTRY eglGetError (void) {$/;"	f
eglGetProcAddress	src/Epoc/egl.cpp	/^	GLAPI void (* APIENTRY eglGetProcAddress (const char *procname))() {$/;"	f
eglGetProcAddress	src/WinCE/egl.cpp	/^GLAPI void (* APIENTRY eglGetProcAddress (const char *procname))() {$/;"	f
eglGetProcAddress	src/linux-ftk/egl.cpp	/^GLAPI void (APIENTRY * eglGetProcAddress(const char *procname))(void) $/;"	f
eglGetProcAddress	src/linux-x11/egl.cpp	/^GLAPI void (APIENTRY * eglGetProcAddress(const char *procname))(void) $/;"	f
eglGetProcAddress	src/win/egl.cpp	/^GLAPI void (APIENTRY * eglGetProcAddress(const char *procname))(void) {$/;"	f
eglInitialize	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglInitialize (EGLDisplay dpy, EGLint *major, EGLint *minor) {$/;"	f
eglInitialize	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglInitialize (EGLDisplay dpy, EGLint *major, EGLint *minor) {$/;"	f
eglInitialize	src/linux-ftk/egl.cpp	/^eglInitialize (EGLDisplay dpy, EGLint *major, EGLint *minor) $/;"	f
eglInitialize	src/linux-x11/egl.cpp	/^eglInitialize (EGLDisplay dpy, EGLint *major, EGLint *minor) $/;"	f
eglInitialize	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglInitialize (EGLDisplay dpy, EGLint *major, EGLint *minor) {$/;"	f
eglMakeCurrent	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglMakeCurrent (EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx) {$/;"	f
eglMakeCurrent	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglMakeCurrent (EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx) {$/;"	f
eglMakeCurrent	src/linux-ftk/egl.cpp	/^eglMakeCurrent (EGLDisplay dpy, EGLSurface draw, EGLSurface read, $/;"	f
eglMakeCurrent	src/linux-x11/egl.cpp	/^eglMakeCurrent (EGLDisplay dpy, EGLSurface draw, EGLSurface read, $/;"	f
eglMakeCurrent	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglMakeCurrent (EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx) {$/;"	f
eglQueryContext	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglQueryContext (EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value) {$/;"	f
eglQueryContext	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglQueryContext (EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value) {$/;"	f
eglQueryContext	src/linux-ftk/egl.cpp	/^eglQueryContext (EGLDisplay dpy, EGLContext ctx, EGLint attribute, $/;"	f
eglQueryContext	src/linux-x11/egl.cpp	/^eglQueryContext (EGLDisplay dpy, EGLContext ctx, EGLint attribute, $/;"	f
eglQueryContext	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglQueryContext (EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value) {$/;"	f
eglQueryString	src/Epoc/egl.cpp	/^	GLAPI const char * APIENTRY eglQueryString (EGLDisplay dpy, EGLint name) {$/;"	f
eglQueryString	src/WinCE/egl.cpp	/^GLAPI const char * APIENTRY eglQueryString (EGLDisplay dpy, EGLint name) {$/;"	f
eglQueryString	src/linux-ftk/egl.cpp	/^GLAPI const char * APIENTRY eglQueryString (EGLDisplay dpy, EGLint name) $/;"	f
eglQueryString	src/linux-x11/egl.cpp	/^GLAPI const char * APIENTRY eglQueryString (EGLDisplay dpy, EGLint name) $/;"	f
eglQueryString	src/win/egl.cpp	/^GLAPI const char * APIENTRY eglQueryString (EGLDisplay dpy, EGLint name) {$/;"	f
eglQuerySurface	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglQuerySurface (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value) {$/;"	f
eglQuerySurface	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglQuerySurface (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value) {$/;"	f
eglQuerySurface	src/linux-ftk/egl.cpp	/^eglQuerySurface (EGLDisplay dpy, EGLSurface surface, EGLint attribute, $/;"	f
eglQuerySurface	src/linux-x11/egl.cpp	/^eglQuerySurface (EGLDisplay dpy, EGLSurface surface, EGLint attribute, $/;"	f
eglQuerySurface	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglQuerySurface (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value) {$/;"	f
eglRecordError	src/Epoc/egl.cpp	/^	static void eglRecordError(EGLint error)$/;"	f	file:
eglRecordError	src/WinCE/egl.cpp	/^static void eglRecordError(EGLint error) $/;"	f	file:
eglRecordError	src/linux-ftk/egl.cpp	/^static void eglRecordError(EGLint error) $/;"	f	file:
eglRecordError	src/linux-x11/egl.cpp	/^static void eglRecordError(EGLint error) $/;"	f	file:
eglRecordError	src/win/egl.cpp	/^static void eglRecordError(EGLint error) $/;"	f	file:
eglReleaseTexImage	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) {$/;"	f
eglReleaseTexImage	src/linux-ftk/egl.cpp	/^eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) $/;"	f
eglReleaseTexImage	src/linux-x11/egl.cpp	/^eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) $/;"	f
eglReleaseTexImage	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer) {$/;"	f
eglSaveSurfaceHM	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSaveSurfaceHM(EGLSurface surface, const TCHAR * filename) {$/;"	f
eglSaveSurfaceHM	src/linux-ftk/egl.cpp	/^eglSaveSurfaceHM(EGLSurface surface, const char *filename) $/;"	f
eglSaveSurfaceHM	src/linux-x11/egl.cpp	/^eglSaveSurfaceHM(EGLSurface surface, const char *filename) $/;"	f
eglSaveSurfaceHM	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSaveSurfaceHM(EGLSurface surface, const TCHAR * filename) {$/;"	f
eglSaveSurfaceHM	test/epoc/paint.cpp	/^GLAPI EGLBoolean APIENTRY eglSaveSurfaceHM(EGLSurface surface, const TDesC& filename)$/;"	f
eglSurfaceAttrib	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSurfaceAttrib (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value) {$/;"	f
eglSurfaceAttrib	src/linux-ftk/egl.cpp	/^eglSurfaceAttrib (EGLDisplay dpy, EGLSurface surface, EGLint attribute, $/;"	f
eglSurfaceAttrib	src/linux-x11/egl.cpp	/^eglSurfaceAttrib (EGLDisplay dpy, EGLSurface surface, EGLint attribute, $/;"	f
eglSurfaceAttrib	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSurfaceAttrib (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value) {$/;"	f
eglSwapBuffers	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglSwapBuffers (EGLDisplay dpy, EGLSurface draw) {$/;"	f
eglSwapBuffers	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapBuffers (EGLDisplay dpy, EGLSurface draw) {$/;"	f
eglSwapBuffers	src/linux-ftk/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapBuffers (EGLDisplay dpy, EGLSurface draw) $/;"	f
eglSwapBuffers	src/linux-x11/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapBuffers (EGLDisplay dpy, EGLSurface draw) $/;"	f
eglSwapBuffers	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapBuffers (EGLDisplay dpy, EGLSurface draw) {$/;"	f
eglSwapInterval	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapInterval(EGLDisplay dpy, EGLint interval) {$/;"	f
eglSwapInterval	src/linux-ftk/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapInterval(EGLDisplay dpy, EGLint interval) $/;"	f
eglSwapInterval	src/linux-x11/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapInterval(EGLDisplay dpy, EGLint interval) $/;"	f
eglSwapInterval	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglSwapInterval(EGLDisplay dpy, EGLint interval) {$/;"	f
eglTerminate	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglTerminate (EGLDisplay dpy) {$/;"	f
eglTerminate	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglTerminate (EGLDisplay dpy) {$/;"	f
eglTerminate	src/linux-ftk/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglTerminate (EGLDisplay dpy) $/;"	f
eglTerminate	src/linux-x11/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglTerminate (EGLDisplay dpy) $/;"	f
eglTerminate	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglTerminate (EGLDisplay dpy) {$/;"	f
eglWaitGL	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglWaitGL (void) {$/;"	f
eglWaitGL	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitGL (void) {$/;"	f
eglWaitGL	src/linux-ftk/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitGL (void) $/;"	f
eglWaitGL	src/linux-x11/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitGL (void) $/;"	f
eglWaitGL	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitGL (void) {$/;"	f
eglWaitNative	src/Epoc/egl.cpp	/^	GLAPI EGLBoolean APIENTRY eglWaitNative (EGLint engine) {$/;"	f
eglWaitNative	src/WinCE/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitNative (EGLint engine) {$/;"	f
eglWaitNative	src/linux-ftk/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitNative (EGLint engine) $/;"	f
eglWaitNative	src/linux-x11/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitNative (EGLint engine) $/;"	f
eglWaitNative	src/win/egl.cpp	/^GLAPI EGLBoolean APIENTRY eglWaitNative (EGLint engine) {$/;"	f
egl_normals	test/epoc/appglobal.h	/^    GLfixed egl_normals[HARD_SIZE][3];$/;"	m	struct:TAppGlobal
egl_normals	test/paint.cpp	/^GLfixed egl_normals[SIZE][3];$/;"	v
egl_textures	test/epoc/appglobal.h	/^    GLfixed egl_textures[HARD_SIZE][2];$/;"	m	struct:TAppGlobal
egl_textures	test/paint.cpp	/^GLfixed egl_textures[SIZE][2];$/;"	v
egl_vertices	test/epoc/appglobal.h	/^    GLfixed egl_vertices[HARD_SIZE][3];$/;"	m	struct:TAppGlobal
egl_vertices	test/paint.cpp	/^GLfixed egl_vertices[SIZE][3];$/;"	v
eglconfig	ug/ug_ftk.c	/^    EGLConfig  eglconfig;$/;"	m	struct:ugwindow	file:
eglconfig	ug/ug_win32.c	/^    EGLConfig eglconfig;$/;"	m	struct:ugwindow	file:
eglctx	ug/ug_ftk.c	/^    EGLContext eglctx;$/;"	m	struct:ugwindow	file:
eglctx	ug/ug_win32.c	/^    EGLContext eglctx;$/;"	m	struct:ugwindow	file:
egldpy	ug/ug_ftk.c	/^    EGLDisplay egldpy;$/;"	m	struct:__anon1	file:
egldpy	ug/ug_win32.c	/^    EGLDisplay egldpy;$/;"	m	struct:__anon2	file:
elbow	redbook/robot.c	/^static int shoulder = 0, elbow = 0;$/;"	v	file:
elements	src/codegen/bitset.h	/^	size_t		elements;$/;"	m	struct:cg_bitset_t
elementsof	src/OGLES.h	173;"	d
emission	test/epoc/paint.cpp	/^ GLfloat emission[3];$/;"	m	struct:sample_MATERIAL	file:
emission	test/paint.cpp	/^ GLfloat emission[3];$/;"	m	struct:sample_MATERIAL	file:
emit_binary	src/codegen/emit.c	/^static void emit_binary(cg_codegen_t * gen, cg_inst_binary_t * inst, int update_flags)$/;"	f	file:
emit_binary_minmax	src/codegen/emit.c	/^static void emit_binary_minmax(cg_codegen_t * gen, cg_inst_binary_t * inst, int update_flags)$/;"	f	file:
emit_binary_multiply_fixed	src/codegen/emit.c	/^static void emit_binary_multiply_fixed(cg_codegen_t * gen, cg_inst_binary_t * inst,$/;"	f	file:
emit_binary_multiply_int	src/codegen/emit.c	/^static void emit_binary_multiply_int(cg_codegen_t * gen, cg_inst_binary_t * inst,$/;"	f	file:
emit_binary_regular	src/codegen/emit.c	/^static void emit_binary_regular(cg_codegen_t * gen, cg_inst_binary_t * inst,$/;"	f	file:
emit_binary_shifter	src/codegen/emit.c	/^static void emit_binary_shifter(cg_codegen_t * gen, cg_inst_binary_t * inst,$/;"	f	file:
emit_branch	src/codegen/emit.c	/^static void emit_branch(cg_codegen_t * gen, cg_inst_branch_t * inst)$/;"	f	file:
emit_call	src/codegen/emit.c	/^static void emit_call(cg_codegen_t * gen, cg_inst_call_t * inst)$/;"	f	file:
emit_compare	src/codegen/emit.c	/^static void emit_compare(cg_codegen_t * gen, cg_inst_compare_t * inst)$/;"	f	file:
emit_epilog	src/codegen/emit.c	/^static void emit_epilog(cg_codegen_t * gen, cg_proc_t * proc)$/;"	f	file:
emit_load	src/codegen/emit.c	/^static void emit_load(cg_codegen_t * gen, cg_inst_load_t * inst) $/;"	f	file:
emit_load_immediate	src/codegen/emit.c	/^static void emit_load_immediate(cg_codegen_t * gen, $/;"	f	file:
emit_prolog	src/codegen/emit.c	/^static void emit_prolog(cg_codegen_t * gen, cg_proc_t * proc)$/;"	f	file:
emit_ret	src/codegen/emit.c	/^static void emit_ret(cg_codegen_t * gen, cg_inst_ret_t * inst)$/;"	f	file:
emit_store	src/codegen/emit.c	/^static void emit_store(cg_codegen_t * gen, cg_inst_store_t * inst)$/;"	f	file:
emit_unary	src/codegen/emit.c	/^static void emit_unary(cg_codegen_t * gen, cg_inst_unary_t * inst,$/;"	f	file:
emit_unary_abs	src/codegen/emit.c	/^static void emit_unary_abs(cg_codegen_t * gen, cg_inst_unary_t * inst, int update_flags)$/;"	f	file:
emit_unary_complement	src/codegen/emit.c	/^static void emit_unary_complement(cg_codegen_t * gen, cg_inst_unary_t * inst,$/;"	f	file:
emit_unary_fcnv	src/codegen/emit.c	/^static void emit_unary_fcnv(cg_codegen_t * gen, cg_inst_unary_t * inst,$/;"	f	file:
emit_unary_log2	src/codegen/emit.c	/^static void emit_unary_log2(cg_codegen_t * gen, cg_inst_unary_t * inst, int update_flags)$/;"	f	file:
emit_unary_negate	src/codegen/emit.c	/^static void emit_unary_negate(cg_codegen_t * gen, cg_inst_unary_t * inst,$/;"	f	file:
emit_unary_round	src/codegen/emit.c	/^static void emit_unary_round(cg_codegen_t * gen, cg_inst_unary_t * inst,$/;"	f	file:
emit_unary_trunc	src/codegen/emit.c	/^static void emit_unary_trunc(cg_codegen_t * gen, cg_inst_unary_t * inst,$/;"	f	file:
end	projects/epoc/make.bat	/^:end/;"	l
end_block	src/codegen/emit.c	/^static void end_block(cg_codegen_t * gen)$/;"	f	file:
ensure_loaded	src/codegen/emit.c	/^static void ensure_loaded(cg_codegen_t * gen,$/;"	f	file:
epilogue	src/codegen/instruction.h	/^	struct cg_label_t * epilogue;			\/* assembly label end			*\/$/;"	m	struct:cg_proc_t	typeref:struct:cg_proc_t::cg_label_t
exec_prefix	projects/linux-ftk/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	projects/linux-x11/Makefile	/^exec_prefix = ${prefix}$/;"	m
face_indicies	test/epoc/paint.cpp	/^const short face_indicies[732][9] = {$/;"	v
face_indicies	test/paint.cpp	/^static short face_indicies[732][9] = {$/;"	v	file:
fetchFunction	src/Arrays.h	/^		FetchValueFunction	fetchFunction;$/;"	m	struct:EGL::VertexArray
file	src/codegen/instruction.h	/^	const char *		file;$/;"	m	struct:cg_inst_base_t
fileBlkjack	tools/makecab.cmd	/^set fileBlkjack="ogl-es.inf"$/;"	v
fileCabwiz	tools/makecab.cmd	/^set fileCabwiz="c:\\program files\\windows ce tools\\wce420\\pocket pc 2003\\Tools\\cabwiz.exe"$/;"	v
find_set	src/codegen/instruction.c	/^static cg_virtual_reg_t * find_set(cg_virtual_reg_t * reg)$/;"	f	file:
find_union	src/codegen/instruction.c	/^static void find_union(cg_virtual_reg_t * first, cg_virtual_reg_t * second)$/;"	f	file:
fix_ref	src/codegen/emit.c	/^static void fix_ref(cg_segment_t * seg, size_t source, size_t target,$/;"	f	file:
flags	src/codegen/emit.c	/^	cg_physical_reg_t			flags;$/;"	m	struct:cg_codegen_t	file:
fld	src/codegen/arm-codegen.h	/^		arminstr_t fld  : 4;$/;"	m	struct:__anon92::__anon93
flush_dirty_args	src/codegen/emit.c	/^static void flush_dirty_args(cg_codegen_t * gen)$/;"	f	file:
flush_dirty_reg_set	src/codegen/emit.c	/^static void flush_dirty_reg_set(cg_codegen_t * gen, size_t min_reg,$/;"	f	file:
flush_dirty_regs	src/codegen/emit.c	/^static void flush_dirty_regs(cg_codegen_t * gen, cg_bitset_t * live)$/;"	f	file:
fogMode	redbook/fog.c	/^static GLint fogMode;$/;"	v	file:
format	test/paint.cpp	/^ GLint format;$/;"	m	struct:GLTXTLOAD	file:
formats	src/Context.cpp	/^    static const GLenum formats[] = {$/;"	m	namespace:__anon53	file:
fp_offset	src/codegen/emit.c	/^static I32 fp_offset(cg_codegen_t * gen, cg_virtual_reg_t * reg) {$/;"	f	file:
fp_offset	src/codegen/instruction.h	/^	int							fp_offset;			\/* FP offset for spilling		*\/$/;"	m	struct:cg_virtual_reg_t
free_regs	src/codegen/emit.c	/^	physical_reg_list_t		free_regs;			\/* phys regs free			*\/$/;"	m	struct:cg_codegen_t	file:
ftk_app_demo_hello_create	src/linux-ftk/demos/demo_hello.c	/^FtkApp* ftk_app_demo_hello_create()$/;"	f
func_append	projects/linux-ftk/config.status	/^func_append ()$/;"	f
func_append	projects/linux-ftk/configure	/^func_append ()$/;"	f
func_append	projects/linux-ftk/libtool	/^func_append ()$/;"	f
func_append	projects/linux-x11/config.status	/^func_append ()$/;"	f
func_append	projects/linux-x11/configure	/^func_append ()$/;"	f
func_append	projects/linux-x11/libtool	/^func_append ()$/;"	f
func_arith	projects/linux-ftk/config.status	/^func_arith ()$/;"	f
func_arith	projects/linux-ftk/configure	/^func_arith ()$/;"	f
func_arith	projects/linux-ftk/libtool	/^func_arith ()$/;"	f
func_arith	projects/linux-x11/config.status	/^func_arith ()$/;"	f
func_arith	projects/linux-x11/configure	/^func_arith ()$/;"	f
func_arith	projects/linux-x11/libtool	/^func_arith ()$/;"	f
func_basename	projects/linux-ftk/config.status	/^func_basename ()$/;"	f
func_basename	projects/linux-ftk/configure	/^func_basename ()$/;"	f
func_basename	projects/linux-ftk/libtool	/^func_basename ()$/;"	f
func_basename	projects/linux-x11/config.status	/^func_basename ()$/;"	f
func_basename	projects/linux-x11/configure	/^func_basename ()$/;"	f
func_basename	projects/linux-x11/libtool	/^func_basename ()$/;"	f
func_check_version_match	projects/linux-ftk/libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	projects/linux-ftk/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	projects/linux-x11/libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	projects/linux-x11/ltmain.sh	/^func_check_version_match ()$/;"	f
func_config	projects/linux-ftk/libtool	/^func_config ()$/;"	f
func_config	projects/linux-ftk/ltmain.sh	/^func_config ()$/;"	f
func_config	projects/linux-x11/libtool	/^func_config ()$/;"	f
func_config	projects/linux-x11/ltmain.sh	/^func_config ()$/;"	f
func_dirname	projects/linux-ftk/config.status	/^func_dirname ()$/;"	f
func_dirname	projects/linux-ftk/configure	/^func_dirname ()$/;"	f
func_dirname	projects/linux-ftk/libtool	/^func_dirname ()$/;"	f
func_dirname	projects/linux-x11/config.status	/^func_dirname ()$/;"	f
func_dirname	projects/linux-x11/configure	/^func_dirname ()$/;"	f
func_dirname	projects/linux-x11/libtool	/^func_dirname ()$/;"	f
func_dirname_and_basename	projects/linux-ftk/config.status	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	projects/linux-ftk/configure	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	projects/linux-ftk/libtool	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	projects/linux-ftk/ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	projects/linux-x11/config.status	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	projects/linux-x11/configure	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	projects/linux-x11/libtool	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	projects/linux-x11/ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_echo	projects/linux-ftk/libtool	/^func_echo ()$/;"	f
func_echo	projects/linux-ftk/ltmain.sh	/^func_echo ()$/;"	f
func_echo	projects/linux-x11/libtool	/^func_echo ()$/;"	f
func_echo	projects/linux-x11/ltmain.sh	/^func_echo ()$/;"	f
func_emit_cwrapperexe_src	projects/linux-ftk/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	projects/linux-ftk/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	projects/linux-x11/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	projects/linux-x11/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	projects/linux-ftk/libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	projects/linux-ftk/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	projects/linux-x11/libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	projects/linux-x11/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper_part1	projects/linux-ftk/libtool	/^func_emit_wrapper_part1 ()$/;"	f
func_emit_wrapper_part1	projects/linux-ftk/ltmain.sh	/^func_emit_wrapper_part1 ()$/;"	f
func_emit_wrapper_part1	projects/linux-x11/libtool	/^func_emit_wrapper_part1 ()$/;"	f
func_emit_wrapper_part1	projects/linux-x11/ltmain.sh	/^func_emit_wrapper_part1 ()$/;"	f
func_emit_wrapper_part2	projects/linux-ftk/libtool	/^func_emit_wrapper_part2 ()$/;"	f
func_emit_wrapper_part2	projects/linux-ftk/ltmain.sh	/^func_emit_wrapper_part2 ()$/;"	f
func_emit_wrapper_part2	projects/linux-x11/libtool	/^func_emit_wrapper_part2 ()$/;"	f
func_emit_wrapper_part2	projects/linux-x11/ltmain.sh	/^func_emit_wrapper_part2 ()$/;"	f
func_enable_tag	projects/linux-ftk/libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	projects/linux-ftk/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	projects/linux-x11/libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	projects/linux-x11/ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	projects/linux-ftk/libtool	/^func_error ()$/;"	f
func_error	projects/linux-ftk/ltmain.sh	/^func_error ()$/;"	f
func_error	projects/linux-x11/libtool	/^func_error ()$/;"	f
func_error	projects/linux-x11/ltmain.sh	/^func_error ()$/;"	f
func_execute_cmds	projects/linux-ftk/libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	projects/linux-ftk/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	projects/linux-x11/libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	projects/linux-x11/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	projects/linux-ftk/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	projects/linux-ftk/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	projects/linux-x11/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	projects/linux-x11/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	projects/linux-ftk/libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	projects/linux-ftk/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	projects/linux-x11/libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	projects/linux-x11/ltmain.sh	/^func_extract_archives ()$/;"	f
func_fatal_configuration	projects/linux-ftk/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	projects/linux-ftk/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	projects/linux-x11/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	projects/linux-x11/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	projects/linux-ftk/libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	projects/linux-ftk/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	projects/linux-x11/libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	projects/linux-x11/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	projects/linux-ftk/libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	projects/linux-ftk/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	projects/linux-x11/libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	projects/linux-x11/ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	projects/linux-ftk/libtool	/^func_features ()$/;"	f
func_features	projects/linux-ftk/ltmain.sh	/^func_features ()$/;"	f
func_features	projects/linux-x11/libtool	/^func_features ()$/;"	f
func_features	projects/linux-x11/ltmain.sh	/^func_features ()$/;"	f
func_generate_dlsyms	projects/linux-ftk/libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	projects/linux-ftk/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	projects/linux-x11/libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	projects/linux-x11/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_grep	projects/linux-ftk/libtool	/^func_grep ()$/;"	f
func_grep	projects/linux-ftk/ltmain.sh	/^func_grep ()$/;"	f
func_grep	projects/linux-x11/libtool	/^func_grep ()$/;"	f
func_grep	projects/linux-x11/ltmain.sh	/^func_grep ()$/;"	f
func_help	projects/linux-ftk/libtool	/^func_help ()$/;"	f
func_help	projects/linux-ftk/ltmain.sh	/^func_help ()$/;"	f
func_help	projects/linux-x11/libtool	/^func_help ()$/;"	f
func_help	projects/linux-x11/ltmain.sh	/^func_help ()$/;"	f
func_infer_tag	projects/linux-ftk/libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	projects/linux-ftk/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	projects/linux-x11/libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	projects/linux-x11/ltmain.sh	/^func_infer_tag ()$/;"	f
func_lalib_p	projects/linux-ftk/libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	projects/linux-ftk/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	projects/linux-x11/libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	projects/linux-x11/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	projects/linux-ftk/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	projects/linux-ftk/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	projects/linux-x11/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	projects/linux-x11/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	projects/linux-ftk/config.status	/^func_len ()$/;"	f
func_len	projects/linux-ftk/configure	/^func_len ()$/;"	f
func_len	projects/linux-ftk/libtool	/^func_len ()$/;"	f
func_len	projects/linux-x11/config.status	/^func_len ()$/;"	f
func_len	projects/linux-x11/configure	/^func_len ()$/;"	f
func_len	projects/linux-x11/libtool	/^func_len ()$/;"	f
func_lo2o	projects/linux-ftk/config.status	/^func_lo2o ()$/;"	f
func_lo2o	projects/linux-ftk/configure	/^func_lo2o ()$/;"	f
func_lo2o	projects/linux-ftk/libtool	/^func_lo2o ()$/;"	f
func_lo2o	projects/linux-x11/config.status	/^func_lo2o ()$/;"	f
func_lo2o	projects/linux-x11/configure	/^func_lo2o ()$/;"	f
func_lo2o	projects/linux-x11/libtool	/^func_lo2o ()$/;"	f
func_ltwrapper_executable_p	projects/linux-ftk/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	projects/linux-ftk/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	projects/linux-x11/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	projects/linux-x11/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	projects/linux-ftk/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	projects/linux-ftk/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	projects/linux-x11/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	projects/linux-x11/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	projects/linux-ftk/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	projects/linux-ftk/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	projects/linux-x11/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	projects/linux-x11/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	projects/linux-ftk/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	projects/linux-ftk/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	projects/linux-x11/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	projects/linux-x11/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	projects/linux-ftk/libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	projects/linux-ftk/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	projects/linux-x11/libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	projects/linux-x11/ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	projects/linux-ftk/libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	projects/linux-ftk/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	projects/linux-x11/libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	projects/linux-x11/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	projects/linux-ftk/libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	projects/linux-ftk/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	projects/linux-x11/libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	projects/linux-x11/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	projects/linux-ftk/libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	projects/linux-ftk/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	projects/linux-x11/libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	projects/linux-x11/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	projects/linux-ftk/libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	projects/linux-ftk/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	projects/linux-x11/libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	projects/linux-x11/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	projects/linux-ftk/libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	projects/linux-ftk/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	projects/linux-x11/libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	projects/linux-x11/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	projects/linux-ftk/libtool	/^func_mode_help ()$/;"	f
func_mode_help	projects/linux-ftk/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	projects/linux-x11/libtool	/^func_mode_help ()$/;"	f
func_mode_help	projects/linux-x11/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	projects/linux-ftk/libtool	/^func_mode_install ()$/;"	f
func_mode_install	projects/linux-ftk/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	projects/linux-x11/libtool	/^func_mode_install ()$/;"	f
func_mode_install	projects/linux-x11/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	projects/linux-ftk/libtool	/^func_mode_link ()$/;"	f
func_mode_link	projects/linux-ftk/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	projects/linux-x11/libtool	/^func_mode_link ()$/;"	f
func_mode_link	projects/linux-x11/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	projects/linux-ftk/libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	projects/linux-ftk/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	projects/linux-x11/libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	projects/linux-x11/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_opt_split	projects/linux-ftk/config.status	/^func_opt_split ()$/;"	f
func_opt_split	projects/linux-ftk/configure	/^func_opt_split ()$/;"	f
func_opt_split	projects/linux-ftk/libtool	/^func_opt_split ()$/;"	f
func_opt_split	projects/linux-x11/config.status	/^func_opt_split ()$/;"	f
func_opt_split	projects/linux-x11/configure	/^func_opt_split ()$/;"	f
func_opt_split	projects/linux-x11/libtool	/^func_opt_split ()$/;"	f
func_quote_for_eval	projects/linux-ftk/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	projects/linux-ftk/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	projects/linux-x11/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	projects/linux-x11/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	projects/linux-ftk/libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	projects/linux-ftk/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	projects/linux-x11/libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	projects/linux-x11/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_show_eval	projects/linux-ftk/libtool	/^func_show_eval ()$/;"	f
func_show_eval	projects/linux-ftk/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	projects/linux-x11/libtool	/^func_show_eval ()$/;"	f
func_show_eval	projects/linux-x11/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	projects/linux-ftk/libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	projects/linux-ftk/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	projects/linux-x11/libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	projects/linux-x11/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_source	projects/linux-ftk/libtool	/^func_source ()$/;"	f
func_source	projects/linux-ftk/ltmain.sh	/^func_source ()$/;"	f
func_source	projects/linux-x11/libtool	/^func_source ()$/;"	f
func_source	projects/linux-x11/ltmain.sh	/^func_source ()$/;"	f
func_stripname	projects/linux-ftk/config.status	/^func_stripname ()$/;"	f
func_stripname	projects/linux-ftk/configure	/^func_stripname ()$/;"	f
func_stripname	projects/linux-ftk/libtool	/^func_stripname ()$/;"	f
func_stripname	projects/linux-x11/config.status	/^func_stripname ()$/;"	f
func_stripname	projects/linux-x11/configure	/^func_stripname ()$/;"	f
func_stripname	projects/linux-x11/libtool	/^func_stripname ()$/;"	f
func_to_host_path	projects/linux-ftk/libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	projects/linux-ftk/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	projects/linux-x11/libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	projects/linux-x11/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_pathlist	projects/linux-ftk/libtool	/^func_to_host_pathlist ()$/;"	f
func_to_host_pathlist	projects/linux-ftk/ltmain.sh	/^func_to_host_pathlist ()$/;"	f
func_to_host_pathlist	projects/linux-x11/libtool	/^func_to_host_pathlist ()$/;"	f
func_to_host_pathlist	projects/linux-x11/ltmain.sh	/^func_to_host_pathlist ()$/;"	f
func_usage	projects/linux-ftk/libtool	/^func_usage ()$/;"	f
func_usage	projects/linux-ftk/ltmain.sh	/^func_usage ()$/;"	f
func_usage	projects/linux-x11/libtool	/^func_usage ()$/;"	f
func_usage	projects/linux-x11/ltmain.sh	/^func_usage ()$/;"	f
func_verbose	projects/linux-ftk/libtool	/^func_verbose ()$/;"	f
func_verbose	projects/linux-ftk/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	projects/linux-x11/libtool	/^func_verbose ()$/;"	f
func_verbose	projects/linux-x11/ltmain.sh	/^func_verbose ()$/;"	f
func_version	projects/linux-ftk/libtool	/^func_version ()$/;"	f
func_version	projects/linux-ftk/ltmain.sh	/^func_version ()$/;"	f
func_version	projects/linux-x11/libtool	/^func_version ()$/;"	f
func_version	projects/linux-x11/ltmain.sh	/^func_version ()$/;"	f
func_warning	projects/linux-ftk/libtool	/^func_warning ()$/;"	f
func_warning	projects/linux-ftk/ltmain.sh	/^func_warning ()$/;"	f
func_warning	projects/linux-x11/libtool	/^func_warning ()$/;"	f
func_warning	projects/linux-x11/ltmain.sh	/^func_warning ()$/;"	f
func_win32_libid	projects/linux-ftk/libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	projects/linux-ftk/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	projects/linux-x11/libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	projects/linux-x11/ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	projects/linux-ftk/libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	projects/linux-ftk/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	projects/linux-x11/libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	projects/linux-x11/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	projects/linux-ftk/config.status	/^func_xform ()$/;"	f
func_xform	projects/linux-ftk/configure	/^func_xform ()$/;"	f
func_xform	projects/linux-ftk/libtool	/^func_xform ()$/;"	f
func_xform	projects/linux-x11/config.status	/^func_xform ()$/;"	f
func_xform	projects/linux-x11/configure	/^func_xform ()$/;"	f
func_xform	projects/linux-x11/libtool	/^func_xform ()$/;"	f
g	src/Color.h	/^		U8	r, g, b, a;							\/\/ rgba components$/;"	m	class:EGL::Color
g	src/FractionalColor.h	/^		EGL_Fixed	r, g, b, a;			\/\/ rgba components$/;"	m	class:EGL::FractionalColor
g_context	test/epoc/appglobal.h	/^    EGLContext			g_context;				\/\/ EGL rendering context$/;"	m	struct:TAppGlobal
g_context	test/paint.cpp	/^EGLContext			g_context;				\/\/ EGL rendering context$/;"	v
g_display	src/linux-ftk/egl.cpp	/^EGLDisplay g_display;$/;"	v
g_display	test/epoc/appglobal.h	/^    EGLDisplay			g_display;				\/\/ EGL display$/;"	m	struct:TAppGlobal
g_hInst	test/testce.cpp	/^HINSTANCE			g_hInst;				\/\/ The current instance$/;"	v
g_hwndCB	test/testce.cpp	/^HWND				g_hwndCB;					\/\/ The command bar handle$/;"	v
g_surface	test/epoc/appglobal.h	/^    EGLSurface			g_surface;				\/\/ EGL rendering surface$/;"	m	struct:TAppGlobal
g_surface	test/paint.cpp	/^EGLSurface			g_surface;				\/\/ EGL rendering surface$/;"	v
gdisasm	src/codegen/arm-dis.c	/^static const ARMDis* gdisasm = NULL;$/;"	v	file:
generic	src/codegen/arm-codegen.h	/^	ARMInstrGeneric generic;$/;"	m	union:__anon96
gfxinit	redbook/polyoff.c	/^void gfxinit (void)$/;"	f
glActiveTexture	src/gl.cpp	/^GLAPI void APIENTRY glActiveTexture (GLenum texture) { $/;"	f
glAlphaFunc	src/gl.cpp	/^GLAPI void APIENTRY glAlphaFunc (GLenum func, GLclampf ref) { $/;"	f
glAlphaFuncx	src/gl.cpp	/^GLAPI void APIENTRY glAlphaFuncx (GLenum func, GLclampx ref) { $/;"	f
glBindBuffer	src/gl.cpp	/^GLAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer) {$/;"	f
glBindTexture	src/gl.cpp	/^GLAPI void APIENTRY glBindTexture (GLenum target, GLuint texture) { $/;"	f
glBlendFunc	src/gl.cpp	/^GLAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor) { $/;"	f
glBufferData	src/gl.cpp	/^GLAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage) {$/;"	f
glBufferSubData	src/gl.cpp	/^GLAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data) {$/;"	f
glClear	src/gl.cpp	/^GLAPI void APIENTRY glClear (GLbitfield mask) { $/;"	f
glClearColor	src/gl.cpp	/^GLAPI void APIENTRY glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) { $/;"	f
glClearColorx	src/gl.cpp	/^GLAPI void APIENTRY glClearColorx (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha) { $/;"	f
glClearDepthf	src/gl.cpp	/^GLAPI void APIENTRY glClearDepthf (GLclampf depth) {$/;"	f
glClearDepthx	src/gl.cpp	/^GLAPI void APIENTRY glClearDepthx (GLclampx depth) { $/;"	f
glClearStencil	src/gl.cpp	/^GLAPI void APIENTRY glClearStencil (GLint s) { $/;"	f
glClientActiveTexture	src/gl.cpp	/^GLAPI void APIENTRY glClientActiveTexture (GLenum texture) { $/;"	f
glClipPlanef	src/gl.cpp	/^GLAPI void APIENTRY glClipPlanef(GLenum plane, const GLfloat *equation) {$/;"	f
glClipPlanex	src/gl.cpp	/^GLAPI void APIENTRY glClipPlanex(GLenum plane, const GLfixed *equation) {$/;"	f
glColor4f	src/gl.cpp	/^GLAPI void APIENTRY glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { $/;"	f
glColor4x	src/gl.cpp	/^GLAPI void APIENTRY glColor4x (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { $/;"	f
glColorMask	src/gl.cpp	/^GLAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { $/;"	f
glColorPointer	src/gl.cpp	/^GLAPI void APIENTRY glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { $/;"	f
glCompressedTexImage2D	src/gl.cpp	/^GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) { $/;"	f
glCompressedTexSubImage2D	src/gl.cpp	/^GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) { $/;"	f
glCopyTexImage2D	src/gl.cpp	/^GLAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { $/;"	f
glCopyTexSubImage2D	src/gl.cpp	/^GLAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { $/;"	f
glCullFace	src/gl.cpp	/^GLAPI void APIENTRY glCullFace (GLenum mode) { $/;"	f
glCurrentPaletteMatrixOES	src/gl.cpp	/^GLAPI void APIENTRY glCurrentPaletteMatrixOES(GLuint index) {$/;"	f
glDeleteBuffers	src/gl.cpp	/^GLAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers) {$/;"	f
glDeleteTextures	src/gl.cpp	/^GLAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures) { $/;"	f
glDepthFunc	src/gl.cpp	/^GLAPI void APIENTRY glDepthFunc (GLenum func) { $/;"	f
glDepthMask	src/gl.cpp	/^GLAPI void APIENTRY glDepthMask (GLboolean flag) { $/;"	f
glDepthRangef	src/gl.cpp	/^GLAPI void APIENTRY glDepthRangef (GLclampf zNear, GLclampf zFar) { $/;"	f
glDepthRangex	src/gl.cpp	/^GLAPI void APIENTRY glDepthRangex (GLclampx zNear, GLclampx zFar) { $/;"	f
glDisable	src/gl.cpp	/^GLAPI void APIENTRY glDisable (GLenum cap) { $/;"	f
glDisableClientState	src/gl.cpp	/^GLAPI void APIENTRY glDisableClientState (GLenum array) { $/;"	f
glDrawArrays	src/gl.cpp	/^GLAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count) { $/;"	f
glDrawElements	src/gl.cpp	/^GLAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) { $/;"	f
glEnable	src/gl.cpp	/^GLAPI void APIENTRY glEnable (GLenum cap) { $/;"	f
glEnableClientState	src/gl.cpp	/^GLAPI void APIENTRY glEnableClientState (GLenum array) { $/;"	f
glFinish	src/gl.cpp	/^GLAPI void APIENTRY glFinish (void) { $/;"	f
glFlush	src/gl.cpp	/^GLAPI void APIENTRY glFlush (void) { $/;"	f
glFogf	src/gl.cpp	/^GLAPI void APIENTRY glFogf (GLenum pname, GLfloat param) { $/;"	f
glFogfv	src/gl.cpp	/^GLAPI void APIENTRY glFogfv (GLenum pname, const GLfloat *params) { $/;"	f
glFogx	src/gl.cpp	/^GLAPI void APIENTRY glFogx (GLenum pname, GLfixed param) { $/;"	f
glFogxv	src/gl.cpp	/^GLAPI void APIENTRY glFogxv (GLenum pname, const GLfixed *params) { $/;"	f
glFrontFace	src/gl.cpp	/^GLAPI void APIENTRY glFrontFace (GLenum mode) { $/;"	f
glFrustumf	src/gl.cpp	/^GLAPI void APIENTRY glFrustumf (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar) { $/;"	f
glFrustumx	src/gl.cpp	/^GLAPI void APIENTRY glFrustumx (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar) { $/;"	f
glGenBuffers	src/gl.cpp	/^GLAPI void APIENTRY glGenBuffers(GLsizei n, GLuint *buffers) {$/;"	f
glGenTextures	src/gl.cpp	/^GLAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures) { $/;"	f
glGetBooleanv	src/gl.cpp	/^GLAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean *params) {$/;"	f
glGetBufferParameteriv	src/gl.cpp	/^GLAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {$/;"	f
glGetClipPlanef	src/gl.cpp	/^GLAPI void APIENTRY glGetClipPlanef(GLenum pname, GLfloat eqn[4]) {$/;"	f
glGetClipPlanex	src/gl.cpp	/^GLAPI void APIENTRY glGetClipPlanex(GLenum pname, GLfixed eqn[4]) {$/;"	f
glGetError	src/gl.cpp	/^GLAPI GLenum APIENTRY glGetError (void) { $/;"	f
glGetFixedv	src/gl.cpp	/^GLAPI void APIENTRY glGetFixedv(GLenum pname, GLfixed *params) {$/;"	f
glGetFloatv	src/gl.cpp	/^GLAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat *params) {$/;"	f
glGetIntegerv	src/gl.cpp	/^GLAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *params) {$/;"	f
glGetLightfv	src/gl.cpp	/^GLAPI void APIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params) {$/;"	f
glGetLightxv	src/gl.cpp	/^GLAPI void APIENTRY glGetLightxv(GLenum light, GLenum pname, GLfixed *params) {$/;"	f
glGetMaterialfv	src/gl.cpp	/^GLAPI void APIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {$/;"	f
glGetMaterialxv	src/gl.cpp	/^GLAPI void APIENTRY glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params) {$/;"	f
glGetPointerv	src/gl.cpp	/^GLAPI void APIENTRY glGetPointerv(GLenum pname, void **params) {$/;"	f
glGetString	src/gl.cpp	/^GLAPI const GLubyte * APIENTRY glGetString (GLenum name) { $/;"	f
glGetTexEnvfv	src/gl.cpp	/^GLAPI void APIENTRY glGetTexEnvfv(GLenum env, GLenum pname, GLfloat *params) {$/;"	f
glGetTexEnviv	src/gl.cpp	/^GLAPI void APIENTRY glGetTexEnviv(GLenum env, GLenum pname, GLint *params) {$/;"	f
glGetTexEnvxv	src/gl.cpp	/^GLAPI void APIENTRY glGetTexEnvxv(GLenum env, GLenum pname, GLfixed *params) {$/;"	f
glGetTexParameterfv	src/gl.cpp	/^GLAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {$/;"	f
glGetTexParameteriv	src/gl.cpp	/^GLAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {$/;"	f
glGetTexParameterxv	src/gl.cpp	/^GLAPI void APIENTRY glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params) {$/;"	f
glHint	src/gl.cpp	/^GLAPI void APIENTRY glHint (GLenum target, GLenum mode) { $/;"	f
glIsBuffer	src/gl.cpp	/^GLAPI GLboolean APIENTRY glIsBuffer(GLuint buffer) {$/;"	f
glIsEnabled	src/gl.cpp	/^GLAPI GLboolean APIENTRY glIsEnabled(GLenum cap) {$/;"	f
glIsTexture	src/gl.cpp	/^GLAPI GLboolean APIENTRY glIsTexture(GLuint texture) {$/;"	f
glLightModelf	src/gl.cpp	/^GLAPI void APIENTRY glLightModelf (GLenum pname, GLfloat param) { $/;"	f
glLightModelfv	src/gl.cpp	/^GLAPI void APIENTRY glLightModelfv (GLenum pname, const GLfloat *params) { $/;"	f
glLightModelx	src/gl.cpp	/^GLAPI void APIENTRY glLightModelx (GLenum pname, GLfixed param) { $/;"	f
glLightModelxv	src/gl.cpp	/^GLAPI void APIENTRY glLightModelxv (GLenum pname, const GLfixed *params) { $/;"	f
glLightf	src/gl.cpp	/^GLAPI void APIENTRY glLightf (GLenum light, GLenum pname, GLfloat param) { $/;"	f
glLightfv	src/gl.cpp	/^GLAPI void APIENTRY glLightfv (GLenum light, GLenum pname, const GLfloat *params) { $/;"	f
glLightx	src/gl.cpp	/^GLAPI void APIENTRY glLightx (GLenum light, GLenum pname, GLfixed param) { $/;"	f
glLightxv	src/gl.cpp	/^GLAPI void APIENTRY glLightxv (GLenum light, GLenum pname, const GLfixed *params) { $/;"	f
glLineWidth	src/gl.cpp	/^GLAPI void APIENTRY glLineWidth (GLfloat width) { $/;"	f
glLineWidthx	src/gl.cpp	/^GLAPI void APIENTRY glLineWidthx (GLfixed width) { $/;"	f
glLoadIdentity	src/gl.cpp	/^GLAPI void APIENTRY glLoadIdentity (void) { $/;"	f
glLoadMatrixf	src/gl.cpp	/^GLAPI void APIENTRY glLoadMatrixf (const GLfloat *m) { $/;"	f
glLoadMatrixx	src/gl.cpp	/^GLAPI void APIENTRY glLoadMatrixx (const GLfixed *m) { $/;"	f
glLoadPaletteFromModelViewMatrixOES	src/gl.cpp	/^GLAPI void APIENTRY glLoadPaletteFromModelViewMatrixOES(void) {$/;"	f
glLogicOp	src/gl.cpp	/^GLAPI void APIENTRY glLogicOp (GLenum opcode) { $/;"	f
glMaterialf	src/gl.cpp	/^GLAPI void APIENTRY glMaterialf (GLenum face, GLenum pname, GLfloat param) { $/;"	f
glMaterialfv	src/gl.cpp	/^GLAPI void APIENTRY glMaterialfv (GLenum face, GLenum pname, const GLfloat *params) { $/;"	f
glMaterialx	src/gl.cpp	/^GLAPI void APIENTRY glMaterialx (GLenum face, GLenum pname, GLfixed param) { $/;"	f
glMaterialxv	src/gl.cpp	/^GLAPI void APIENTRY glMaterialxv (GLenum face, GLenum pname, const GLfixed *params) { $/;"	f
glMatrixIndexPointerOES	src/gl.cpp	/^GLAPI void APIENTRY glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {$/;"	f
glMatrixMode	src/gl.cpp	/^GLAPI void APIENTRY glMatrixMode (GLenum mode) { $/;"	f
glMultMatrixf	src/gl.cpp	/^GLAPI void APIENTRY glMultMatrixf (const GLfloat *m) { $/;"	f
glMultMatrixx	src/gl.cpp	/^GLAPI void APIENTRY glMultMatrixx (const GLfixed *m) { $/;"	f
glMultiTexCoord4f	src/gl.cpp	/^GLAPI void APIENTRY glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { $/;"	f
glMultiTexCoord4x	src/gl.cpp	/^GLAPI void APIENTRY glMultiTexCoord4x (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { $/;"	f
glNormal3f	src/gl.cpp	/^GLAPI void APIENTRY glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz) { $/;"	f
glNormal3x	src/gl.cpp	/^GLAPI void APIENTRY glNormal3x (GLfixed nx, GLfixed ny, GLfixed nz) { $/;"	f
glNormalPointer	src/gl.cpp	/^GLAPI void APIENTRY glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer) { $/;"	f
glOrthof	src/gl.cpp	/^GLAPI void APIENTRY glOrthof (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar) { $/;"	f
glOrthox	src/gl.cpp	/^GLAPI void APIENTRY glOrthox (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar) { $/;"	f
glPixelStorei	src/gl.cpp	/^GLAPI void APIENTRY glPixelStorei (GLenum pname, GLint param) { $/;"	f
glPointParameterf	src/gl.cpp	/^GLAPI void APIENTRY glPointParameterf(GLenum pname, GLfloat param) {$/;"	f
glPointParameterfv	src/gl.cpp	/^GLAPI void APIENTRY glPointParameterfv(GLenum pname, const GLfloat *params) {$/;"	f
glPointParameterx	src/gl.cpp	/^GLAPI void APIENTRY glPointParameterx(GLenum pname, GLfixed param) {$/;"	f
glPointParameterxv	src/gl.cpp	/^GLAPI void APIENTRY glPointParameterxv(GLenum pname, const GLfixed *params) {$/;"	f
glPointSize	src/gl.cpp	/^GLAPI void APIENTRY glPointSize (GLfloat size) { $/;"	f
glPointSizePointerOES	src/gl.cpp	/^GLAPI void APIENTRY glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer) {$/;"	f
glPointSizex	src/gl.cpp	/^GLAPI void APIENTRY glPointSizex (GLfixed size) { $/;"	f
glPolygonOffset	src/gl.cpp	/^GLAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units) { $/;"	f
glPolygonOffsetx	src/gl.cpp	/^GLAPI void APIENTRY glPolygonOffsetx (GLfixed factor, GLfixed units) { $/;"	f
glPopMatrix	src/gl.cpp	/^GLAPI void APIENTRY glPopMatrix (void) { $/;"	f
glPushMatrix	src/gl.cpp	/^GLAPI void APIENTRY glPushMatrix (void) { $/;"	f
glQueryMatrixxOES	src/gl.cpp	/^GLAPI GLbitfield APIENTRY glQueryMatrixxOES(GLfixed mantissa[16], GLint exponent[16]) {$/;"	f
glReadPixels	src/gl.cpp	/^GLAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) { $/;"	f
glRotatef	src/gl.cpp	/^GLAPI void APIENTRY glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { $/;"	f
glRotatex	src/gl.cpp	/^GLAPI void APIENTRY glRotatex (GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { $/;"	f
glSampleCoverage	src/gl.cpp	/^GLAPI void APIENTRY glSampleCoverage (GLclampf value, GLboolean invert) { $/;"	f
glSampleCoveragex	src/gl.cpp	/^GLAPI void APIENTRY glSampleCoveragex (GLclampx value, GLboolean invert) { $/;"	f
glScalef	src/gl.cpp	/^GLAPI void APIENTRY glScalef (GLfloat x, GLfloat y, GLfloat z) { $/;"	f
glScalex	src/gl.cpp	/^GLAPI void APIENTRY glScalex (GLfixed x, GLfixed y, GLfixed z) { $/;"	f
glScissor	src/gl.cpp	/^GLAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height) { $/;"	f
glShadeModel	src/gl.cpp	/^GLAPI void APIENTRY glShadeModel (GLenum mode) { $/;"	f
glStencilFunc	src/gl.cpp	/^GLAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask) { $/;"	f
glStencilMask	src/gl.cpp	/^GLAPI void APIENTRY glStencilMask (GLuint mask) { $/;"	f
glStencilOp	src/gl.cpp	/^GLAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass) { $/;"	f
glTexCoordPointer	src/gl.cpp	/^GLAPI void APIENTRY glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { $/;"	f
glTexEnvf	src/gl.cpp	/^GLAPI void APIENTRY glTexEnvf (GLenum target, GLenum pname, GLfloat param) { $/;"	f
glTexEnvfv	src/gl.cpp	/^GLAPI void APIENTRY glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params) { $/;"	f
glTexEnvx	src/gl.cpp	/^GLAPI void APIENTRY glTexEnvx (GLenum target, GLenum pname, GLfixed param) { $/;"	f
glTexEnvxv	src/gl.cpp	/^GLAPI void APIENTRY glTexEnvxv (GLenum target, GLenum pname, const GLfixed *params) { $/;"	f
glTexImage2D	src/gl.cpp	/^GLAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) { $/;"	f
glTexParameterf	src/gl.cpp	/^GLAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param) { $/;"	f
glTexParameteri	src/gl.cpp	/^GLAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param) { $/;"	f
glTexParameterx	src/gl.cpp	/^GLAPI void APIENTRY glTexParameterx (GLenum target, GLenum pname, GLfixed param) { $/;"	f
glTexSubImage2D	src/gl.cpp	/^GLAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) { $/;"	f
glTranslatef	src/gl.cpp	/^GLAPI void APIENTRY glTranslatef (GLfloat x, GLfloat y, GLfloat z) { $/;"	f
glTranslatex	src/gl.cpp	/^GLAPI void APIENTRY glTranslatex (GLfixed x, GLfixed y, GLfixed z) { $/;"	f
glVertexPointer	src/gl.cpp	/^GLAPI void APIENTRY glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { $/;"	f
glViewport	src/gl.cpp	/^GLAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height) { $/;"	f
glWeightPointerOES	src/gl.cpp	/^GLAPI void APIENTRY glWeightPointerOES(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {$/;"	f
global_regs	src/codegen/emit.c	/^	physical_reg_list_t		global_regs;		\/* global phys regs in use	*\/$/;"	m	struct:cg_codegen_t	file:
globals	src/codegen/instruction.h	/^	cg_virtual_reg_list_t * globals;		\/* list of registers selected for global allocation *\/$/;"	m	struct:cg_proc_t
h	src/codegen/arm-codegen.h	/^	arminstr_t h      : 1; \/* half-word or byte *\/$/;"	m	struct:__anon86
hInst	test/testwin.cpp	/^HINSTANCE hInst;								\/\/ current instance$/;"	v
hasAlpha	src/RasterizerTriangles.cpp	/^	bool hasAlpha(RasterizerState::TextureFormat format) {$/;"	f	namespace:__anon21
head	src/codegen/emit.c	/^	cg_physical_reg_t *		head;$/;"	m	struct:physical_reg_list_t	file:
head	src/codegen/instruction.h	/^	cg_inst_t *					head;$/;"	m	struct:cg_inst_list_head_t
heap	src/codegen/emit.c	/^	cg_heap_t *				heap;$/;"	m	struct:cg_codegen_t	file:
heap	src/codegen/instruction.h	/^	cg_heap_t *			heap;$/;"	m	struct:cg_module_t
height	src/Types.h	/^		GLsizei height;$/;"	m	struct:EGL::Rect
height	ug/ug_ftk.c	/^    int height;$/;"	m	struct:ugwindow	file:
height	ug/ug_win32.c	/^    int width, height;$/;"	m	struct:ugwindow	file:
help	projects/epoc/make.bat	/^:help$/;"	l
host	projects/linux-ftk/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	projects/linux-x11/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host_alias	projects/linux-ftk/Makefile	/^host_alias = $/;"	m
host_alias	projects/linux-x11/Makefile	/^host_alias = $/;"	m
host_cpu	projects/linux-ftk/Makefile	/^host_cpu = i686$/;"	m
host_cpu	projects/linux-x11/Makefile	/^host_cpu = i686$/;"	m
host_os	projects/linux-ftk/Makefile	/^host_os = linux-gnu$/;"	m
host_os	projects/linux-x11/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	projects/linux-ftk/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	projects/linux-x11/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_vendor	projects/linux-ftk/Makefile	/^host_vendor = pc$/;"	m
host_vendor	projects/linux-x11/Makefile	/^host_vendor = pc$/;"	m
htmldir	projects/linux-ftk/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	projects/linux-x11/Makefile	/^htmldir = ${docdir}$/;"	m
hwnd	ug/ug_win32.c	/^	HWND hwnd;$/;"	m	struct:_FindAppT	file:
hxfer	src/codegen/arm-codegen.h	/^	ARMInstrHXfer hxfer;$/;"	m	union:__anon96
iAppView	test/epoc/appui.h	/^	CAppView* iAppView;	\/\/ has$/;"	m	class:CAppUi
iCallBack	test/epoc/appview.h	/^    TCallBack* iCallBack;$/;"	m	class:CAppView
iData	test/epoc/appview.h	/^    mutable TAppGlobal iData;	$/;"	m	class:CAppView
iDll	test/epoc/appview.h	/^	RLibrary iDll;$/;"	m	class:CAppView
iShowBitmap	test/epoc/appview.h	/^    TBool iShowBitmap;$/;"	m	class:CAppView
iShowTest	test/epoc/appview.h	/^    TBool iShowTest;$/;"	m	class:CAppView
iTimer	test/epoc/appview.h	/^    CPeriodic* iTimer;$/;"	m	class:CAppView
icode	src/codegen/arm-codegen.h	/^	arminstr_t icode : 28;$/;"	m	struct:__anon72
id	test/epoc/paint.cpp	/^ GLint  id;$/;"	m	struct:sample_TEXTURE	file:
id	test/paint.cpp	/^ GLint  id;$/;"	m	struct:sample_TEXTURE	file:
idle	ug/ug_win32.c	/^    void (*idle)(UGWindow w);$/;"	m	struct:__anon2	file:
imm	src/codegen/arm-codegen.h	/^	arminstr_t imm : 8;$/;"	m	struct:__anon74
imm	src/codegen/arm-codegen.h	/^	} imm;$/;"	m	union:__anon76	typeref:struct:__anon76::__anon77
imm_hi	src/codegen/arm-codegen.h	/^	arminstr_t imm_hi : 4;$/;"	m	struct:__anon86
immed	src/codegen/instruction.h	/^	I32					immed;$/;"	m	union:__anon57
immed	src/codegen/instruction.h	/^	cg_inst_load_immed_t	immed;$/;"	m	union:cg_inst_t
immed_offset	src/codegen/instruction.h	/^	}					immed_offset;$/;"	m	union:__anon60	typeref:struct:__anon60::__anon62
inc_dir	projects/linux-ftk/Makefile	/^inc_dir = .\/..\/..\/include$/;"	m
inc_dir	projects/linux-x11/Makefile	/^inc_dir = .\/..\/..\/include$/;"	m
includedir	projects/linux-ftk/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	projects/linux-x11/Makefile	/^includedir = ${prefix}\/include$/;"	m
includeinstDATA_INSTALL	projects/linux-ftk/Makefile	/^includeinstDATA_INSTALL = $(INSTALL_DATA)$/;"	m
includeinstDATA_INSTALL	projects/linux-x11/Makefile	/^includeinstDATA_INSTALL = $(INSTALL_DATA)$/;"	m
includeinst_DATA	projects/linux-ftk/Makefile	/^includeinst_DATA = \\$/;"	m
includeinst_DATA	projects/linux-x11/Makefile	/^includeinst_DATA = \\$/;"	m
includeinstdir	projects/linux-ftk/Makefile	/^includeinstdir = $(includedir)\/GLES$/;"	m
includeinstdir	projects/linux-x11/Makefile	/^includeinstdir = $(includedir)\/GLES$/;"	m
infodir	projects/linux-ftk/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	projects/linux-x11/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init	demos/hello.c	/^static void init(void)$/;"	f	file:
init	demos/lines.cpp	/^void init (void) $/;"	f
init	redbook/aargb.c	/^void init(void)$/;"	f
init	redbook/alpha.c	/^static void init(void)$/;"	f	file:
init	redbook/alpha3D.c	/^static void init(void)$/;"	f	file:
init	redbook/checker.c	/^void init(void)$/;"	f
init	redbook/colormat.c	/^void init(void) $/;"	f
init	redbook/cube.c	/^void init(void) $/;"	f
init	redbook/double.c	/^void init(void) $/;"	f
init	redbook/fog.c	/^static void init(void)$/;"	f	file:
init	redbook/hello.c	/^void init (void) $/;"	f
init	redbook/light.c	/^void init(void) $/;"	f
init	redbook/lines.c	/^void init(void) $/;"	f
init	redbook/material.c	/^void init(void)$/;"	f
init	redbook/mipmap.c	/^void init(void)$/;"	f
init	redbook/model.c	/^void init(void) $/;"	f
init	redbook/movelight.c	/^void init(void) $/;"	f
init	redbook/planet.c	/^void init(void) $/;"	f
init	redbook/robot.c	/^void init(void) $/;"	f
init	redbook/scene.c	/^void init (void)$/;"	f
init	redbook/smooth.c	/^void init(void) $/;"	f
init	redbook/stencil.c	/^void init (void) $/;"	f
init	redbook/stroke.c	/^static void init (void)$/;"	f	file:
init	redbook/texbind.c	/^void init(void)$/;"	f
init	redbook/texsub.c	/^void init(void)$/;"	f
init	redbook/torus.c	/^static void init(void)$/;"	f	file:
init	redbook/varray.c	/^void init(void) $/;"	f
init	redbook/wrap.c	/^void init(void)$/;"	f
init_arg	src/codegen/emit.c	/^static void init_arg(cg_codegen_t * gen, cg_physical_reg_t * physical_reg,$/;"	f	file:
init_flags	src/codegen/emit.c	/^static void init_flags(cg_codegen_t * gen)$/;"	f	file:
init_free	src/codegen/emit.c	/^static void init_free(cg_codegen_t * gen, cg_physical_reg_t * physical_reg)$/;"	f	file:
init_use_chains	src/codegen/emit.c	/^static void init_use_chains(cg_codegen_t * gen, cg_block_t * block) $/;"	f	file:
inst	src/codegen/instruction.h	/^	cg_inst_t *					inst;$/;"	m	struct:cg_inst_list_t
inst_amode	src/codegen/instruction.c	/^static void inst_amode(cg_inst_t * inst)$/;"	f	file:
inst_create	src/codegen/instruction.c	/^static cg_inst_t * inst_create(cg_block_t * block, size_t size, $/;"	f	file:
inst_dump	src/codegen/instruction.c	/^static void inst_dump(cg_inst_t * inst, FILE * out)$/;"	f	file:
inst_list_append	src/codegen/instruction.c	/^static void inst_list_append(cg_inst_list_head_t * insts, cg_inst_t * inst)$/;"	f	file:
install_sh	projects/linux-ftk/Makefile	/^install_sh = \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-ftk\/install-sh$/;"	m
install_sh	projects/linux-x11/Makefile	/^install_sh = \/lab\/mime\/googlecode\/ftke\/ogles\/projects\/linux-x11\/install-sh$/;"	m
install_sh_DATA	projects/linux-ftk/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	projects/linux-x11/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	projects/linux-ftk/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	projects/linux-x11/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	projects/linux-ftk/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	projects/linux-x11/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance	ug/ug_win32.c	/^static HINSTANCE instance;$/;"	v	file:
insts	src/codegen/instruction.h	/^	cg_inst_list_head_t		insts;$/;"	m	struct:cg_block_t
interferences	src/codegen/instruction.h	/^	cg_virtual_reg_list_t *		interferences;		\/* list of interfering regs.	*\/$/;"	m	struct:cg_virtual_reg_t
invZ	src/Rasterizer.h	/^		EGL_Fixed		invZ;		\/\/ 1\/Z (w) from depth division$/;"	m	struct:EGL::ScreenCoord
invZ	src/Rasterizer.h	/^		EGL_Fixed		x, invZ;	\/\/ x window coords$/;"	m	struct:EGL::EdgeCoord
inv_HP_16_32s	src/codegen/emit.h	/^	I32 (*inv_HP_16_32s)		(I32 src);$/;"	m	struct:cg_runtime_info_t
inv_LP_16_32s	src/codegen/emit.h	/^	I32 (*inv_LP_16_32s)		(I32 src);$/;"	m	struct:cg_runtime_info_t
inv_sqrt_HP_16_32s	src/codegen/emit.h	/^	I32 (*inv_sqrt_HP_16_32s)	(I32 src);$/;"	m	struct:cg_runtime_info_t
inv_sqrt_LP_16_32s	src/codegen/emit.h	/^	I32 (*inv_sqrt_LP_16_32s)	(I32 src);$/;"	m	struct:cg_runtime_info_t
is_arg	src/codegen/instruction.h	/^	int							is_arg : 1;			\/* is passed in as argument val.*\/$/;"	m	struct:cg_virtual_reg_t
is_arm_binary_data_opcode	src/codegen/instruction.c	/^static int is_arm_binary_data_opcode(cg_opcode_t opcode) {$/;"	f	file:
is_arm_const	src/codegen/arm-codegen.c	/^int is_arm_const(armword_t val) {$/;"	f
is_arm_data_proc_immediate	src/codegen/instruction.c	/^static int is_arm_data_proc_immediate(U32 value) {$/;"	f	file:
is_arm_unary_data_opcode	src/codegen/instruction.c	/^static int is_arm_unary_data_opcode(cg_opcode_t opcode) {$/;"	f	file:
is_global	src/codegen/instruction.h	/^	int							is_global : 1;		\/* is this a global register?   *\/$/;"	m	struct:cg_virtual_reg_t
is_shift_or_rotate	src/codegen/instruction.c	/^static int is_shift_or_rotate(cg_opcode_t opcode) {$/;"	f	file:
is_simple_inst	src/codegen/emit.c	/^int is_simple_inst(cg_inst_t * inst) {$/;"	f
kbd	ug/ug_ftk.c	/^    void (*kbd)(UGWindow w, int key, int x, int y);$/;"	m	struct:ugwindow	file:
kbd	ug/ug_win32.c	/^    void (*kbd)(UGWindow w, int key, int x, int y);$/;"	m	struct:ugwindow	file:
keyboard	demos/hello.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/aargb.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/alpha.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/alpha3D.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/checker.c	/^void keyboard (UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/colormat.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/cube.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/fog.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/light.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/lines.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/material.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/mipmap.c	/^void keyboard (UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/model.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/movelight.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/planet.c	/^void keyboard (UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/polyoff.c	/^void keyboard (UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/robot.c	/^void keyboard (UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/scene.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/smooth.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/stencil.c	/^void keyboard(unsigned char key, int x, int y)$/;"	f
keyboard	redbook/stroke.c	/^void keyboard(unsigned char key, int x, int y)$/;"	f
keyboard	redbook/texbind.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/texsub.c	/^void keyboard (UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/torus.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/varray.c	/^void keyboard(UGWindow uwin, int key, int x, int y)$/;"	f
keyboard	redbook/wrap.c	/^void keyboard (UGWindow uwin, int key, int x, int y)$/;"	f
kill_argument_registers	src/codegen/emit.c	/^static void kill_argument_registers(cg_codegen_t * gen)$/;"	f	file:
kill_flags	src/codegen/emit.c	/^static void kill_flags(cg_codegen_t * gen)$/;"	f	file:
kind	src/codegen/instruction.h	/^	cg_inst_kind_t		kind;$/;"	m	struct:cg_inst_base_t
label	src/codegen/instruction.h	/^	struct cg_label_t *		label;$/;"	m	struct:cg_block_t	typeref:struct:cg_block_t::cg_label_t
labels	src/codegen/emit.c	/^	cg_label_t *			labels;$/;"	m	struct:cg_codegen_t	file:
last_block	src/codegen/instruction.h	/^	cg_block_t *		last_block;			\/* pointer to last block		*\/$/;"	m	struct:cg_proc_t
last_register	src/codegen/instruction.h	/^	cg_virtual_reg_t *	last_register;		\/* ptr to last register in list *\/$/;"	m	struct:cg_proc_t
leftFirst	redbook/alpha.c	/^static int leftFirst = GL_TRUE;$/;"	v	file:
libLTLIBRARIES_INSTALL	projects/linux-ftk/Makefile	/^libLTLIBRARIES_INSTALL = $(INSTALL)$/;"	m
libLTLIBRARIES_INSTALL	projects/linux-x11/Makefile	/^libLTLIBRARIES_INSTALL = $(INSTALL)$/;"	m
lib_LTLIBRARIES	projects/linux-ftk/Makefile	/^lib_LTLIBRARIES = libvincent.la$/;"	m
lib_LTLIBRARIES	projects/linux-x11/Makefile	/^lib_LTLIBRARIES = libvincent.la$/;"	m
libdir	projects/linux-ftk/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	projects/linux-x11/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	projects/linux-ftk/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	projects/linux-x11/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libvincent_la_LDFLAGS	projects/linux-ftk/Makefile	/^libvincent_la_LDFLAGS =$/;"	m
libvincent_la_LDFLAGS	projects/linux-x11/Makefile	/^libvincent_la_LDFLAGS =$/;"	m
libvincent_la_LIBADD	projects/linux-ftk/Makefile	/^libvincent_la_LIBADD =$/;"	m
libvincent_la_LIBADD	projects/linux-x11/Makefile	/^libvincent_la_LIBADD =$/;"	m
libvincent_la_OBJECTS	projects/linux-ftk/Makefile	/^libvincent_la_OBJECTS = $(am_libvincent_la_OBJECTS)$/;"	m
libvincent_la_OBJECTS	projects/linux-x11/Makefile	/^libvincent_la_OBJECTS = $(am_libvincent_la_OBJECTS)$/;"	m
libvincent_la_SOURCES	projects/linux-ftk/Makefile	/^libvincent_la_SOURCES = \\$/;"	m
libvincent_la_SOURCES	projects/linux-x11/Makefile	/^libvincent_la_SOURCES = \\$/;"	m
line	src/codegen/instruction.h	/^	int					line;$/;"	m	struct:cg_inst_base_t
lines_DEPENDENCIES	projects/linux-ftk/Makefile	/^lines_DEPENDENCIES =$/;"	m
lines_LDADD	projects/linux-ftk/Makefile	/^lines_LDADD = $(LDADD)$/;"	m
lines_LDFLAGS	projects/linux-ftk/Makefile	/^lines_LDFLAGS = libvincent.la$/;"	m
lines_OBJECTS	projects/linux-ftk/Makefile	/^lines_OBJECTS = $(am_lines_OBJECTS)$/;"	m
lines_SOURCES	projects/linux-ftk/Makefile	/^lines_SOURCES = $(src_dir)\/..\/demos\/lines.cpp$/;"	m
link	src/codegen/arm-codegen.h	/^	arminstr_t link   :  1;$/;"	m	struct:__anon73
list	redbook/polyoff.c	/^GLuint list;$/;"	v
list	src/codegen/emit.c	/^	struct physical_reg_list_t * list;$/;"	m	struct:cg_physical_reg_t	typeref:struct:cg_physical_reg_t::physical_reg_list_t	file:
literal_base	src/codegen/emit.c	/^	cg_label_t *			literal_base;$/;"	m	struct:cg_codegen_t	file:
literal_pool_size	src/codegen/emit.c	/^	size_t					literal_pool_size;$/;"	m	struct:cg_codegen_t	file:
literal_t	src/codegen/emit.c	/^literal_t;$/;"	t	typeref:struct:literal_t	file:
literal_t	src/codegen/emit.c	/^typedef struct literal_t$/;"	s	file:
literals	src/codegen/emit.c	/^	literal_t *				literals;$/;"	m	struct:cg_codegen_t	file:
live_in	src/codegen/instruction.h	/^	struct cg_bitset_t *	live_in;		\/* set of regs live on entering *\/$/;"	m	struct:cg_block_t	typeref:struct:cg_block_t::cg_bitset_t
live_out	src/codegen/instruction.h	/^	struct cg_bitset_t *	live_out;		\/* set of regs live on leaving  *\/$/;"	m	struct:cg_block_t	typeref:struct:cg_block_t::cg_bitset_t
load	src/codegen/instruction.h	/^	cg_inst_load_t			load;$/;"	m	union:cg_inst_t
load_reg	src/codegen/emit.c	/^static cg_physical_reg_t * load_reg(cg_codegen_t * gen, cg_virtual_reg_t * reg,$/;"	f	file:
load_register_arg	src/codegen/emit.c	/^static void load_register_arg(cg_codegen_t * gen, cg_virtual_reg_t * reg, ARMReg regno, cg_inst_t * inst)$/;"	f	file:
local_storage	src/codegen/instruction.h	/^	size_t				local_storage;		\/* size of activation record	*\/$/;"	m	struct:cg_proc_t
localedir	projects/linux-ftk/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	projects/linux-x11/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
locals_size_offset	src/codegen/emit.c	/^	size_t					locals_size_offset;$/;"	m	struct:cg_codegen_t	file:
localstatedir	projects/linux-ftk/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	projects/linux-x11/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
longProduct	src/linalg.h	/^		inline I64 longProduct(const Vec4D& other) const {$/;"	f	class:EGL::Vec4D
ls	src/codegen/arm-codegen.h	/^		arminstr_t ls      :  1;$/;"	m	struct:__anon84::__anon85
ls	src/codegen/arm-codegen.h	/^	arminstr_t ls       :  1; \/* load(1)\/store(0) *\/$/;"	m	struct:__anon82
ls	src/codegen/arm-codegen.h	/^	arminstr_t ls     : 1;$/;"	m	struct:__anon86
ls	src/codegen/arm-codegen.h	/^	arminstr_t ls   : 1;$/;"	m	struct:__anon90
ls	src/codegen/arm-codegen.h	/^	arminstr_t ls   : 1;$/;"	m	struct:__anon91
lt_ECHO	projects/linux-ftk/Makefile	/^lt_ECHO = echo$/;"	m
lt_ECHO	projects/linux-x11/Makefile	/^lt_ECHO = echo$/;"	m
m_ActiveTexture	src/Context.h	/^		size_t				m_ActiveTexture;$/;"	m	class:EGL::Context
m_AllConfigurations	src/OGLES.h	/^        Config* m_AllConfigurations;$/;"	m	struct:EGL::TlsInfo
m_AllocatedObjects	src/Arrays.h	/^		size_t				m_AllocatedObjects;$/;"	m	struct:EGL::ObjectArray
m_Alpha	src/RasterizerState.h	/^								m_Alpha;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::AlphaState
m_AlphaBuffer	src/Epoc/Surface.h	/^		U8 *			m_AlphaBuffer;		\/\/ pointer to alpha buffer$/;"	m	class:EGL::Surface
m_AlphaBuffer	src/WinCE/Surface.h	/^		U8 *	m_AlphaBuffer;		\/\/ pointer to alpha buffer$/;"	m	class:EGL::Surface
m_AlphaBuffer	src/linux-ftk/Surface.h	/^		U8 *	m_AlphaBuffer;		\/\/ pointer to alpha buffer$/;"	m	class:EGL::Surface
m_AlphaBuffer	src/linux-x11/Surface.h	/^		U8 *	m_AlphaBuffer;		\/\/ pointer to alpha buffer$/;"	m	class:EGL::Surface
m_AlphaBuffer	src/win/Surface.h	/^		U8 *	m_AlphaBuffer;		\/\/ pointer to alpha buffer$/;"	m	class:EGL::Surface
m_AlphaSize	src/Config.h	/^		EGLint	m_AlphaSize;$/;"	m	class:EGL::Config
m_AmbientColor	src/Light.h	/^		FractionalColor			m_AmbientColor;$/;"	m	class:EGL::Light
m_AmbientColor	src/Material.h	/^		FractionalColor			m_AmbientColor;$/;"	m	class:EGL::Material
m_BackColor	src/Rasterizer.h	/^		FractionalColor		m_BackColor;		$/;"	m	struct:EGL::RasterPos
m_Bitmap	src/Epoc/Surface.h	/^		CFbsBitmap *	m_Bitmap;			\/\/ windows bitmap handle$/;"	m	class:EGL::Surface
m_Bitmap	src/WinCE/Surface.h	/^		HBITMAP	m_Bitmap;			\/\/ windows bitmap handle$/;"	m	class:EGL::Surface
m_Bitmap	src/linux-ftk/Surface.h	/^    	NativePixmapType  m_Bitmap;$/;"	m	class:EGL::Surface
m_Bitmap	src/linux-x11/Surface.h	/^    NativePixmapType m_Bitmap;$/;"	m	class:EGL::Surface
m_Bitmap	src/win/Surface.h	/^		HBITMAP	m_Bitmap;			\/\/ windows bitmap handle$/;"	m	class:EGL::Surface
m_Blend	src/RasterizerState.h	/^								m_Blend;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::BlendState
m_BlueSize	src/Config.h	/^		EGLint	m_BlueSize;$/;"	m	class:EGL::Config
m_BufferSize	src/Config.h	/^		EGLint	m_BufferSize;$/;"	m	class:EGL::Config
m_Buffers	src/Context.h	/^		BufferArray			m_Buffers;$/;"	m	class:EGL::Context
m_ClientActiveTexture	src/Context.h	/^		size_t				m_ClientActiveTexture;$/;"	m	class:EGL::Context
m_ClipCoords	src/Rasterizer.h	/^		Vec4D				m_ClipCoords;$/;"	m	struct:EGL::RasterPos
m_ClipPlaneEnabled	src/Context.h	/^		U32					m_ClipPlaneEnabled;$/;"	m	class:EGL::Context
m_ClipPlanes	src/Context.h	/^		Vec4D				m_ClipPlanes[NUM_CLIP_PLANES];$/;"	m	class:EGL::Context
m_Code	src/arm/FunctionCache.h	/^		U8 *				m_Code;$/;"	m	class:EGL::FunctionCache
m_Color	src/Rasterizer.h	/^		FractionalColor		m_Color;									\/\/ color in range 0..255$/;"	m	struct:EGL::EdgePos
m_Color	src/Rasterizer.h	/^		FractionalColor		m_Color;$/;"	m	struct:EGL::RasterPos
m_ColorArray	src/Context.h	/^		VertexArray			m_ColorArray;$/;"	m	class:EGL::Context
m_ColorArrayEnabled	src/Context.h	/^		bool				m_ColorArrayEnabled;$/;"	m	class:EGL::Context
m_ColorBuffer	src/WinCE/Surface.h	/^		U16 *	m_ColorBuffer;		\/\/ pointer to frame buffer base address 5-6-5$/;"	m	class:EGL::Surface
m_ColorBuffer	src/linux-ftk/Surface.h	/^		U16 *	m_ColorBuffer;		\/\/ pointer to frame buffer base address 5-6-5$/;"	m	class:EGL::Surface
m_ColorBuffer	src/linux-x11/Surface.h	/^		U16 *	m_ColorBuffer;		\/\/ pointer to frame buffer base address 5-6-5$/;"	m	class:EGL::Surface
m_ColorBuffer	src/win/Surface.h	/^		U16 *	m_ColorBuffer;		\/\/ pointer to frame buffer base address 5-6-5$/;"	m	class:EGL::Surface
m_ColorClearValue	src/Context.h	/^		FractionalColor		m_ColorClearValue;$/;"	m	class:EGL::Context
m_ColorMaterialEnabled	src/Context.h	/^		bool				m_ColorMaterialEnabled;$/;"	m	class:EGL::Context
m_Config	src/Context.h	/^		Config				m_Config;			\/\/ copy of configuration args$/;"	m	class:EGL::Context
m_Config	src/Epoc/Surface.h	/^		Config			m_Config;			\/\/ configuration arguments$/;"	m	class:EGL::Surface
m_Config	src/WinCE/Surface.h	/^		Config	m_Config;			\/\/ configuration arguments$/;"	m	class:EGL::Surface
m_Config	src/linux-ftk/Surface.h	/^		Config	m_Config;			\/\/ configuration arguments$/;"	m	class:EGL::Surface
m_Config	src/linux-x11/Surface.h	/^		Config	m_Config;			\/\/ configuration arguments$/;"	m	class:EGL::Surface
m_Config	src/win/Surface.h	/^		Config	m_Config;			\/\/ configuration arguments$/;"	m	class:EGL::Surface
m_ConfigCaveat	src/Config.h	/^		EGLint	m_ConfigCaveat;$/;"	m	class:EGL::Config
m_ConfigID	src/Config.h	/^		EGLint	m_ConfigID;$/;"	m	class:EGL::Config
m_ConstantAttenuation	src/Light.h	/^		EGL_Fixed				m_ConstantAttenuation;$/;"	m	class:EGL::Light
m_Context	src/OGLES.h	/^		Context * m_Context;$/;"	m	struct:EGL::TlsInfo
m_CosineSpotCutoff	src/Light.h	/^		EGL_Fixed				m_CosineSpotCutoff;$/;"	m	class:EGL::Light
m_CullFaceEnabled	src/Context.h	/^		bool				m_CullFaceEnabled;$/;"	m	class:EGL::Context
m_CullMode	src/Context.h	/^		CullMode			m_CullMode;$/;"	m	class:EGL::Context
m_Current	src/Context.h	/^		bool				m_Current;			\/\/ this context has been selected$/;"	m	class:EGL::Context
m_CurrentArrayBuffer	src/Context.h	/^		size_t				m_CurrentArrayBuffer;$/;"	m	class:EGL::Context
m_CurrentContext	src/Epoc/Surface.h	/^		Context *		m_CurrentContext;$/;"	m	class:EGL::Surface
m_CurrentContext	src/WinCE/Surface.h	/^		Context *	m_CurrentContext;$/;"	m	class:EGL::Surface
m_CurrentContext	src/linux-ftk/Surface.h	/^		Context *	m_CurrentContext;$/;"	m	class:EGL::Surface
m_CurrentContext	src/linux-x11/Surface.h	/^		Context *	m_CurrentContext;$/;"	m	class:EGL::Surface
m_CurrentContext	src/win/Surface.h	/^		Context *	m_CurrentContext;$/;"	m	class:EGL::Surface
m_CurrentElementArrayBuffer	src/Context.h	/^		size_t				m_CurrentElementArrayBuffer;$/;"	m	class:EGL::Context
m_CurrentMatrixStack	src/Context.h	/^		MatrixStack *		m_CurrentMatrixStack;$/;"	m	class:EGL::Context
m_CurrentNormal	src/Context.h	/^		Vec3D				m_CurrentNormal;$/;"	m	class:EGL::Context
m_CurrentPaletteMatrix	src/Context.h	/^		I32					m_CurrentPaletteMatrix;$/;"	m	class:EGL::Context
m_CurrentRGBA	src/Context.h	/^		FractionalColor		m_CurrentRGBA;$/;"	m	class:EGL::Context
m_CurrentTextureCoords	src/Context.h	/^		TexCoord			m_CurrentTextureCoords[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::Context
m_CurrentVertex	src/Context.h	/^		Vec4D				m_CurrentVertex;	$/;"	m	class:EGL::Context
m_CurrentWeights	src/Context.h	/^		EGL_Fixed			m_CurrentWeights[MATRIX_PALETTE_SIZE];$/;"	m	class:EGL::Context
m_Data	src/Buffer.h	/^		void *		m_Data;$/;"	m	class:EGL::Buffer
m_Data	src/Texture.h	/^		void *							m_Data;$/;"	m	class:EGL::Texture
m_DefaultNormal	src/Context.h	/^		Vec3D				m_DefaultNormal;$/;"	m	class:EGL::Context
m_DefaultRGBA	src/Context.h	/^		FractionalColor		m_DefaultRGBA;$/;"	m	class:EGL::Context
m_DefaultScaledTextureCoords	src/Context.h	/^		TexCoord			m_DefaultScaledTextureCoords[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::Context
m_DefaultTextureCoords	src/Context.h	/^		Vec4D				m_DefaultTextureCoords[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::Context
m_DepthBuffer	src/Epoc/Surface.h	/^		U16 *			m_DepthBuffer;		\/\/ pointer to Z-buffer base address$/;"	m	class:EGL::Surface
m_DepthBuffer	src/WinCE/Surface.h	/^		U16 *	m_DepthBuffer;		\/\/ pointer to Z-buffer base address$/;"	m	class:EGL::Surface
m_DepthBuffer	src/linux-ftk/Surface.h	/^		U16 *	m_DepthBuffer;		\/\/ pointer to Z-buffer base address$/;"	m	class:EGL::Surface
m_DepthBuffer	src/linux-x11/Surface.h	/^		U16 *	m_DepthBuffer;		\/\/ pointer to Z-buffer base address$/;"	m	class:EGL::Surface
m_DepthBuffer	src/win/Surface.h	/^		U16 *	m_DepthBuffer;		\/\/ pointer to Z-buffer base address$/;"	m	class:EGL::Surface
m_DepthClearValue	src/Context.h	/^		EGL_Fixed			m_DepthClearValue;$/;"	m	class:EGL::Context
m_DepthRangeBase	src/Context.h	/^		EGL_Fixed			m_DepthRangeBase, m_DepthRangeFactor;$/;"	m	class:EGL::Context
m_DepthRangeFactor	src/Context.h	/^		EGL_Fixed			m_DepthRangeBase, m_DepthRangeFactor;$/;"	m	class:EGL::Context
m_DepthRangeFar	src/Context.h	/^		EGL_Fixed			m_DepthRangeNear, m_DepthRangeFar;$/;"	m	class:EGL::Context
m_DepthRangeNear	src/Context.h	/^		EGL_Fixed			m_DepthRangeNear, m_DepthRangeFar;$/;"	m	class:EGL::Context
m_DepthSize	src/Config.h	/^		EGLint	m_DepthSize;$/;"	m	class:EGL::Config
m_DepthTest	src/RasterizerState.h	/^								m_DepthTest;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::DepthTestState
m_DiffuseColor	src/Light.h	/^		FractionalColor			m_DiffuseColor;$/;"	m	class:EGL::Light
m_DiffuseColor	src/Material.h	/^		FractionalColor			m_DiffuseColor;$/;"	m	class:EGL::Material
m_Display	src/linux-ftk/Surface.h	/^		NativeDisplayType m_Display;				\/\/ windows device context handle$/;"	m	class:EGL::Surface
m_Disposed	src/Context.h	/^		bool				m_Disposed;			\/\/ this context has been deleted,$/;"	m	class:EGL::Context
m_Disposed	src/Epoc/Surface.h	/^		bool			m_Disposed;			\/\/ the surface$/;"	m	class:EGL::Surface
m_Disposed	src/WinCE/Surface.h	/^		bool	m_Disposed;			\/\/ the surface $/;"	m	class:EGL::Surface
m_Disposed	src/linux-ftk/Surface.h	/^		bool	m_Disposed;			\/\/ the surface $/;"	m	class:EGL::Surface
m_Disposed	src/linux-x11/Surface.h	/^		bool	m_Disposed;			\/\/ the surface $/;"	m	class:EGL::Surface
m_Disposed	src/win/Surface.h	/^		bool	m_Disposed;			\/\/ the surface $/;"	m	class:EGL::Surface
m_DitherEnabled	src/Context.h	/^		bool				m_DitherEnabled;$/;"	m	class:EGL::Context
m_DrawSurface	src/Context.h	/^		Surface *			m_DrawSurface;		\/\/ current surface for drawing$/;"	m	class:EGL::Context
m_EffectiveAmbientColor	src/Light.h	/^		FractionalColor			m_EffectiveAmbientColor;$/;"	m	class:EGL::Light
m_EffectiveDiffuseColor	src/Light.h	/^		FractionalColor			m_EffectiveDiffuseColor;$/;"	m	class:EGL::Light
m_EffectiveSpecularColor	src/Light.h	/^		FractionalColor			m_EffectiveSpecularColor;$/;"	m	class:EGL::Light
m_EmissiveColor	src/Material.h	/^		FractionalColor			m_EmissiveColor;$/;"	m	class:EGL::Material
m_EyeCoords	src/Rasterizer.h	/^		Vec4D				m_EyeCoords;$/;"	m	struct:EGL::RasterPos
m_Flags	src/arm/FunctionCache.cpp	/^		U32				m_Flags;		\/\/ flags for garbage collection$/;"	m	struct:EGL::FunctionInfo	file:
m_Fog	src/RasterizerState.h	/^								m_Fog;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::FogState
m_FogDensity	src/Context.h	/^		EGL_Fixed			m_FogStart, m_FogDensity, m_FogEnd;	\/\/ rasterizer state$/;"	m	class:EGL::Context
m_FogDensity	src/Rasterizer.h	/^		EGL_Fixed			m_FogDensity;								\/\/ fog density at this vertex$/;"	m	struct:EGL::EdgePos
m_FogDensity	src/Rasterizer.h	/^		EGL_Fixed			m_FogDensity;		\/\/ fog density at this vertex$/;"	m	struct:EGL::RasterPos
m_FogEnd	src/Context.h	/^		EGL_Fixed			m_FogStart, m_FogDensity, m_FogEnd;	\/\/ rasterizer state$/;"	m	class:EGL::Context
m_FogGradient	src/Context.h	/^		EGL_Fixed			m_FogGradient;$/;"	m	class:EGL::Context
m_FogGradientShift	src/Context.h	/^		U8					m_FogGradientShift;$/;"	m	class:EGL::Context
m_FogHint	src/Context.h	/^		GLenum				m_FogHint;$/;"	m	class:EGL::Context
m_FogMode	src/Context.h	/^		FogMode				m_FogMode;			\/\/ the fog color is still in the$/;"	m	class:EGL::Context
m_FogStart	src/Context.h	/^		EGL_Fixed			m_FogStart, m_FogDensity, m_FogEnd;	\/\/ rasterizer state$/;"	m	class:EGL::Context
m_FreeListHead	src/Arrays.h	/^		size_t				m_FreeListHead;$/;"	m	struct:EGL::ObjectArray
m_FreeObjects	src/Arrays.h	/^		size_t				m_FreeObjects;$/;"	m	struct:EGL::ObjectArray
m_FrontColor	src/Rasterizer.h	/^		FractionalColor		m_FrontColor;		\/\/ color in range 0..255$/;"	m	struct:EGL::RasterPos
m_FrontMaterial	src/Context.h	/^		Material			m_FrontMaterial;$/;"	m	class:EGL::Context
m_FullInverseModelViewMatrix	src/Context.h	/^		Matrix4x4			m_FullInverseModelViewMatrix;$/;"	m	class:EGL::Context
m_FunctionCache	src/Rasterizer.h	/^		FunctionCache *			m_FunctionCache;$/;"	m	class:EGL::Rasterizer
m_Functions	src/arm/FunctionCache.h	/^		FunctionInfo *		m_Functions;$/;"	m	class:EGL::FunctionCache
m_GenerateMipmapHint	src/Context.h	/^		GLenum				m_GenerateMipmapHint;$/;"	m	class:EGL::Context
m_GenerateMipmaps	src/Context.h	/^		bool				m_GenerateMipmaps;$/;"	m	class:EGL::Context
m_GeometryFunction	src/Context.h	/^		GeometryFunction	m_GeometryFunction;$/;"	m	class:EGL::Context
m_GreenSize	src/Config.h	/^		EGLint	m_GreenSize;$/;"	m	class:EGL::Config
m_HDC	src/WinCE/Surface.h	/^		HDC		m_HDC;				\/\/ windows device context handle$/;"	m	class:EGL::Surface
m_HDC	src/linux-x11/Surface.h	/^		NativeDisplayType m_HDC;				\/\/ windows device context handle$/;"	m	class:EGL::Surface
m_HDC	src/win/Surface.h	/^		HDC		m_HDC;				\/\/ windows device context handle$/;"	m	class:EGL::Surface
m_Height	src/Config.h	/^		EGLint	m_Height;$/;"	m	class:EGL::Config
m_Image	src/linux-x11/Surface.h	/^    XImage *m_Image;$/;"	m	class:EGL::Surface
m_InternalFormat	src/Texture.h	/^		RasterizerState::TextureFormat	m_InternalFormat;$/;"	m	class:EGL::Texture
m_InverseModelViewMatrix	src/Context.h	/^		Matrix4x4			m_InverseModelViewMatrix;$/;"	m	class:EGL::Context
m_InvertSampleCoverage	src/RasterizerState.h	/^		bool					m_InvertSampleCoverage;$/;"	m	class:EGL::RasterizerState
m_LastError	src/Context.h	/^		GLenum				m_LastError;$/;"	m	class:EGL::Context
m_LastError	src/OGLES.h	/^		I32 m_LastError;$/;"	m	struct:EGL::TlsInfo
m_LeastRecentlyUsed	src/arm/FunctionCache.h	/^		FunctionInfo *		m_LeastRecentlyUsed;$/;"	m	class:EGL::FunctionCache
m_Level	src/Config.h	/^		EGLint	m_Level;$/;"	m	class:EGL::Config
m_Levels	src/Texture.h	/^		U32								m_Levels;$/;"	m	class:EGL::MultiTexture
m_LightEnabled	src/Context.h	/^		GLint				m_LightEnabled;$/;"	m	class:EGL::Context
m_LightModelAmbient	src/Context.h	/^		FractionalColor		m_LightModelAmbient;$/;"	m	class:EGL::Context
m_LightingEnabled	src/Context.h	/^		bool				m_LightingEnabled;		\/\/ is lightning enabled?$/;"	m	class:EGL::Context
m_Lights	src/Context.h	/^		Light				m_Lights[EGL_NUMBER_LIGHTS];$/;"	m	class:EGL::Context
m_Line	src/RasterizerState.h	/^								m_Line;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::LineState
m_LineFunction	src/Rasterizer.h	/^		LineFunction *			m_LineFunction;		\/\/ raster lines function$/;"	m	class:EGL::Rasterizer
m_LineSmoothHint	src/Context.h	/^		GLenum				m_LineSmoothHint;$/;"	m	class:EGL::Context
m_LinearAttenuation	src/Light.h	/^		EGL_Fixed				m_LinearAttenuation;$/;"	m	class:EGL::Light
m_LogHeight	src/Texture.h	/^		U32								m_LogHeight;$/;"	m	class:EGL::Texture
m_LogWidth	src/Texture.h	/^		U32								m_LogWidth;$/;"	m	class:EGL::Texture
m_LogicOp	src/RasterizerState.h	/^								m_LogicOp;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::LogicOpState
m_MagFilterMode	src/Texture.h	/^		RasterizerState::FilterMode		m_MagFilterMode;$/;"	m	class:EGL::MultiTexture
m_Mask	src/RasterizerState.h	/^								m_Mask;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::MaskState
m_MatrixIndexArray	src/Context.h	/^		VertexArray			m_MatrixIndexArray;$/;"	m	class:EGL::Context
m_MatrixIndexArrayEnabled	src/Context.h	/^		bool				m_MatrixIndexArrayEnabled;$/;"	m	class:EGL::Context
m_MatrixMode	src/Context.h	/^		GLenum				m_MatrixMode;$/;"	m	class:EGL::Context
m_MatrixModePaletteEnabled	src/Context.h	/^		bool				m_MatrixModePaletteEnabled;$/;"	m	class:EGL::Context
m_MatrixPalette	src/Context.h	/^		Matrix4x4			m_MatrixPalette[MATRIX_PALETTE_SIZE];$/;"	m	class:EGL::Context
m_MatrixPaletteEnabled	src/Context.h	/^		bool				m_MatrixPaletteEnabled;$/;"	m	class:EGL::Context
m_MatrixPaletteInverse	src/Context.h	/^		Matrix4x4			m_MatrixPaletteInverse[MATRIX_PALETTE_SIZE];$/;"	m	class:EGL::Context
m_MaxFunctions	src/arm/FunctionCache.h	/^		size_t				m_MaxFunctions;$/;"	m	class:EGL::FunctionCache
m_MaxPBufferHeight	src/Config.h	/^		EGLint	m_MaxPBufferHeight;$/;"	m	class:EGL::Config
m_MaxPBufferPixels	src/Config.h	/^		EGLint	m_MaxPBufferPixels;$/;"	m	class:EGL::Config
m_MaxPBufferWidth	src/Config.h	/^		EGLint	m_MaxPBufferWidth;$/;"	m	class:EGL::Config
m_MaxX	src/Rasterizer.h	/^		EGL_Fixed				m_MaxX;$/;"	m	class:EGL::Rasterizer
m_MaxY	src/Rasterizer.h	/^		EGL_Fixed				m_MaxY;$/;"	m	class:EGL::Rasterizer
m_MinFilterMode	src/Texture.h	/^		RasterizerState::FilterMode		m_MinFilterMode;$/;"	m	class:EGL::MultiTexture
m_MinX	src/Rasterizer.h	/^		EGL_Fixed				m_MinX;$/;"	m	class:EGL::Rasterizer
m_MinY	src/Rasterizer.h	/^		EGL_Fixed				m_MinY;$/;"	m	class:EGL::Rasterizer
m_MipmapFilterMode	src/Texture.h	/^		RasterizerState::FilterMode		m_MipmapFilterMode;$/;"	m	class:EGL::MultiTexture
m_ModelViewMatrixStack	src/Context.h	/^		MatrixStack			m_ModelViewMatrixStack;$/;"	m	class:EGL::Context
m_Module	src/arm/CodeGenerator.h	/^		struct cg_module_t *m_Module;$/;"	m	class:EGL::CodeGenerator	typeref:struct:EGL::CodeGenerator::cg_module_t
m_MostRecentlyUsed	src/arm/FunctionCache.h	/^		FunctionInfo *		m_MostRecentlyUsed;$/;"	m	class:EGL::FunctionCache
m_MultiSampleEnabled	src/Context.h	/^		bool				m_MultiSampleEnabled;$/;"	m	class:EGL::Context
m_NativeDisplay	src/Display.h	/^		NativeDisplayType		m_NativeDisplay;$/;"	m	class:EGL::Display
m_NativeRenderable	src/Config.h	/^		EGLint	m_NativeRenderable;$/;"	m	class:EGL::Config
m_NativeVisualID	src/Config.h	/^		EGLint	m_NativeVisualID;$/;"	m	class:EGL::Config
m_NativeVisualType	src/Config.h	/^		EGLint	m_NativeVisualType;$/;"	m	class:EGL::Config
m_Next	src/arm/FunctionCache.cpp	/^		FunctionInfo	* m_Next;		\/\/ next item in LRU chain$/;"	m	struct:EGL::FunctionInfo	file:
m_NormalArray	src/Context.h	/^		VertexArray			m_NormalArray;$/;"	m	class:EGL::Context
m_NormalArrayEnabled	src/Context.h	/^		bool				m_NormalArrayEnabled;$/;"	m	class:EGL::Context
m_NormalizeEnabled	src/Context.h	/^		bool				m_NormalizeEnabled;$/;"	m	class:EGL::Context
m_NormalizedSpotDirection	src/Light.h	/^		Vec3D					m_NormalizedSpotDirection;$/;"	m	class:EGL::Light
m_Objects	src/Arrays.h	/^		ObjectRecord *		m_Objects;$/;"	m	struct:EGL::ObjectArray
m_Offset	src/arm/FunctionCache.cpp	/^		size_t			m_Offset;		\/\/ offset of function in code segment$/;"	m	struct:EGL::FunctionInfo	file:
m_PaletteMatrixIndex	src/Context.h	/^		U8					m_PaletteMatrixIndex[MATRIX_PALETTE_SIZE];$/;"	m	class:EGL::Context
m_PercentageKeep	src/arm/FunctionCache.h	/^		float				m_PercentageKeep;$/;"	m	class:EGL::FunctionCache
m_PerspectiveCorrectionHint	src/Context.h	/^		GLenum				m_PerspectiveCorrectionHint;$/;"	m	class:EGL::Context
m_PixelStorePackAlignment	src/Context.h	/^		I32					m_PixelStorePackAlignment;$/;"	m	class:EGL::Context
m_PixelStoreUnpackAlignment	src/Context.h	/^		I32					m_PixelStoreUnpackAlignment;$/;"	m	class:EGL::Context
m_Point	src/RasterizerState.h	/^								m_Point;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::PointState
m_PointDistanceAttenuation	src/Context.h	/^		EGL_Fixed			m_PointDistanceAttenuation[3];$/;"	m	class:EGL::Context
m_PointFadeThresholdSize	src/Context.h	/^		EGL_Fixed			m_PointFadeThresholdSize;$/;"	m	class:EGL::Context
m_PointFunction	src/Rasterizer.h	/^		PointFunction *			m_PointFunction;$/;"	m	class:EGL::Rasterizer
m_PointSize	src/Context.h	/^		EGL_Fixed			m_PointSize;$/;"	m	class:EGL::Context
m_PointSizeArray	src/Context.h	/^		VertexArray			m_PointSizeArray;$/;"	m	class:EGL::Context
m_PointSizeArrayEnabled	src/Context.h	/^		bool				m_PointSizeArrayEnabled;$/;"	m	class:EGL::Context
m_PointSizeAttenuate	src/Context.h	/^		bool				m_PointSizeAttenuate;$/;"	m	class:EGL::Context
m_PointSizeMax	src/Context.h	/^		EGL_Fixed			m_PointSizeMin, m_PointSizeMax;$/;"	m	class:EGL::Context
m_PointSizeMin	src/Context.h	/^		EGL_Fixed			m_PointSizeMin, m_PointSizeMax;$/;"	m	class:EGL::Context
m_PointSmoothHint	src/Context.h	/^		GLenum				m_PointSmoothHint;$/;"	m	class:EGL::Context
m_Polygon	src/RasterizerState.h	/^								m_Polygon;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::PolygonState
m_PolygonOffsetFillEnabled	src/Context.h	/^		bool				m_PolygonOffsetFillEnabled;$/;"	m	class:EGL::Context
m_Position	src/Light.h	/^		Vec4D					m_Position;$/;"	m	class:EGL::Light
m_Prev	src/arm/FunctionCache.cpp	/^		FunctionInfo	* m_Prev;		\/\/ previous item in LRU chain$/;"	m	struct:EGL::FunctionInfo	file:
m_ProjectionMatrixStack	src/Context.h	/^		MatrixStack			m_ProjectionMatrixStack;$/;"	m	class:EGL::Context
m_QuadraticAttenuation	src/Light.h	/^		EGL_Fixed				m_QuadraticAttenuation;$/;"	m	class:EGL::Light
m_RasterInfo	src/Rasterizer.h	/^		RasterInfo				m_RasterInfo;$/;"	m	class:EGL::Rasterizer
m_RasterTriangleFunction	src/Rasterizer.h	/^		RasterTriangleFunction	m_RasterTriangleFunction;$/;"	m	class:EGL::Rasterizer
m_RasterTriangleFunctions	src/Rasterizer.h	/^		RasterTriangleFunction	m_RasterTriangleFunctions[1 << RasterTriangleCount];$/;"	m	class:EGL::Rasterizer
m_Rasterizer	src/Context.h	/^		Rasterizer *		m_Rasterizer;$/;"	m	class:EGL::Context
m_RasterizerState	src/Context.h	/^		RasterizerState		m_RasterizerState;$/;"	m	class:EGL::Context
m_ReadSurface	src/Context.h	/^		Surface *			m_ReadSurface;		\/\/ current surface for reading$/;"	m	class:EGL::Context
m_Rect	src/Epoc/Surface.h	/^		Rect			m_Rect;$/;"	m	class:EGL::Surface
m_Rect	src/WinCE/Surface.h	/^		Rect	m_Rect;$/;"	m	class:EGL::Surface
m_Rect	src/linux-ftk/Surface.h	/^		Rect	m_Rect;$/;"	m	class:EGL::Surface
m_Rect	src/linux-x11/Surface.h	/^		Rect	m_Rect;$/;"	m	class:EGL::Surface
m_Rect	src/win/Surface.h	/^		Rect	m_Rect;$/;"	m	class:EGL::Surface
m_RedSize	src/Config.h	/^		EGLint	m_RedSize;$/;"	m	class:EGL::Config
m_RescaleNormalEnabled	src/Context.h	/^		bool				m_RescaleNormalEnabled;$/;"	m	class:EGL::Context
m_ReverseFaceOrientation	src/Context.h	/^		bool				m_ReverseFaceOrientation;$/;"	m	class:EGL::Context
m_SampleAlphaToCoverageEnabled	src/Context.h	/^		bool				m_SampleAlphaToCoverageEnabled;$/;"	m	class:EGL::Context
m_SampleAlphaToOneEnabled	src/Context.h	/^		bool				m_SampleAlphaToOneEnabled;$/;"	m	class:EGL::Context
m_SampleBuffers	src/Config.h	/^		EGLint	m_SampleBuffers;$/;"	m	class:EGL::Config
m_SampleCoverage	src/RasterizerState.h	/^		EGL_Fixed				m_SampleCoverage;$/;"	m	class:EGL::RasterizerState
m_SampleCoverageEnabled	src/Context.h	/^		bool				m_SampleCoverageEnabled;$/;"	m	class:EGL::Context
m_Samples	src/Config.h	/^		EGLint	m_Samples;$/;"	m	class:EGL::Config
m_ScanlineFunction	src/Rasterizer.h	/^		ScanlineFunction *		m_ScanlineFunction;$/;"	m	class:EGL::Rasterizer
m_Scissor	src/Context.h	/^		Rect				m_Scissor;$/;"	m	class:EGL::Context
m_ScissorTest	src/RasterizerState.h	/^								m_ScissorTest;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::ScissorTestState
m_ScissorTestEnabled	src/Context.h	/^		bool				m_ScissorTestEnabled;$/;"	m	class:EGL::Context
m_ShadingModel	src/RasterizerState.h	/^		ShadingModel			m_ShadingModel;$/;"	m	class:EGL::RasterizerState
m_ShmInfo	src/linux-x11/Surface.h	/^    XShmSegmentInfo *m_ShmInfo;$/;"	m	class:EGL::Surface
m_Size	src/Buffer.h	/^		size_t		m_Size;$/;"	m	class:EGL::Buffer
m_Size	src/arm/FunctionCache.cpp	/^		size_t			m_Size;			\/\/ size of function in code segment$/;"	m	struct:EGL::FunctionInfo	file:
m_SpecularColor	src/Light.h	/^		FractionalColor			m_SpecularColor;$/;"	m	class:EGL::Light
m_SpecularColor	src/Material.h	/^		FractionalColor			m_SpecularColor;$/;"	m	class:EGL::Material
m_SpecularExponent	src/Material.h	/^		EGL_Fixed				m_SpecularExponent;$/;"	m	class:EGL::Material
m_SpotCutoff	src/Light.h	/^		EGL_Fixed				m_SpotCutoff;$/;"	m	class:EGL::Light
m_SpotDirection	src/Light.h	/^		Vec3D					m_SpotDirection;$/;"	m	class:EGL::Light
m_SpotExponent	src/Light.h	/^		EGL_Fixed				m_SpotExponent;$/;"	m	class:EGL::Light
m_Stack	src/MatrixStack.h	/^		Matrix4x4	*m_Stack;$/;"	m	class:EGL::MatrixStack
m_StackPointer	src/MatrixStack.h	/^		I32			m_StackPointer;$/;"	m	class:EGL::MatrixStack
m_StackSize	src/MatrixStack.h	/^		I32			m_StackSize;$/;"	m	class:EGL::MatrixStack
m_State	src/Rasterizer.h	/^		RasterizerState *		m_State;			\/\/ current rasterization settings$/;"	m	class:EGL::Rasterizer
m_State	src/arm/CodeGenerator.h	/^		const RasterizerState *	m_State;$/;"	m	class:EGL::CodeGenerator
m_State	src/arm/FunctionCache.cpp	/^		RasterizerState	m_State;		\/\/ the state that was compiled into this function$/;"	m	struct:EGL::FunctionInfo	file:
m_Stencil	src/RasterizerState.h	/^								m_Stencil;$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::StencilState
m_StencilBuffer	src/Epoc/Surface.h	/^		U32 *			m_StencilBuffer;	\/\/ stencil buffer$/;"	m	class:EGL::Surface
m_StencilBuffer	src/WinCE/Surface.h	/^		U32 *	m_StencilBuffer;	\/\/ stencil buffer$/;"	m	class:EGL::Surface
m_StencilBuffer	src/linux-ftk/Surface.h	/^		U32 *	m_StencilBuffer;	\/\/ stencil buffer$/;"	m	class:EGL::Surface
m_StencilBuffer	src/linux-x11/Surface.h	/^		U32 *	m_StencilBuffer;	\/\/ stencil buffer$/;"	m	class:EGL::Surface
m_StencilBuffer	src/win/Surface.h	/^		U32 *	m_StencilBuffer;	\/\/ stencil buffer$/;"	m	class:EGL::Surface
m_StencilClearValue	src/Context.h	/^		U32					m_StencilClearValue;$/;"	m	class:EGL::Context
m_StencilSize	src/Config.h	/^		EGLint	m_StencilSize;$/;"	m	class:EGL::Config
m_Surface	src/Rasterizer.h	/^		Surface *				m_Surface;			\/\/ rendering surface$/;"	m	class:EGL::Rasterizer
m_SurfaceType	src/Config.h	/^		EGLint	m_SurfaceType;$/;"	m	class:EGL::Config
m_SurfaceType	src/linux-ftk/Surface.h	/^	    int m_SurfaceType;$/;"	m	class:EGL::Surface
m_SurfaceType	src/linux-x11/Surface.h	/^    int m_SurfaceType;$/;"	m	class:EGL::Surface
m_Temporary	src/Context.h	/^		RasterPos			m_Temporary[16];	\/\/ temporary coordinates$/;"	m	class:EGL::Context
m_TexCoordArray	src/Context.h	/^		VertexArray			m_TexCoordArray[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::Context
m_TexCoordArrayEnabled	src/Context.h	/^		bool				m_TexCoordArrayEnabled[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::Context
m_Texture	src/Rasterizer.h	/^		MultiTexture *			m_Texture[EGL_NUM_TEXTURE_UNITS];	\/\/ current texture $/;"	m	class:EGL::Rasterizer
m_Texture	src/RasterizerState.h	/^								m_Texture[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::RasterizerState	typeref:struct:EGL::RasterizerState::TextureState
m_TextureCoords	src/Rasterizer.h	/^		TexCoord			m_TextureCoords[EGL_NUM_TEXTURE_UNITS];		\/\/ texture coords 0..1 over w$/;"	m	struct:EGL::EdgePos
m_TextureCoords	src/Rasterizer.h	/^		TexCoord			m_TextureCoords[EGL_NUM_TEXTURE_UNITS];	\/\/ texture coords 0..1$/;"	m	struct:EGL::RasterPos
m_TextureLevels	src/Texture.h	/^		Texture							m_TextureLevels[MAX_LEVELS + 1];$/;"	m	class:EGL::MultiTexture
m_TextureMatrixStack	src/Context.h	/^		MatrixStack			m_TextureMatrixStack[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::Context
m_Textures	src/Context.h	/^		TextureArray		m_Textures;$/;"	m	class:EGL::Context
m_Total	src/arm/FunctionCache.h	/^		size_t				m_Total;$/;"	m	class:EGL::FunctionCache
m_TransparentBlueValue	src/Config.h	/^		EGLint	m_TransparentBlueValue;$/;"	m	class:EGL::Config
m_TransparentGreenValue	src/Config.h	/^		EGLint	m_TransparentGreenValue;$/;"	m	class:EGL::Config
m_TransparentRedValue	src/Config.h	/^		EGLint	m_TransparentRedValue;$/;"	m	class:EGL::Config
m_TransparentType	src/Config.h	/^		EGLint	m_TransparentType;$/;"	m	class:EGL::Config
m_TwoSidedLightning	src/Context.h	/^		bool				m_TwoSidedLightning;	\/\/ do we have two-sided lightning$/;"	m	class:EGL::Context
m_Type	src/arm/FunctionCache.cpp	/^		FunctionCache::FunctionType m_Type;	\/\/ what kind of function is this?$/;"	m	struct:EGL::FunctionInfo	file:
m_Usage	src/Buffer.h	/^		BufferUsage m_Usage;$/;"	m	class:EGL::Buffer
m_UseMipmap	src/Rasterizer.h	/^		bool					m_UseMipmap[EGL_NUM_TEXTURE_UNITS];$/;"	m	class:EGL::Rasterizer
m_Used	src/arm/FunctionCache.h	/^		size_t				m_Used;$/;"	m	class:EGL::FunctionCache
m_UsedFunctions	src/arm/FunctionCache.h	/^		size_t				m_UsedFunctions;$/;"	m	class:EGL::FunctionCache
m_VertexArray	src/Context.h	/^		VertexArray			m_VertexArray;$/;"	m	class:EGL::Context
m_VertexArrayEnabled	src/Context.h	/^		bool				m_VertexArrayEnabled;$/;"	m	class:EGL::Context
m_Viewport	src/Context.h	/^		Rect				m_Viewport;$/;"	m	class:EGL::Context
m_ViewportFar	src/Context.h	/^		GLclampx			m_ViewportFar;$/;"	m	class:EGL::Context
m_ViewportInitialized	src/Context.h	/^		bool				m_ViewportInitialized;	\/\/ if true, the viewport has been$/;"	m	class:EGL::Context
m_ViewportNear	src/Context.h	/^		GLclampx			m_ViewportNear;$/;"	m	class:EGL::Context
m_ViewportOrigin	src/Context.h	/^		Vec3D				m_ViewportOrigin;$/;"	m	class:EGL::Context
m_ViewportScale	src/Context.h	/^		Vec3D				m_ViewportScale;$/;"	m	class:EGL::Context
m_WeightArray	src/Context.h	/^		VertexArray			m_WeightArray;$/;"	m	class:EGL::Context
m_WeightArrayEnabled	src/Context.h	/^		bool				m_WeightArrayEnabled;$/;"	m	class:EGL::Context
m_Width	src/Config.h	/^		EGLint  m_Width;$/;"	m	class:EGL::Config
m_Window	src/linux-ftk/Surface.h	/^    	NativeWindowType  m_Window;$/;"	m	class:EGL::Surface
m_WindowCoords	src/Rasterizer.h	/^		EdgeCoord			m_WindowCoords;								\/\/ z over w$/;"	m	struct:EGL::EdgePos
m_WindowCoords	src/Rasterizer.h	/^		ScreenCoord			m_WindowCoords;		$/;"	m	struct:EGL::RasterPos
m_WindowDepth	src/linux-ftk/Surface.h	/^    	int m_WindowDepth;$/;"	m	class:EGL::Surface
m_WindowDepth	src/linux-x11/Surface.h	/^    int m_WindowDepth;$/;"	m	class:EGL::Surface
m_WrappingModeS	src/Texture.h	/^		RasterizerState::WrappingMode	m_WrappingModeS;$/;"	m	class:EGL::MultiTexture
m_WrappingModeT	src/Texture.h	/^		RasterizerState::WrappingMode	m_WrappingModeT;$/;"	m	class:EGL::MultiTexture
m_elements	src/linalg.h	/^		EGL_Fixed m_elements[16];$/;"	m	class:EGL::Matrix4x4
m_identity	src/linalg.h	/^		bool m_identity;		\/\/ flag to mark identity matrix$/;"	m	class:EGL::Matrix4x4
m_w	src/linalg.h	/^		EGL_Fixed 	m_x, m_y, m_z, m_w;$/;"	m	class:EGL::Vec4D
m_x	src/linalg.h	/^		EGL_Fixed 	m_x, m_y, m_z, m_w;$/;"	m	class:EGL::Vec4D
m_x	src/linalg.h	/^		EGL_Fixed 	m_x, m_y, m_z;$/;"	m	class:EGL::Vec3D
m_y	src/linalg.h	/^		EGL_Fixed 	m_x, m_y, m_z, m_w;$/;"	m	class:EGL::Vec4D
m_y	src/linalg.h	/^		EGL_Fixed 	m_x, m_y, m_z;$/;"	m	class:EGL::Vec3D
m_z	src/linalg.h	/^		EGL_Fixed 	m_x, m_y, m_z, m_w;$/;"	m	class:EGL::Vec4D
m_z	src/linalg.h	/^		EGL_Fixed 	m_x, m_y, m_z;$/;"	m	class:EGL::Vec3D
main	demos/hello.c	/^int main(int argc, char** argv)$/;"	f
main	demos/l.c	/^int main(int argc, char* argv[])$/;"	f
main	demos/lines.cpp	/^int main(int argc, char** argv)$/;"	f
main	projects/linux-ftk/config.guess	/^		main()$/;"	f
main	projects/linux-ftk/config.guess	/^	main ()$/;"	f
main	projects/linux-ftk/config.guess	/^main ()$/;"	f
main	projects/linux-x11/config.guess	/^		main()$/;"	f
main	projects/linux-x11/config.guess	/^	main ()$/;"	f
main	projects/linux-x11/config.guess	/^main ()$/;"	f
main	redbook/aargb.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/alpha.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/alpha3D.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/checker.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/colormat.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/cube.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/double.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/fog.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/hello.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/light.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/lines.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/material.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/mipmap.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/model.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/movelight.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/planet.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/polyoff.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/robot.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/scene.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/smooth.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/stencil.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/stroke.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/texbind.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/texsub.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/torus.c	/^int main(int argc, char **argv)$/;"	f
main	redbook/varray.c	/^int main(int argc, char** argv)$/;"	f
main	redbook/wrap.c	/^int main(int argc, char** argv)$/;"	f
makeCheckImage	redbook/checker.c	/^void makeCheckImage(void)$/;"	f
makeCheckImage	redbook/wrap.c	/^void makeCheckImage(void)$/;"	f
makeCheckImages	redbook/texbind.c	/^void makeCheckImages(void)$/;"	f
makeCheckImages	redbook/texsub.c	/^void makeCheckImages(void)$/;"	f
makeImages	redbook/mipmap.c	/^void makeImages(void)$/;"	f
make_global	src/codegen/emit.c	/^static void make_global(cg_codegen_t * gen, cg_physical_reg_t * reg)$/;"	f	file:
mandir	projects/linux-ftk/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	projects/linux-x11/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mark_instruction_used	src/codegen/instruction.c	/^void mark_instruction_used(cg_inst_t * inst)$/;"	f
material_ref	test/epoc/paint.cpp	/^const int material_ref [1][2] = {$/;"	v
material_ref	test/paint.cpp	/^static int material_ref [1][2] = {$/;"	v	file:
materials	test/epoc/paint.cpp	/^const sample_MATERIAL materials [1] = {$/;"	v
materials	test/paint.cpp	/^static sample_MATERIAL materials [1] = {$/;"	v	file:
maxX	test/paint.cpp	/^float x = 0, minX = -100, maxX = 100;$/;"	v
maxY	test/paint.cpp	/^float y = 0, minY = -150, maxY = 150;$/;"	v
maxZ	test/paint.cpp	/^float z = 0, minZ = -200, maxZ = 200;$/;"	v
mem	src/codegen/instruction.h	/^	cg_mem_operand_t	mem;$/;"	m	struct:cg_inst_load_t
mem	src/codegen/instruction.h	/^	cg_mem_operand_t	mem;$/;"	m	struct:cg_inst_store_t
memory	src/codegen/segment.c	/^	U8 memory[BLOCK_SIZE];$/;"	m	struct:block_t	file:
minX	test/paint.cpp	/^float x = 0, minX = -100, maxX = 100;$/;"	v
minY	test/paint.cpp	/^float y = 0, minY = -150, maxY = 150;$/;"	v
minZ	test/paint.cpp	/^float z = 0, minZ = -200, maxZ = 200;$/;"	v
mipmapImage1	redbook/mipmap.c	/^GLubyte mipmapImage1[1][1][4];$/;"	v
mipmapImage16	redbook/mipmap.c	/^GLubyte mipmapImage16[16][16][4];$/;"	v
mipmapImage2	redbook/mipmap.c	/^GLubyte mipmapImage2[2][2][4];$/;"	v
mipmapImage32	redbook/mipmap.c	/^GLubyte mipmapImage32[32][32][4];$/;"	v
mipmapImage4	redbook/mipmap.c	/^GLubyte mipmapImage4[4][4][4];$/;"	v
mipmapImage8	redbook/mipmap.c	/^GLubyte mipmapImage8[8][8][4];$/;"	v
mkinstalldirs	projects/linux-ftk/Makefile	/^mkinstalldirs = $(SHELL) $(top_srcdir)\/mkinstalldirs$/;"	m
mkinstalldirs	projects/linux-x11/Makefile	/^mkinstalldirs = $(SHELL) $(top_srcdir)\/mkinstalldirs$/;"	m
module	src/codegen/instruction.h	/^	cg_module_t *		module;				\/* uplink to module				*\/$/;"	m	struct:cg_proc_t
motion	ug/ug_ftk.c	/^    void (*motion)(UGWindow w, int x, int y);$/;"	m	struct:ugwindow	file:
motion	ug/ug_win32.c	/^    void (*motion)(UGWindow w, int x, int y);$/;"	m	struct:ugwindow	file:
mouse	redbook/colormat.c	/^void mouse(UGWindow uwin, int button, int state, int x, int y)$/;"	f
mouse	redbook/double.c	/^void mouse(UGWindow uwin, int button, int state, int x, int y) $/;"	f
mouse	redbook/movelight.c	/^void mouse(UGWindow uwin, int button, int state, int x, int y)$/;"	f
mouse	redbook/polyoff.c	/^void mouse(UGWindow uwin, int button, int state, int x, int y) {$/;"	f
mouse	redbook/varray.c	/^void mouse (UGWindow uwin, int button, int state, int x, int y)$/;"	f
mrs	src/codegen/arm-codegen.h	/^	ARMInstrMRS   mrs;$/;"	m	union:__anon96
mrt	src/codegen/arm-codegen.h	/^	ARMInstrMRT   mrt;$/;"	m	union:__anon96
msr	src/codegen/arm-codegen.h	/^	ARMInstrMSR   msr;$/;"	m	union:__anon96
msr_fld	src/codegen/arm-dis.c	/^const static char* msr_fld[] = {"f", "c", "x", "?", "s"};$/;"	v	file:
mul	src/Color.h	/^		static inline U8 mul(U8 color, U8 factor) {$/;"	f	class:EGL::Color
mul	src/codegen/arm-codegen.h	/^	ARMInstrMul   mul;$/;"	m	union:__anon96
mul_ops	src/codegen/arm-dis.c	/^const static char* mul_ops[] = {$/;"	v	file:
n	src/codegen/arm-codegen.h	/^	arminstr_t n    : 1;$/;"	m	struct:__anon90
name	src/Epoc/egl.cpp	/^		const char * name;$/;"	m	struct:__anon15	file:
name	src/WinCE/egl.cpp	/^	const char * name;$/;"	m	struct:__anon56	file:
name	src/codegen/segment.c	/^	const char *	name;					\/* name of the segment			*\/$/;"	m	struct:cg_segment_t	file:
name	src/linux-ftk/egl.cpp	/^    const char * name;$/;"	m	struct:__anon4	file:
name	src/linux-x11/egl.cpp	/^    const char * name;$/;"	m	struct:__anon19	file:
name	src/win/egl.cpp	/^	const char * name;$/;"	m	struct:__anon49	file:
name	test/epoc/paint.cpp	/^ char * name;$/;"	m	struct:sample_TEXTURE	file:
name	test/paint.cpp	/^ char * name;$/;"	m	struct:sample_TEXTURE	file:
native_window	src/linux-x11/egl.cpp	/^NativeWindowType native_window;$/;"	v
next	src/codegen/emit.c	/^	cg_label_t *			next;$/;"	m	struct:cg_label_t	file:
next	src/codegen/emit.c	/^	struct cg_physical_reg_t * next;				\/* for LRU chain			*\/$/;"	m	struct:cg_physical_reg_t	typeref:struct:cg_physical_reg_t::cg_physical_reg_t	file:
next	src/codegen/emit.c	/^	struct literal_t *	next;$/;"	m	struct:literal_t	typeref:struct:literal_t::literal_t	file:
next	src/codegen/emit.c	/^	struct reference_t *	next;$/;"	m	struct:reference_t	typeref:struct:reference_t::reference_t	file:
next	src/codegen/heap.c	/^	struct block_t * next;$/;"	m	struct:block_t	typeref:struct:block_t::block_t	file:
next	src/codegen/instruction.h	/^	cg_inst_t *			next;$/;"	m	struct:cg_inst_base_t
next	src/codegen/instruction.h	/^	cg_proc_t *			next;$/;"	m	struct:cg_proc_t
next	src/codegen/instruction.h	/^	cg_virtual_reg_t *			next;$/;"	m	struct:cg_virtual_reg_t
next	src/codegen/instruction.h	/^	struct cg_block_list_t *	next;$/;"	m	struct:cg_block_list_t	typeref:struct:cg_block_list_t::cg_block_list_t
next	src/codegen/instruction.h	/^	struct cg_block_t *		next;$/;"	m	struct:cg_block_t	typeref:struct:cg_block_t::cg_block_t
next	src/codegen/instruction.h	/^	struct cg_inst_list_t *		next;$/;"	m	struct:cg_inst_list_t	typeref:struct:cg_inst_list_t::cg_inst_list_t
next	src/codegen/instruction.h	/^	struct cg_virtual_reg_list_t *  next;$/;"	m	struct:cg_virtual_reg_list_t	typeref:struct:cg_virtual_reg_list_t::cg_virtual_reg_list_t
next	ug/ug_ftk.c	/^    struct ugwindow* next, * prev;$/;"	m	struct:ugwindow	typeref:struct:ugwindow::ugwindow	file:
next	ug/ug_win32.c	/^    struct ugwindow* next, * prev;$/;"	m	struct:ugwindow	typeref:struct:ugwindow::ugwindow	file:
next_use	src/codegen/emit.c	/^	cg_inst_t *				next_use;			\/* next use of ass. value   *\/$/;"	m	struct:cg_physical_reg_t	file:
nibble	src/ContextTexture.cpp	/^		bool nibble;$/;"	m	struct:__anon38::ConstU4Ptr	file:
noinst_PROGRAMS	projects/linux-ftk/Makefile	/^noinst_PROGRAMS = lines$(EXEEXT)$/;"	m
noinst_PROGRAMS	projects/linux-ftk/Makefile	/^noinst_PROGRAMS = lines$/;"	m
normalizef	ug/uglu.c	/^normalizef(float v[3]) {$/;"	f	file:
normalizex	ug/uglu.c	/^normalizex(GLfixed v[3]) {$/;"	f	file:
normals	test/epoc/paint.cpp	/^const GLfloat normals [516][3] = {$/;"	v
normals	test/paint.cpp	/^static GLfloat normals [516][3] = {$/;"	v	file:
num	src/codegen/arm-codegen.h	/^	arminstr_t num  : 24;$/;"	m	struct:__anon88
num_args	src/codegen/instruction.h	/^	size_t				num_args;			\/* number of arguments			*\/$/;"	m	struct:cg_proc_t
num_registers	src/codegen/instruction.h	/^	size_t				num_registers;		\/* number of virtual registers  *\/$/;"	m	struct:cg_proc_t
offs	src/codegen/arm-codegen.h	/^	arminstr_t offs : 8;$/;"	m	struct:__anon90
offset	src/codegen/arm-codegen.h	/^	arminstr_t offset : 24;$/;"	m	struct:__anon73
offset	src/codegen/arm-dis.h	/^	size_t offset;$/;"	m	struct:_ARMDis
offset	src/codegen/emit.c	/^	size_t					offset;$/;"	m	struct:cg_label_t	file:
offset	src/codegen/emit.c	/^	size_t					offset;$/;"	m	struct:reference_t	file:
offset	src/codegen/emit.c	/^	size_t				offset;$/;"	m	struct:literal_t	file:
offset	src/codegen/instruction.h	/^		I32					offset;$/;"	m	struct:__anon60::__anon62
offset	src/codegen/instruction.h	/^		cg_virtual_reg_t *  offset;$/;"	m	struct:__anon60::__anon61
offsetof	src/OGLES.h	177;"	d
oldincludedir	projects/linux-ftk/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	projects/linux-x11/Makefile	/^oldincludedir = \/usr\/include$/;"	m
on_idle	ug/ug_ftk.c	/^static Ret  on_idle(void* user_data)$/;"	f	file:
op	src/codegen/arm-codegen.h	/^	arminstr_t op   : 4;$/;"	m	struct:__anon89
op	src/codegen/instruction.h	/^		cg_shift_op_t		op;$/;"	m	struct:__anon57::__anon58
op	src/codegen/instruction.h	/^		cg_shift_op_t		op;$/;"	m	struct:__anon57::__anon59
op1	src/codegen/arm-codegen.h	/^	arminstr_t op1  : 3;$/;"	m	struct:__anon91
op2	src/codegen/arm-codegen.h	/^		arminstr_t op2    : 12; \/* raw operand 2 *\/$/;"	m	struct:__anon80::__anon81
op2	src/codegen/arm-codegen.h	/^	arminstr_t op2  : 3;$/;"	m	struct:__anon89
op2	src/codegen/arm-codegen.h	/^	arminstr_t op2  : 3;$/;"	m	struct:__anon91
op2_imm	src/codegen/arm-codegen.h	/^		arminstr_t op2_imm : 12;$/;"	m	struct:__anon84::__anon85
op2_imm	src/codegen/arm-codegen.h	/^	ARMDPI_op2_imm op2_imm;$/;"	m	union:__anon80
op2_imm	src/codegen/arm-codegen.h	/^	ARMDPI_op2_imm op2_imm;$/;"	m	union:__anon92
op2_reg	src/codegen/arm-codegen.h	/^	ARMDPI_op2_reg_shift op2_reg;$/;"	m	union:__anon80
op2_reg_imm	src/codegen/arm-codegen.h	/^	ARMDPI_op2_reg_imm op2_reg_imm;$/;"	m	union:__anon80
op2_reg_imm	src/codegen/arm-codegen.h	/^	ARMDPI_op2_reg_imm op2_reg_imm;$/;"	m	union:__anon84
op2_reg_reg	src/codegen/arm-codegen.h	/^	ARMDPI_op2_reg_reg op2_reg_reg;$/;"	m	union:__anon80
opcode	src/codegen/arm-codegen.h	/^		arminstr_t opcode :  4; \/* arithmetic\/logic operation *\/$/;"	m	struct:__anon80::__anon81
opcode	src/codegen/arm-codegen.h	/^	arminstr_t opcode : 3;$/;"	m	struct:__anon83
opcode	src/codegen/instruction.h	/^	cg_opcode_t			opcode;$/;"	m	struct:cg_inst_base_t
opcodes	src/codegen/instruction.c	/^static const char * const opcodes[] = $/;"	v	file:
operand	src/codegen/instruction.h	/^	cg_data_operand_t   operand;	$/;"	m	struct:cg_inst_binary_t
operand	src/codegen/instruction.h	/^	cg_data_operand_t   operand;	$/;"	m	struct:cg_inst_compare_t
operand	src/codegen/instruction.h	/^	cg_data_operand_t   operand;$/;"	m	struct:cg_inst_unary_t
operator ()	src/ContextTexture.cpp	/^		Color operator()(const U8 * &ptr) {$/;"	f	struct:__anon24::RGB2Color
operator ()	src/ContextTexture.cpp	/^		Color operator()(const U8 * &ptr) {$/;"	f	struct:__anon24::RGB5652Color
operator ()	src/ContextTexture.cpp	/^		Color operator()(const U8 * &ptr) {$/;"	f	struct:__anon24::RGBA2Color
operator ()	src/ContextTexture.cpp	/^		Color operator()(const U8 * &ptr) {$/;"	f	struct:__anon24::RGBA44442Color
operator ()	src/ContextTexture.cpp	/^		Color operator()(const U8 * &ptr) {$/;"	f	struct:__anon24::RGBA55512Color
operator ()	src/ContextTexture.cpp	/^		void operator()(U8 * &ptr, const Color& value) {$/;"	f	struct:__anon24::Color2Alpha
operator ()	src/ContextTexture.cpp	/^		void operator()(U8 * &ptr, const Color& value) {$/;"	f	struct:__anon24::Color2Luminance
operator ()	src/ContextTexture.cpp	/^		void operator()(U8 * &ptr, const Color& value) {$/;"	f	struct:__anon24::Color2LuminanceAlpha
operator ()	src/ContextTexture.cpp	/^		void operator()(U8 * &ptr, const Color& value) {$/;"	f	struct:__anon24::Color2RGB
operator ()	src/ContextTexture.cpp	/^		void operator()(U8 * &ptr, const Color& value) {$/;"	f	struct:__anon24::Color2RGB565
operator ()	src/ContextTexture.cpp	/^		void operator()(U8 * &ptr, const Color& value) {$/;"	f	struct:__anon24::Color2RGBA
operator ()	src/ContextTexture.cpp	/^		void operator()(U8 * &ptr, const Color& value) {$/;"	f	struct:__anon24::Color2RGBA4444
operator ()	src/ContextTexture.cpp	/^		void operator()(U8 * &ptr, const Color& value) {$/;"	f	struct:__anon24::Color2RGBA5551
operator *	src/Color.h	/^		Color operator*(const Color& factor) const {$/;"	f	class:EGL::Color
operator *	src/ContextTexture.cpp	/^		U8 operator*() const {$/;"	f	struct:__anon38::ConstU4Ptr
operator *	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X TInt64X::operator*(TInt aVal) const$/;"	f	class:TInt64X
operator *	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X TInt64X::operator*(const TInt64X& aVal) const$/;"	f	class:TInt64X
operator *	src/FractionalColor.h	/^		inline FractionalColor operator*(EGL_Fixed scale) const {$/;"	f	class:EGL::FractionalColor
operator *	src/FractionalColor.h	/^		inline FractionalColor operator*(const FractionalColor& other) const {$/;"	f	class:EGL::FractionalColor
operator *	src/linalg.h	/^		inline EGL_Fixed operator*(const Vec3D& other) const {$/;"	f	class:EGL::Vec3D
operator *	src/linalg.h	/^		inline EGL_Fixed operator*(const Vec4D& other) const {$/;"	f	class:EGL::Vec4D
operator *	src/linalg.h	/^		inline Matrix4x4 operator*(const Matrix4x4& other) const {$/;"	f	class:EGL::Matrix4x4
operator *	src/linalg.h	/^		inline Vec3D operator*(EGL_Fixed factor) const {$/;"	f	class:EGL::Vec3D
operator *	src/linalg.h	/^		inline Vec4D operator*(EGL_Fixed factor) const {$/;"	f	class:EGL::Vec4D
operator *	src/linalg.h	/^		inline Vec4D operator*(const Vec3D& vector) const {$/;"	f	class:EGL::Matrix4x4
operator *	src/linalg.h	/^		inline Vec4D operator*(const Vec4D& vector) const {$/;"	f	class:EGL::Matrix4x4
operator *	src/linalg.h	/^	inline OGLES_API Vec3D operator*(EGL_Fixed factor, const Vec3D& vector) {$/;"	f	namespace:EGL
operator *	src/linalg.h	/^	inline OGLES_API Vec4D operator*(EGL_Fixed factor, const Vec4D& vector) {$/;"	f	namespace:EGL
operator *=	src/FractionalColor.h	/^		inline FractionalColor& operator*=(EGL_Fixed scale) {$/;"	f	class:EGL::FractionalColor
operator *=	src/FractionalColor.h	/^		inline FractionalColor& operator*=(const FractionalColor& other) {$/;"	f	class:EGL::FractionalColor
operator *=	src/linalg.h	/^		inline Vec3D& operator *=(EGL_Fixed factor) {$/;"	f	class:EGL::Vec3D
operator *=	src/linalg.h	/^		inline Vec4D& operator *=(EGL_Fixed factor) {$/;"	f	class:EGL::Vec4D
operator +	src/Color.h	/^		Color operator+(const Color& other) const {$/;"	f	class:EGL::Color
operator +	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X TInt64X::operator+(const TInt64X& aVal) const$/;"	f	class:TInt64X
operator +	src/FractionalColor.h	/^		inline FractionalColor operator+(const FractionalColor& other) const {$/;"	f	class:EGL::FractionalColor
operator +	src/linalg.h	/^		inline Vec3D operator+(const Vec3D& other) const {$/;"	f	class:EGL::Vec3D
operator +	src/linalg.h	/^		inline Vec4D operator+(const Vec4D& other) const {$/;"	f	class:EGL::Vec4D
operator ++	src/ContextTexture.cpp	/^		const ConstU4Ptr& operator++() {$/;"	f	struct:__anon38::ConstU4Ptr
operator +=	src/FractionalColor.h	/^		inline FractionalColor& operator+=(const FractionalColor& color) {$/;"	f	class:EGL::FractionalColor
operator +=	src/linalg.h	/^		inline Vec3D& operator +=(const Vec3D& other) {$/;"	f	class:EGL::Vec3D
operator +=	src/linalg.h	/^		inline Vec4D& operator +=(const Vec4D& other) {$/;"	f	class:EGL::Vec4D
operator -	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X TInt64X::operator-(const TInt64X& aVal) const$/;"	f	class:TInt64X
operator -	src/FractionalColor.h	/^		inline FractionalColor operator-(const FractionalColor& other) const {$/;"	f	class:EGL::FractionalColor
operator -	src/linalg.h	/^		inline Vec3D operator-(const Vec3D& other) const {$/;"	f	class:EGL::Vec3D
operator -	src/linalg.h	/^		inline Vec4D operator-() const {$/;"	f	class:EGL::Vec4D
operator -	src/linalg.h	/^		inline Vec4D operator-(const Vec4D& other) const {$/;"	f	class:EGL::Vec4D
operator -=	src/linalg.h	/^		inline Vec3D& operator -=(const Vec3D& other) {$/;"	f	class:EGL::Vec3D
operator -=	src/linalg.h	/^		inline Vec4D& operator -=(const Vec4D& other) {$/;"	f	class:EGL::Vec4D
operator /	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X TInt64X::operator\/(TInt aVal) const$/;"	f	class:TInt64X
operator /	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X TInt64X::operator\/(const TInt64X& aVal) const$/;"	f	class:TInt64X
operator <	src/Epoc/int64x.cpp	/^EXPORT_C TInt TInt64X::operator<(TInt aVal) const$/;"	f	class:TInt64X
operator <<	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X TInt64X::operator<<(TInt aShift) const$/;"	f	class:TInt64X
operator =	src/Color.h	/^		Color& operator=(const Color& other) {$/;"	f	class:EGL::Color
operator =	src/Config.cpp	/^Config & Config :: operator=(const Config & other) {$/;"	f	class:Config
operator =	src/Epoc/ConfigEpoc.cpp	/^Config & Config :: operator=(const Config & other) {$/;"	f	class:Config
operator =	src/FractionalColor.h	/^		FractionalColor& operator=(const FractionalColor& other) {$/;"	f	class:EGL::FractionalColor
operator =	src/RasterizerState.h	/^			AlphaState& operator=(const AlphaState& other) {$/;"	f	struct:EGL::RasterizerState::AlphaState
operator =	src/RasterizerState.h	/^			BlendState& operator=(const BlendState& other) {$/;"	f	struct:EGL::RasterizerState::BlendState
operator =	src/RasterizerState.h	/^			DepthTestState& operator=(const DepthTestState& other) {$/;"	f	struct:EGL::RasterizerState::DepthTestState
operator =	src/RasterizerState.h	/^			FogState& operator=(const FogState& other) {$/;"	f	struct:EGL::RasterizerState::FogState
operator =	src/RasterizerState.h	/^			LineState& operator=(const LineState& other) {$/;"	f	struct:EGL::RasterizerState::LineState
operator =	src/RasterizerState.h	/^			LogicOpState& operator=(const LogicOpState& other) {$/;"	f	struct:EGL::RasterizerState::LogicOpState
operator =	src/RasterizerState.h	/^			MaskState& operator=(const MaskState& other) {$/;"	f	struct:EGL::RasterizerState::MaskState
operator =	src/RasterizerState.h	/^			PointState& operator=(const PointState& other) {$/;"	f	struct:EGL::RasterizerState::PointState
operator =	src/RasterizerState.h	/^			PolygonState& operator=(const PolygonState& other) {$/;"	f	struct:EGL::RasterizerState::PolygonState
operator =	src/RasterizerState.h	/^			ScissorTestState& operator=(const ScissorTestState& other) {$/;"	f	struct:EGL::RasterizerState::ScissorTestState
operator =	src/RasterizerState.h	/^			StencilState& operator=(const StencilState& other) {$/;"	f	struct:EGL::RasterizerState::StencilState
operator =	src/RasterizerState.h	/^			TextureState& operator=(const TextureState& other) {$/;"	f	struct:EGL::RasterizerState::TextureState
operator =	src/linalg.h	/^		inline Matrix4x4& operator=(const Matrix4x4& other) {$/;"	f	class:EGL::Matrix4x4
operator =	src/linalg.h	/^		inline Vec3D& operator=(const Vec3D& other) {$/;"	f	class:EGL::Vec3D
operator =	src/linalg.h	/^		inline Vec4D& operator=(const Vec4D& other) {$/;"	f	class:EGL::Vec4D
operator ==	src/Color.h	/^		bool operator==(const Color& other) const {$/;"	f	class:EGL::Color
operator ==	src/RasterizerState.h	/^			bool operator==(const AlphaState& other) const {$/;"	f	struct:EGL::RasterizerState::AlphaState
operator ==	src/RasterizerState.h	/^			bool operator==(const BlendState& other) const {$/;"	f	struct:EGL::RasterizerState::BlendState
operator ==	src/RasterizerState.h	/^			bool operator==(const DepthTestState& other) const {$/;"	f	struct:EGL::RasterizerState::DepthTestState
operator ==	src/RasterizerState.h	/^			bool operator==(const FogState& other) const {$/;"	f	struct:EGL::RasterizerState::FogState
operator ==	src/RasterizerState.h	/^			bool operator==(const LineState& other) const {$/;"	f	struct:EGL::RasterizerState::LineState
operator ==	src/RasterizerState.h	/^			bool operator==(const LogicOpState& other) const {$/;"	f	struct:EGL::RasterizerState::LogicOpState
operator ==	src/RasterizerState.h	/^			bool operator==(const MaskState& other) const {$/;"	f	struct:EGL::RasterizerState::MaskState
operator ==	src/RasterizerState.h	/^			bool operator==(const PointState& other) const {$/;"	f	struct:EGL::RasterizerState::PointState
operator ==	src/RasterizerState.h	/^			bool operator==(const PolygonState& other) const {$/;"	f	struct:EGL::RasterizerState::PolygonState
operator ==	src/RasterizerState.h	/^			bool operator==(const ScissorTestState& other) const {$/;"	f	struct:EGL::RasterizerState::ScissorTestState
operator ==	src/RasterizerState.h	/^			bool operator==(const StencilState& other) const {$/;"	f	struct:EGL::RasterizerState::StencilState
operator ==	src/RasterizerState.h	/^			bool operator==(const TextureState& other) const {$/;"	f	struct:EGL::RasterizerState::TextureState
operator >	src/Epoc/int64x.cpp	/^EXPORT_C TInt TInt64X::operator>(TInt aVal) const$/;"	f	class:TInt64X
operator >>	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X TInt64X::operator>>(TInt aShift) const$/;"	f	class:TInt64X
operator Color	src/FractionalColor.h	/^		inline operator Color() const {$/;"	f	class:EGL::FractionalColor
operator TInt	src/Epoc/int64x.cpp	/^EXPORT_C TInt64X::operator TInt() const$/;"	f	class:TInt64X
operator Vec3D	src/linalg.h	/^		inline operator Vec3D() const {$/;"	f	class:EGL::Vec4D
ops	src/codegen/arm-dis.c	/^const static char* ops[] = {$/;"	v	file:
otherImage	redbook/texbind.c	/^static GLubyte otherImage[checkImageHeight][checkImageWidth][4];$/;"	v	file:
p	src/codegen/arm-codegen.h	/^		arminstr_t p       :  1; \/* post-index(0) \/ pre-index(1) *\/$/;"	m	struct:__anon84::__anon85
p	src/codegen/arm-codegen.h	/^	arminstr_t p        :  1; \/* pre(1)\/post(0) index *\/$/;"	m	struct:__anon82
p	src/codegen/arm-codegen.h	/^	arminstr_t p      : 1; \/* pre\/post-index *\/$/;"	m	struct:__anon86
p	src/codegen/arm-codegen.h	/^	arminstr_t p    : 1;$/;"	m	struct:__anon90
pFindAppT	ug/ug_win32.c	/^FindAppT, *pFindAppT;$/;"	t	typeref:struct:_FindAppT	file:
pad	src/codegen/arm-codegen.h	/^		arminstr_t pad       : 1; \/* always 0, to differentiate from HXFER etc. *\/$/;"	m	struct:__anon78::__anon79
pad	src/codegen/arm-codegen.h	/^		arminstr_t pad  : 8; \/* 0 *\/$/;"	m	struct:__anon92::__anon93
painter_idle	ug/ug_ftk.c	/^    FtkSource* painter_idle;$/;"	m	struct:ugwindow	file:
palette	test/paint.cpp	/^ RGBQUAD *palette;$/;"	m	struct:DIB2D	file:
pdfdir	projects/linux-ftk/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	projects/linux-x11/Makefile	/^pdfdir = ${docdir}$/;"	m
perpixel	test/paint.cpp	/^ GLint perpixel;$/;"	m	struct:GLTXTLOAD	file:
pfnSaveSurface	ug/ug_ftk.c	/^static PFNSAVESURFACE pfnSaveSurface;	 \/\/ function pointer used to save images $/;"	v	file:
pfnSaveSurface	ug/ug_win32.c	/^static PFNSAVESURFACE pfnSaveSurface;	 \/\/ function pointer used to save images $/;"	v	file:
phExp	test/epoc/paint.cpp	/^ GLfloat phExp;$/;"	m	struct:sample_MATERIAL	file:
phExp	test/paint.cpp	/^ GLfloat phExp;$/;"	m	struct:sample_MATERIAL	file:
phi	src/codegen/instruction.h	/^	cg_inst_phi_t			phi;$/;"	m	union:cg_inst_t
physical_reg	src/codegen/instruction.h	/^	struct cg_physical_reg_t *	physical_reg;		\/* physical register assigned   *\/$/;"	m	struct:cg_virtual_reg_t	typeref:struct:cg_virtual_reg_t::cg_physical_reg_t
physical_reg_event_t	src/codegen/emit.c	/^physical_reg_event_t;$/;"	t	typeref:enum:physical_reg_event_t	file:
physical_reg_event_t	src/codegen/emit.c	/^typedef enum physical_reg_event_t$/;"	g	file:
physical_reg_list_t	src/codegen/emit.c	/^physical_reg_list_t;$/;"	t	typeref:struct:physical_reg_list_t	file:
physical_reg_list_t	src/codegen/emit.c	/^typedef struct physical_reg_list_t$/;"	s	file:
physical_reg_status_t	src/codegen/emit.c	/^physical_reg_status_t;$/;"	t	typeref:enum:physical_reg_status_t	file:
physical_reg_status_t	src/codegen/emit.c	/^typedef enum physical_reg_status_t$/;"	g	file:
pkgconfigDATA_INSTALL	projects/linux-ftk/Makefile	/^pkgconfigDATA_INSTALL = $(INSTALL_DATA)$/;"	m
pkgconfigDATA_INSTALL	projects/linux-x11/Makefile	/^pkgconfigDATA_INSTALL = $(INSTALL_DATA)$/;"	m
pkgconfig_DATA	projects/linux-ftk/Makefile	/^pkgconfig_DATA = libvincent.pc$/;"	m
pkgconfig_DATA	projects/linux-x11/Makefile	/^pkgconfig_DATA = libvincent.pc$/;"	m
pkgconfigdir	projects/linux-ftk/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgconfigdir	projects/linux-x11/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgdatadir	projects/linux-ftk/Makefile	/^pkgdatadir = $(datadir)\/libvincent$/;"	m
pkgdatadir	projects/linux-x11/Makefile	/^pkgdatadir = $(datadir)\/libvincent$/;"	m
pkgincludedir	projects/linux-ftk/Makefile	/^pkgincludedir = $(includedir)\/libvincent$/;"	m
pkgincludedir	projects/linux-x11/Makefile	/^pkgincludedir = $(includedir)\/libvincent$/;"	m
pkglibdir	projects/linux-ftk/Makefile	/^pkglibdir = $(libdir)\/libvincent$/;"	m
pkglibdir	projects/linux-x11/Makefile	/^pkglibdir = $(libdir)\/libvincent$/;"	m
pointer	src/Arrays.h	/^		const GLvoid *		pointer;$/;"	m	struct:EGL::VertexArray
pointer	ug/ug_ftk.c	/^    void (*pointer)(UGWindow w, int button, int state, int x, int y);$/;"	m	struct:ugwindow	file:
pointer	ug/ug_win32.c	/^    void (*pointer)(UGWindow w, int button, int state, int x, int y);$/;"	m	struct:ugwindow	file:
polyfactor	redbook/polyoff.c	/^GLfloat polyfactor = 1.0;$/;"	v
polyunits	redbook/polyoff.c	/^GLfloat polyunits = 1.0;$/;"	v
pred	src/codegen/instruction.h	/^	cg_block_list_t *		pred;			\/* list of predecessor blocks	*\/$/;"	m	struct:cg_block_t
prefix	projects/linux-ftk/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	projects/linux-x11/Makefile	/^prefix = \/usr\/local$/;"	m
prev	src/codegen/emit.c	/^	struct cg_physical_reg_t * prev;				\/* for LRU chain			*\/$/;"	m	struct:cg_physical_reg_t	typeref:struct:cg_physical_reg_t::cg_physical_reg_t	file:
prev	ug/ug_ftk.c	/^    struct ugwindow* next, * prev;$/;"	m	struct:ugwindow	typeref:struct:ugwindow::	file:
prev	ug/ug_win32.c	/^    struct ugwindow* next, * prev;$/;"	m	struct:ugwindow	typeref:struct:ugwindow::	file:
printStrokedString	redbook/stroke.c	/^static void printStrokedString(char *s)$/;"	f	file:
proc	src/codegen/instruction.h	/^	cg_proc_t *				proc;$/;"	m	struct:cg_block_t
proc	src/codegen/instruction.h	/^	cg_proc_t *				proc;$/;"	m	struct:cg_inst_call_t
proc_allocate_variables	src/codegen/instruction.c	/^static void proc_allocate_variables(cg_proc_t * proc)$/;"	f	file:
proc_controlflow	src/codegen/instruction.c	/^static void proc_controlflow(cg_proc_t * proc)$/;"	f	file:
proc_dataflow	src/codegen/instruction.c	/^static void proc_dataflow(cg_proc_t * proc)$/;"	f	file:
proc_inst_def	src/codegen/instruction.c	/^static void proc_inst_def(cg_proc_t * proc)$/;"	f	file:
proc_inst_use_chains	src/codegen/instruction.c	/^static void proc_inst_use_chains(cg_proc_t * proc)$/;"	f	file:
process_phi	src/codegen/emit.c	/^static void process_phi(cg_codegen_t * gen, cg_inst_phi_t * inst)$/;"	f	file:
processor	src/codegen/emit.c	/^	cg_processor_info_t *	processor;$/;"	m	struct:cg_codegen_t	file:
procs	src/codegen/instruction.h	/^	cg_proc_t *			procs;$/;"	m	struct:cg_module_t
program_transform_name	projects/linux-ftk/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	projects/linux-x11/Makefile	/^program_transform_name = s,x,x,$/;"	m
prologue	src/codegen/instruction.h	/^	struct cg_label_t * prologue;			\/* assembly label begin			*\/$/;"	m	struct:cg_proc_t	typeref:struct:cg_proc_t::cg_label_t
prototypes	projects/linux-ftk/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prototypes	projects/linux-x11/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psdir	projects/linux-ftk/Makefile	/^psdir = ${docdir}$/;"	m
psdir	projects/linux-x11/Makefile	/^psdir = ${docdir}$/;"	m
ptr	src/ContextTexture.cpp	/^		const U8 * ptr;$/;"	m	struct:__anon38::ConstU4Ptr	file:
ptr	src/Epoc/egl.cpp	/^		void * ptr;$/;"	m	struct:__anon15	file:
ptr	src/WinCE/egl.cpp	/^	void * ptr;$/;"	m	struct:__anon56	file:
ptr	src/linux-ftk/egl.cpp	/^    void (APIENTRY * ptr)(void);$/;"	m	struct:__anon4	file:
ptr	src/linux-x11/egl.cpp	/^    void (APIENTRY * ptr)(void);$/;"	m	struct:__anon19	file:
ptr	src/win/egl.cpp	/^	void (APIENTRY * ptr)(void);$/;"	m	struct:__anon49	file:
pzExeName	ug/ug_win32.c	/^	TCHAR *pzExeName;$/;"	m	struct:_FindAppT	file:
r	src/Color.h	/^		U8	r, g, b, a;							\/\/ rgba components$/;"	m	class:EGL::Color
r	src/FractionalColor.h	/^		EGL_Fixed	r, g, b, a;			\/\/ rgba components$/;"	m	class:EGL::FractionalColor
r2	src/codegen/arm-codegen.h	/^	ARMDPI_op2_reg_shift r2;$/;"	m	union:__anon76
r2	src/codegen/arm-codegen.h	/^	ARMDPI_op2_reg_shift r2;$/;"	m	union:__anon78
raw	src/codegen/arm-codegen.h	/^	arminstr_t      raw;$/;"	m	union:__anon96
rd	src/codegen/arm-codegen.h	/^		arminstr_t rd      :  4;$/;"	m	struct:__anon84::__anon85
rd	src/codegen/arm-codegen.h	/^		arminstr_t rd     :  4; \/* destination reg *\/$/;"	m	struct:__anon80::__anon81
rd	src/codegen/arm-codegen.h	/^	arminstr_t rd     : 4;$/;"	m	struct:__anon83
rd	src/codegen/arm-codegen.h	/^	arminstr_t rd     : 4;$/;"	m	struct:__anon86
rd	src/codegen/arm-codegen.h	/^	arminstr_t rd   :  4;$/;"	m	struct:__anon94
rd	src/codegen/arm-codegen.h	/^	arminstr_t rd   :  4;$/;"	m	struct:__anon95
rd	src/codegen/arm-codegen.h	/^	arminstr_t rd   : 4;$/;"	m	struct:__anon87
rd	src/codegen/arm-codegen.h	/^	arminstr_t rd   : 4;$/;"	m	struct:__anon91
redisplay	ug/ug_ftk.c	/^static Ret redisplay(void* ctx)$/;"	f	file:
redraw	ug/ug_ftk.c	/^    int redraw;$/;"	m	struct:ugwindow	file:
redraw	ug/ug_win32.c	/^    int redraw;$/;"	m	struct:ugwindow	file:
ref_type	src/codegen/emit.c	/^	cg_reference_type_t		ref_type;$/;"	m	struct:reference_t	file:
reference_t	src/codegen/emit.c	/^reference_t;$/;"	t	typeref:struct:reference_t	file:
reference_t	src/codegen/emit.c	/^typedef struct reference_t$/;"	s	file:
refs	src/codegen/emit.c	/^	reference_t *			refs;$/;"	m	struct:cg_label_t	file:
reg	src/codegen/arm-codegen.h	/^	} reg;$/;"	m	union:__anon78	typeref:struct:__anon78::__anon79
reg	src/codegen/instruction.h	/^	cg_virtual_reg_t *				reg;$/;"	m	struct:cg_virtual_reg_list_t
regA	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regA;	$/;"	m	struct:EGL::FragmentGenerationInfo
regB	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regB; $/;"	m	struct:EGL::FragmentGenerationInfo
regDepth	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regDepth;$/;"	m	struct:EGL::FragmentGenerationInfo
regFog	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regFog;$/;"	m	struct:EGL::FragmentGenerationInfo
regG	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regG;$/;"	m	struct:EGL::FragmentGenerationInfo
regInfo	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regInfo;$/;"	m	struct:EGL::FragmentGenerationInfo
regR	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regR;$/;"	m	struct:EGL::FragmentGenerationInfo
regTexture	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regTexture[EGL_NUM_TEXTURE_UNITS];$/;"	m	struct:EGL::FragmentGenerationInfo
regU	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regU[EGL_NUM_TEXTURE_UNITS];$/;"	m	struct:EGL::FragmentGenerationInfo
regV	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regV[EGL_NUM_TEXTURE_UNITS]; $/;"	m	struct:EGL::FragmentGenerationInfo
regX	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regX;$/;"	m	struct:EGL::FragmentGenerationInfo
regY	src/arm/CodeGenerator.h	/^		cg_virtual_reg_t * regY;$/;"	m	struct:EGL::FragmentGenerationInfo
reg_alias	src/codegen/arm-dis.c	/^const static char* reg_alias[] = {$/;"	v	file:
reg_array	src/codegen/instruction.h	/^	cg_virtual_reg_t **	reg_array;			\/* array of register pointers	*\/	$/;"	m	struct:cg_proc_t
reg_event_allocate	src/codegen/emit.c	/^	reg_event_allocate,$/;"	e	enum:physical_reg_event_t	file:
reg_event_deallocate	src/codegen/emit.c	/^	reg_event_deallocate,$/;"	e	enum:physical_reg_event_t	file:
reg_event_define	src/codegen/emit.c	/^	reg_event_define,$/;"	e	enum:physical_reg_event_t	file:
reg_event_init	src/codegen/emit.c	/^	reg_event_init,$/;"	e	enum:physical_reg_event_t	file:
reg_event_load	src/codegen/emit.c	/^	reg_event_load,$/;"	e	enum:physical_reg_event_t	file:
reg_event_reassign	src/codegen/emit.c	/^	reg_event_reassign$/;"	e	enum:physical_reg_event_t	file:
reg_event_save	src/codegen/emit.c	/^	reg_event_save,$/;"	e	enum:physical_reg_event_t	file:
reg_list	src/codegen/arm-codegen.h	/^	arminstr_t reg_list : 16; \/* bitfield *\/$/;"	m	struct:__anon82
reg_list_add	src/codegen/emit.c	/^void reg_list_add(physical_reg_list_t * list, cg_physical_reg_t * reg)$/;"	f
reg_list_move_to_front	src/codegen/emit.c	/^void reg_list_move_to_front(physical_reg_list_t * list, cg_physical_reg_t * reg)$/;"	f
reg_list_remove	src/codegen/emit.c	/^void reg_list_remove(physical_reg_list_t * list, cg_physical_reg_t * reg)$/;"	f
reg_no	src/codegen/instruction.h	/^	size_t						reg_no;				\/* virtual register number		*\/$/;"	m	struct:cg_virtual_reg_t
reg_offset	src/codegen/instruction.h	/^	}					reg_offset;$/;"	m	union:__anon60	typeref:struct:__anon60::__anon61
reg_status_allocated	src/codegen/emit.c	/^	reg_status_allocated,$/;"	e	enum:physical_reg_status_t	file:
reg_status_defined	src/codegen/emit.c	/^	reg_status_defined,$/;"	e	enum:physical_reg_status_t	file:
reg_status_dirty	src/codegen/emit.c	/^	reg_status_dirty,$/;"	e	enum:physical_reg_status_t	file:
reg_status_free	src/codegen/emit.c	/^	reg_status_free,$/;"	e	enum:physical_reg_status_t	file:
reg_status_init	src/codegen/emit.c	/^	reg_status_init,$/;"	e	enum:physical_reg_status_t	file:
reg_status_secondary	src/codegen/emit.c	/^	reg_status_secondary$/;"	e	enum:physical_reg_status_t	file:
register_sort	src/codegen/emit.c	/^static int register_sort(const void * first, const void * second)$/;"	f	file:
registers	src/codegen/emit.c	/^	cg_physical_reg_t			registers[PHYSICAL_REGISTERS];$/;"	m	struct:cg_codegen_t	file:
registers	src/codegen/instruction.h	/^	cg_virtual_reg_t *  registers;			\/* list of virtual registers	*\/$/;"	m	struct:cg_proc_t
regno	src/codegen/emit.c	/^	ARMReg					regno;				\/* physical register		*\/$/;"	m	struct:cg_physical_reg_t	file:
regs	src/codegen/instruction.h	/^	cg_virtual_reg_list_t * regs;$/;"	m	struct:cg_inst_phi_t
renderSphere	redbook/fog.c	/^static void renderSphere (GLfloat x, GLfloat y, GLfloat z)$/;"	f	file:
representative	src/codegen/instruction.h	/^	cg_virtual_reg_t *			representative;		\/* for union-find				*\/$/;"	m	struct:cg_virtual_reg_t
reshape	demos/hello.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/aargb.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/alpha.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/alpha3D.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/checker.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/colormat.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/cube.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/double.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/fog.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/light.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/lines.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/material.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/mipmap.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/model.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/movelight.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/planet.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/polyoff.c	/^void reshape(UGWindow uwin, int width, int height)$/;"	f
reshape	redbook/robot.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/scene.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/smooth.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/stencil.c	/^void reshape(int w, int h)$/;"	f
reshape	redbook/stroke.c	/^void reshape(int w, int h)$/;"	f
reshape	redbook/texbind.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/texsub.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/torus.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/varray.c	/^void reshape (UGWindow uwin, int w, int h)$/;"	f
reshape	redbook/wrap.c	/^void reshape(UGWindow uwin, int w, int h)$/;"	f
reshape	ug/ug_ftk.c	/^    void (*reshape)(UGWindow w, int width,int height);$/;"	m	struct:ugwindow	file:
reshape	ug/ug_win32.c	/^    void (*reshape)(UGWindow w, int width,int height);$/;"	m	struct:ugwindow	file:
restore_flags	src/codegen/emit.c	/^static void restore_flags(cg_codegen_t * gen, cg_physical_reg_t * reg)$/;"	f	file:
restore_reg	src/codegen/emit.c	/^static void restore_reg(cg_codegen_t * gen, cg_physical_reg_t * physical_reg,$/;"	f	file:
result	src/codegen/instruction.h	/^	cg_virtual_reg_t *  result;$/;"	m	struct:cg_inst_ret_t
ret	src/codegen/instruction.h	/^	cg_inst_ret_t			ret;$/;"	m	union:cg_inst_t
rm	src/codegen/arm-codegen.h	/^		arminstr_t rm   : 4;$/;"	m	struct:__anon92::__anon93
rm	src/codegen/arm-codegen.h	/^	arminstr_t rm     : 4; \/* imm_lo *\/$/;"	m	struct:__anon86
rm	src/codegen/arm-codegen.h	/^	arminstr_t rm     : 4;$/;"	m	struct:__anon83
rm	src/codegen/arm-codegen.h	/^	arminstr_t rm   :  4;$/;"	m	struct:__anon95
rm	src/codegen/arm-codegen.h	/^	arminstr_t rm   : 4;$/;"	m	struct:__anon75
rm	src/codegen/arm-codegen.h	/^	arminstr_t rm   : 4;$/;"	m	struct:__anon87
rn	src/codegen/arm-codegen.h	/^		arminstr_t rn      :  4;$/;"	m	struct:__anon84::__anon85
rn	src/codegen/arm-codegen.h	/^		arminstr_t rn     :  4; \/* first operand reg *\/$/;"	m	struct:__anon80::__anon81
rn	src/codegen/arm-codegen.h	/^	arminstr_t rn       :  4; \/* base reg *\/$/;"	m	struct:__anon82
rn	src/codegen/arm-codegen.h	/^	arminstr_t rn     : 4;$/;"	m	struct:__anon83
rn	src/codegen/arm-codegen.h	/^	arminstr_t rn     : 4;$/;"	m	struct:__anon86
rn	src/codegen/arm-codegen.h	/^	arminstr_t rn   : 4;$/;"	m	struct:__anon87
rn	src/codegen/arm-codegen.h	/^	arminstr_t rn   : 4;$/;"	m	struct:__anon90
rot	src/codegen/arm-codegen.h	/^	arminstr_t rot : 4;$/;"	m	struct:__anon74
rotAngle	redbook/aargb.c	/^static float rotAngle = 0.;$/;"	v	file:
rs	src/codegen/arm-codegen.h	/^		arminstr_t rs        : 4;$/;"	m	struct:__anon78::__anon79
rs	src/codegen/arm-codegen.h	/^	arminstr_t rs     : 4;$/;"	m	struct:__anon83
runtime	src/codegen/emit.c	/^	cg_runtime_info_t *		runtime;$/;"	m	struct:cg_codegen_t	file:
s	src/codegen/arm-codegen.h	/^		arminstr_t s      :  1; \/* S-bit controls PSR update *\/$/;"	m	struct:__anon80::__anon81
s	src/codegen/arm-codegen.h	/^	arminstr_t s        :  1; \/* restore PSR, force user bit *\/$/;"	m	struct:__anon82
s	src/codegen/arm-codegen.h	/^	arminstr_t s      : 1; \/* sign-extend or zero-extend *\/$/;"	m	struct:__anon86
s	src/codegen/arm-codegen.h	/^	arminstr_t s      : 1;$/;"	m	struct:__anon83
s_AllConfigurations	src/Config.cpp	/^    const EGL::Config s_AllConfigurations[] = {$/;"	m	namespace:__anon51	file:
s_BytesPerPixel	src/Texture.cpp	/^const U8 Texture :: s_BytesPerPixel[] = {$/;"	m	class:Texture	file:
s_BytesPerPixel	src/Texture.h	/^		const static U8 s_BytesPerPixel[];$/;"	m	class:EGL::Texture
s_NumConfigurations	src/Config.cpp	/^    const int s_NumConfigurations = 1;$/;"	m	namespace:__anon51	file:
s_NumConfigurations	src/Epoc/ConfigEpoc.cpp	/^    const int s_NumConfigurations=1;$/;"	v
s_TlsIndexError	src/WinCE/egl.cpp	/^DWORD s_TlsIndexError;$/;"	v
s_TlsIndexError	src/linux-ftk/egl.cpp	/^pthread_key_t s_TlsIndexError;$/;"	v
s_TlsIndexError	src/linux-x11/egl.cpp	/^pthread_key_t s_TlsIndexError;$/;"	v
s_TlsIndexError	src/win/egl.cpp	/^DWORD s_TlsIndexError;$/;"	v
s_sai	test/testce.cpp	/^static SHACTIVATEINFO s_sai;$/;"	v	file:
s_sai	ug/ug_win32.c	/^static SHACTIVATEINFO s_sai;$/;"	v	file:
sample_MATERIAL	test/epoc/paint.cpp	/^struct sample_MATERIAL{$/;"	s	file:
sample_MATERIAL	test/paint.cpp	/^struct sample_MATERIAL{$/;"	s	file:
sample_TEXTURE	test/epoc/paint.cpp	/^struct sample_TEXTURE{$/;"	s	file:
sample_TEXTURE	test/paint.cpp	/^struct sample_TEXTURE{$/;"	s	file:
save_flags	src/codegen/emit.c	/^static void save_flags(cg_codegen_t * gen, cg_physical_reg_t * physical_reg)$/;"	f	file:
save_reg	src/codegen/emit.c	/^static void save_reg(cg_codegen_t * gen, cg_physical_reg_t * physical_reg,$/;"	f	file:
sbindir	projects/linux-ftk/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	projects/linux-x11/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
segment	src/codegen/arm-dis.h	/^	cg_segment_t * segment;$/;"	m	struct:_ARMDis
sel	src/codegen/arm-codegen.h	/^		arminstr_t sel  : 1;$/;"	m	struct:__anon92::__anon93
sel	src/codegen/arm-codegen.h	/^	arminstr_t sel  :  1; \/* CPSR | SPSR *\/$/;"	m	struct:__anon94
select_global_regs	src/codegen/emit.c	/^static void select_global_regs(cg_codegen_t * gen, cg_proc_t * proc)$/;"	f	file:
setW	src/linalg.h	/^		inline void setW(EGL_Fixed value) {$/;"	f	class:EGL::Vec4D
setX	src/linalg.h	/^		inline void setX(EGL_Fixed value) {$/;"	f	class:EGL::Vec3D
setX	src/linalg.h	/^		inline void setX(EGL_Fixed value) {$/;"	f	class:EGL::Vec4D
setY	src/linalg.h	/^		inline void setY(EGL_Fixed value) {$/;"	f	class:EGL::Vec3D
setY	src/linalg.h	/^		inline void setY(EGL_Fixed value) {$/;"	f	class:EGL::Vec4D
setZ	src/linalg.h	/^		inline void setZ(EGL_Fixed value) {$/;"	f	class:EGL::Vec3D
setZ	src/linalg.h	/^		inline void setZ(EGL_Fixed value) {$/;"	f	class:EGL::Vec4D
setupInterleave	redbook/varray.c	/^void setupInterleave(void)$/;"	f
setupMethod	redbook/varray.c	/^int setupMethod = POINTER;$/;"	v
setupPointers	redbook/varray.c	/^void setupPointers(void)$/;"	f
sharedstatedir	projects/linux-ftk/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	projects/linux-x11/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shift	src/codegen/arm-codegen.h	/^		arminstr_t shift : 5;$/;"	m	struct:__anon76::__anon77
shift	src/codegen/instruction.h	/^		U32					shift;$/;"	m	struct:__anon57::__anon59
shift	src/codegen/instruction.h	/^		cg_virtual_reg_t *  shift;$/;"	m	struct:__anon57::__anon58
shift_immed	src/codegen/instruction.h	/^	}					shift_immed;$/;"	m	union:__anon57	typeref:struct:__anon57::__anon59
shift_opcodes	src/codegen/instruction.c	/^static const char * const shift_opcodes[] = $/;"	v	file:
shift_reg	src/codegen/instruction.h	/^	}					shift_reg;$/;"	m	union:__anon57	typeref:struct:__anon57::__anon58
shift_types	src/codegen/arm-dis.c	/^const static char* shift_types[] = {"lsl", "lsr", "asr", "ror"};$/;"	v	file:
shoulder	redbook/robot.c	/^static int shoulder = 0, elbow = 0;$/;"	v	file:
size	src/Arrays.h	/^		size_t				size;$/;"	m	struct:EGL::VertexArray
solidZ	demos/hello.c	/^static float solidZ = MAXZ;$/;"	v	file:
solidZ	redbook/alpha3D.c	/^static float solidZ = MAXZ;$/;"	v	file:
some_variable	projects/linux-ftk/conftest.c	/^int some_variable = 0;$/;"	v
source	src/codegen/instruction.h	/^		cg_virtual_reg_t *  source;$/;"	m	struct:__anon57::__anon58
source	src/codegen/instruction.h	/^		cg_virtual_reg_t *  source;$/;"	m	struct:__anon57::__anon59
source	src/codegen/instruction.h	/^	cg_virtual_reg_t *  source;$/;"	m	struct:cg_inst_binary_t
source	src/codegen/instruction.h	/^	cg_virtual_reg_t *  source;$/;"	m	struct:cg_inst_compare_t
source	src/codegen/instruction.h	/^	cg_virtual_reg_t *  source;$/;"	m	struct:cg_inst_store_t
source	src/codegen/instruction.h	/^	cg_virtual_reg_t *  source;$/;"	m	union:__anon57
specular	test/epoc/paint.cpp	/^ GLfloat specular[3];$/;"	m	struct:sample_MATERIAL	file:
specular	test/paint.cpp	/^ GLfloat specular[3];$/;"	m	struct:sample_MATERIAL	file:
spill_candidate	src/codegen/emit.c	/^static cg_physical_reg_t * spill_candidate(cg_codegen_t * gen, $/;"	f	file:
spin	redbook/double.c	/^static GLfloat spin = 0.0;$/;"	v	file:
spin	redbook/movelight.c	/^static int spin = 0;$/;"	v	file:
spinDisplay	redbook/double.c	/^void spinDisplay(UGWindow uwin)$/;"	f
spinx	redbook/polyoff.c	/^GLint spinx = 0;$/;"	v
spiny	redbook/polyoff.c	/^GLint spiny = 0;$/;"	v
sqrt_HP_16_32s	src/codegen/emit.h	/^	I32 (*sqrt_HP_16_32s)		(I32 src);$/;"	m	struct:cg_runtime_info_t
sqrt_LP_16_32s	src/codegen/emit.h	/^	I32 (*sqrt_LP_16_32s)		(I32 src);$/;"	m	struct:cg_runtime_info_t
src_dir	projects/linux-ftk/Makefile	/^src_dir = .\/..\/..\/src$/;"	m
src_dir	projects/linux-x11/Makefile	/^src_dir = .\/..\/..\/src$/;"	m
srcdir	projects/linux-ftk/Makefile	/^srcdir = .$/;"	m
srcdir	projects/linux-x11/Makefile	/^srcdir = .$/;"	m
state	src/codegen/emit.c	/^	physical_reg_status_t	state;				\/* current register state	*\/$/;"	m	struct:cg_physical_reg_t	file:
store	src/codegen/instruction.h	/^	cg_inst_store_t			store;$/;"	m	union:cg_inst_t
stride	src/Arrays.h	/^		GLsizei				stride;$/;"	m	struct:EGL::VertexArray
subImage	redbook/texsub.c	/^static GLubyte subImage[subImageHeight][subImageWidth][4];$/;"	v	file:
subImageHeight	redbook/texsub.c	53;"	d	file:
subImageWidth	redbook/texsub.c	52;"	d	file:
subdir	projects/linux-ftk/Makefile	/^subdir = .$/;"	m
subdir	projects/linux-x11/Makefile	/^subdir = .$/;"	m
succ	src/codegen/instruction.h	/^	cg_block_list_t *		succ;			\/* list of successor blocks		*\/$/;"	m	struct:cg_block_t
surface	ug/ug_ftk.c	/^    EGLSurface surface;$/;"	m	struct:ugwindow	file:
surface	ug/ug_win32.c	/^    EGLSurface surface;$/;"	m	struct:ugwindow	file:
swi	src/codegen/arm-codegen.h	/^	ARMInstrSWI   swi;$/;"	m	union:__anon96
swp	src/codegen/arm-codegen.h	/^	ARMInstrSwap  swp;$/;"	m	union:__anon96
sysconfdir	projects/linux-ftk/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	projects/linux-x11/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
szTitle	test/testwin.cpp	/^TCHAR szTitle[MAX_LOADSTRING];					\/\/ The title bar text$/;"	v
szWindowClass	test/testwin.cpp	/^TCHAR szWindowClass[MAX_LOADSTRING];			\/\/ the main window class name$/;"	v
tag	src/codegen/arm-codegen.h	/^		arminstr_t tag     :  2; \/* 0 1 *\/$/;"	m	struct:__anon84::__anon85
tag	src/codegen/arm-codegen.h	/^		arminstr_t tag    :  2; \/* 0 0 *\/$/;"	m	struct:__anon80::__anon81
tag	src/codegen/arm-codegen.h	/^		arminstr_t tag  : 2; \/* 0 *\/$/;"	m	struct:__anon92::__anon93
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag      :  3; \/* 1 0 0 *\/$/;"	m	struct:__anon82
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag    :  3; \/* 1 0 1 *\/$/;"	m	struct:__anon73
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag    : 3;$/;"	m	struct:__anon86
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag    : 4;$/;"	m	struct:__anon83
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag  :  12;$/;"	m	struct:__anon95
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag  :  4;$/;"	m	struct:__anon88
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag  :  5;$/;"	m	struct:__anon94
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag  : 1; \/* 0 - immediate shift, 1 - reg shift *\/$/;"	m	struct:__anon75
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag  : 3;$/;"	m	struct:__anon90
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag  : 4; \/* 0xE *\/$/;"	m	struct:__anon89
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag  : 4;$/;"	m	struct:__anon91
tag	src/codegen/arm-codegen.h	/^	arminstr_t tag  : 5; \/* 0x2 *\/$/;"	m	struct:__anon87
tag2	src/codegen/arm-codegen.h	/^		arminstr_t tag2 : 2; \/* 0x2 *\/$/;"	m	struct:__anon92::__anon93
tag2	src/codegen/arm-codegen.h	/^	arminstr_t tag2   : 1; \/* 1 *\/$/;"	m	struct:__anon86
tag2	src/codegen/arm-codegen.h	/^	arminstr_t tag2   : 4;   \/* 9 *\/$/;"	m	struct:__anon83
tag2	src/codegen/arm-codegen.h	/^	arminstr_t tag2 :  6;$/;"	m	struct:__anon94
tag2	src/codegen/arm-codegen.h	/^	arminstr_t tag2 :  8;$/;"	m	struct:__anon95
tag2	src/codegen/arm-codegen.h	/^	arminstr_t tag2 : 1; \/* 0 *\/$/;"	m	struct:__anon89
tag2	src/codegen/arm-codegen.h	/^	arminstr_t tag2 : 1;$/;"	m	struct:__anon91
tag2	src/codegen/arm-codegen.h	/^	arminstr_t tag2 : 2;$/;"	m	struct:__anon87
tag3	src/codegen/arm-codegen.h	/^		arminstr_t tag3 : 2; \/* 0x2 *\/$/;"	m	struct:__anon92::__anon93
tag3	src/codegen/arm-codegen.h	/^	arminstr_t tag3   : 1; \/* 1 *\/$/;"	m	struct:__anon86
tag3	src/codegen/arm-codegen.h	/^	arminstr_t tag3 : 12;$/;"	m	struct:__anon94
tag3	src/codegen/arm-codegen.h	/^	arminstr_t tag3 : 8; \/* 0x9 *\/$/;"	m	struct:__anon87
tag4	src/codegen/arm-codegen.h	/^		arminstr_t tag4 : 4; \/* 0xF *\/$/;"	m	struct:__anon92::__anon93
tagBITMAPFILEHEADER	src/linux-ftk/Surface.cpp	/^typedef struct tagBITMAPFILEHEADER { $/;"	s	file:
tagBITMAPFILEHEADER	src/linux-x11/Surface.cpp	/^typedef struct tagBITMAPFILEHEADER { $/;"	s	file:
tagBITMAPINFOHEADER	src/linux-ftk/Surface.cpp	/^typedef struct tagBITMAPINFOHEADER$/;"	s	file:
tagBITMAPINFOHEADER	src/linux-x11/Surface.cpp	/^typedef struct tagBITMAPINFOHEADER$/;"	s	file:
tail	src/codegen/emit.c	/^	cg_physical_reg_t *		tail;	$/;"	m	struct:physical_reg_list_t	file:
tail	src/codegen/instruction.h	/^	cg_inst_t *					tail;$/;"	m	struct:cg_inst_list_head_t
target	src/codegen/instruction.h	/^	cg_block_ref_t *	target;$/;"	m	struct:cg_branch_t
target_alias	projects/linux-ftk/Makefile	/^target_alias = $/;"	m
target_alias	projects/linux-x11/Makefile	/^target_alias = $/;"	m
tdist	redbook/polyoff.c	/^GLfloat tdist = 0.0;$/;"	v
test1	redbook/stroke.c	/^char *test1 = "A SPARE SERAPE APPEARS AS";$/;"	v
test2	redbook/stroke.c	/^char *test2 = "APES PREPARE RARE PEPPERS";$/;"	v
texName	redbook/checker.c	/^static GLuint texName;$/;"	v	file:
texName	redbook/mipmap.c	/^static GLuint texName;$/;"	v	file:
texName	redbook/texbind.c	/^static GLuint texName[2];$/;"	v	file:
texName	redbook/texsub.c	/^static GLuint texName;$/;"	v	file:
texName	redbook/wrap.c	/^static GLuint texName;$/;"	v	file:
texture	test/epoc/paint.cpp	/^ int   texture;$/;"	m	struct:sample_MATERIAL	file:
texture	test/paint.cpp	/^ int   texture;$/;"	m	struct:sample_MATERIAL	file:
texture_maps	test/epoc/paint.cpp	/^const sample_TEXTURE texture_maps [1] = {$/;"	v
texture_maps	test/paint.cpp	/^static sample_TEXTURE texture_maps [1] = {$/;"	v	file:
textures	test/epoc/paint.cpp	/^const GLfloat textures [822][2] = {$/;"	v
textures	test/paint.cpp	/^static GLfloat textures [822][2] = {$/;"	v	file:
top_builddir	projects/linux-ftk/Makefile	/^top_builddir = .$/;"	m
top_builddir	projects/linux-x11/Makefile	/^top_builddir = .$/;"	m
top_distdir	projects/linux-ftk/Makefile	/^top_distdir = .$/;"	m
top_distdir	projects/linux-x11/Makefile	/^top_distdir = .$/;"	m
top_srcdir	projects/linux-ftk/Makefile	/^top_srcdir = .$/;"	m
top_srcdir	projects/linux-x11/Makefile	/^top_srcdir = .$/;"	m
torus	redbook/torus.c	/^static void torus(int numc, int numt)$/;"	f	file:
total	src/codegen/heap.c	/^	size_t total;$/;"	m	struct:block_t	file:
transform	projects/linux-ftk/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	projects/linux-x11/Makefile	/^transform = $(program_transform_name)$/;"	m
transparentZ	demos/hello.c	/^static float transparentZ = MINZ;$/;"	v	file:
transparentZ	redbook/alpha3D.c	/^static float transparentZ = MINZ;$/;"	v	file:
triangle	redbook/smooth.c	/^void triangle(void)$/;"	f
tu	src/Rasterizer.h	/^		EGL_Fixed		tu, tv;			\/\/ texture coordinates between 0 and 1$/;"	m	struct:EGL::TexCoord
tv	src/Rasterizer.h	/^		EGL_Fixed		tu, tv;			\/\/ texture coordinates between 0 and 1$/;"	m	struct:EGL::TexCoord
type	redbook/stroke.c	/^   int    type;$/;"	m	struct:charpoint	file:
type	src/Arrays.h	/^		GLenum				type;$/;"	m	struct:EGL::VertexArray
type	src/codegen/arm-codegen.h	/^		arminstr_t type    :  1; \/* imm(0) \/ register(1) *\/$/;"	m	struct:__anon84::__anon85
type	src/codegen/arm-codegen.h	/^		arminstr_t type   :  1; \/* type of op2, 0 = register, 1 = immediate *\/$/;"	m	struct:__anon80::__anon81
type	src/codegen/arm-codegen.h	/^		arminstr_t type : 1;$/;"	m	struct:__anon92::__anon93
type	src/codegen/arm-codegen.h	/^	arminstr_t type   : 1; \/* imm(1) \/ reg(0) *\/$/;"	m	struct:__anon86
type	src/codegen/arm-codegen.h	/^	arminstr_t type : 2; \/* shift type - logical, arithmetic, rotate *\/$/;"	m	struct:__anon75
type	src/codegen/instruction.h	/^	cg_reg_type_t				type;				\/* type of this register		*\/$/;"	m	struct:cg_virtual_reg_t
u	src/codegen/arm-codegen.h	/^		arminstr_t u       :  1; \/* down(0) \/ up(1) *\/$/;"	m	struct:__anon84::__anon85
u	src/codegen/arm-codegen.h	/^	arminstr_t u        :  1; \/* up\/down *\/$/;"	m	struct:__anon82
u	src/codegen/arm-codegen.h	/^	arminstr_t u      : 1; \/* +- *\/$/;"	m	struct:__anon86
u	src/codegen/arm-codegen.h	/^	arminstr_t u    : 1;$/;"	m	struct:__anon90
uGDraw	ug/ug_ftk.c	/^typedef void (*uGDraw)(UGWindow w);$/;"	t	file:
uGIdle	ug/ug_ftk.c	/^typedef void (*uGIdle)(UGWindow w);$/;"	t	file:
uGKbd	ug/ug_ftk.c	/^typedef void (*uGKbd)(UGWindow w, int key, int x, int y);$/;"	t	file:
uGMotion	ug/ug_ftk.c	/^typedef void (*uGMotion)(UGWindow w, int x, int y);$/;"	t	file:
uGPointer	ug/ug_ftk.c	/^typedef void (*uGPointer)(UGWindow w, int button, int state, int x, int y);$/;"	t	file:
uGReshape	ug/ug_ftk.c	/^typedef void (*uGReshape)(UGWindow w, int width,int height);$/;"	t	file:
ug	ug/ug_ftk.c	/^    UGCtx_t* ug;$/;"	m	struct:ugwindow	file:
ug	ug/ug_win32.c	/^    UGCtx_t* ug;$/;"	m	struct:ugwindow	file:
ugCreateWindow	ug/ug_ftk.c	/^ugCreateWindow(UGCtx ug,  const char* config,$/;"	f
ugCreateWindow	ug/ug_win32.c	/^ugCreateWindow(UGCtx ug,  const char* config,$/;"	f
ugCtxFromWin	ug/ug_ftk.c	/^UGCtx APIENTRY ugCtxFromWin(UGWindow uwin) {$/;"	f
ugCtxFromWin	ug/ug_win32.c	/^UGCtx APIENTRY ugCtxFromWin(UGWindow uwin) {$/;"	f
ugDestroyWindow	ug/ug_ftk.c	/^ugDestroyWindow(UGWindow uwin) {$/;"	f
ugDestroyWindow	ug/ug_win32.c	/^ugDestroyWindow(UGWindow uwin) {$/;"	f
ugDisplayFunc	ug/ug_ftk.c	/^ugDisplayFunc(UGWindow uwin, void (*f)(UGWindow uwin)) {$/;"	f
ugDisplayFunc	ug/ug_win32.c	/^ugDisplayFunc(UGWindow uwin, void (*f)(UGWindow uwin)) {$/;"	f
ugFini	ug/ug_ftk.c	/^ugFini(UGCtx ug) {$/;"	f
ugFini	ug/ug_win32.c	/^ugFini(UGCtx ug) {$/;"	f
ugIdleFunc	ug/ug_ftk.c	/^void APIENTRY ugIdleFunc(UGCtx ug, void (*f)(UGWindow w)) $/;"	f
ugIdleFunc	ug/ug_win32.c	/^ugIdleFunc(UGCtx ug, void (*f)(UGWindow w)) {$/;"	f
ugInit	ug/ug_ftk.c	/^UGCtx APIENTRY ugInit(void) $/;"	f
ugInit	ug/ug_win32.c	/^ugInit(void) {$/;"	f
ugKeyboardFunc	ug/ug_ftk.c	/^ugKeyboardFunc(UGWindow uwin, void (*f)(UGWindow uwin, int key, int x, int y)) {$/;"	f
ugKeyboardFunc	ug/ug_win32.c	/^ugKeyboardFunc(UGWindow uwin, void (*f)(UGWindow uwin, int key, int x, int y)) {$/;"	f
ugMainLoop	ug/ug_ftk.c	/^void APIENTRY ugMainLoop(UGCtx ug) $/;"	f
ugMainLoop	ug/ug_win32.c	/^ugMainLoop(UGCtx ug) {$/;"	f
ugMotionFunc	ug/ug_ftk.c	/^ugMotionFunc(UGWindow uwin, void (*f)(UGWindow uwin, int x, int y)) {$/;"	f
ugMotionFunc	ug/ug_win32.c	/^ugMotionFunc(UGWindow uwin, void (*f)(UGWindow uwin, int x, int y)) {$/;"	f
ugPointerFunc	ug/ug_ftk.c	/^ugPointerFunc(UGWindow uwin, void (*f)(UGWindow uwin, int button, int state, int x, int y)) {$/;"	f
ugPointerFunc	ug/ug_win32.c	/^ugPointerFunc(UGWindow uwin, void (*f)(UGWindow uwin, int button, int state, int x, int y)) {$/;"	f
ugPostRedisplay	ug/ug_ftk.c	/^void APIENTRY ugPostRedisplay(UGWindow uwin) $/;"	f
ugPostRedisplay	ug/ug_win32.c	/^ugPostRedisplay(UGWindow uwin) {$/;"	f
ugReshapeFunc	ug/ug_ftk.c	/^ugReshapeFunc(UGWindow uwin, void (*f)(UGWindow uwin, int width, int height)) {$/;"	f
ugReshapeFunc	ug/ug_win32.c	/^ugReshapeFunc(UGWindow uwin, void (*f)(UGWindow uwin, int width, int height)) {$/;"	f
ugSolidBox	ug/ugshape.c	/^ugSolidBox(GLfloat Width, GLfloat Depth, GLfloat Height)$/;"	f
ugSolidConef	ug/ugshape.c	/^ugSolidConef(GLfloat base, GLfloat height, GLint slices, GLint stacks) $/;"	f
ugSolidCubef	ug/ugshape.c	/^ugSolidCubef(GLfloat size) $/;"	f
ugSolidDisk	ug/ugshape.c	/^ugSolidDisk(GLfloat inner_radius, GLfloat outer_radius, GLshort rings, GLshort slices)$/;"	f
ugSolidSpheref	ug/ugshape.c	/^ugSolidSpheref(GLfloat radius, GLint slices, GLint stacks) $/;"	f
ugSolidTorusf	ug/ugshape.c	/^ugSolidTorusf(GLfloat ir, GLfloat or, GLint sides, GLint rings) $/;"	f
ugSolidTube	ug/ugshape.c	/^ugSolidTube(GLfloat radius, GLfloat height, GLshort stacks, GLshort slices)$/;"	f
ugSwapBuffers	ug/ug_ftk.c	/^void APIENTRY ugSwapBuffers(UGWindow uwin) $/;"	f
ugSwapBuffers	ug/ug_win32.c	/^ugSwapBuffers(UGWindow uwin) {$/;"	f
ugWireBox	ug/ugshape.c	/^ugWireBox(GLfloat Width, GLfloat Depth, GLfloat Height)$/;"	f
ugWireCubef	ug/ugshape.c	/^ugWireCubef(GLfloat size) $/;"	f
ugWireDisk	ug/ugshape.c	/^ugWireDisk(GLfloat inner_radius, GLfloat outer_radius, GLshort rings, GLshort slices)$/;"	f
ugWireSpheref	ug/ugshape.c	/^ugWireSpheref(GLfloat radius, GLint slices, GLint stacks) $/;"	f
ugWireTube	ug/ugshape.c	/^ugWireTube(GLfloat radius, GLfloat height, GLshort stacks, GLshort slices)$/;"	f
ug_win_on_event	ug/ug_ftk.c	/^static Ret  ug_win_on_event(void* user_data, void* obj)$/;"	f	file:
ugluLookAtf	ug/uglu.c	/^ugluLookAtf(GLfloat eyex, GLfloat eyey, GLfloat eyez, GLfloat centerx,$/;"	f
ugluLookAtx	ug/uglu.c	/^ugluLookAtx(GLfixed eyex, GLfixed eyey, GLfixed eyez, GLfixed centerx,$/;"	f
ugluPerspectivef	ug/uglu.c	/^ugluPerspectivef(GLfloat fovy, GLfloat aspect, GLfloat n, GLfloat f)$/;"	f
ugluPerspectivex	ug/uglu.c	/^ugluPerspectivex(GLfixed fovy, GLfixed aspect, GLfixed n, GLfixed f)$/;"	f
ugwindow	ug/ug_ftk.c	/^typedef struct ugwindow {$/;"	s	file:
ugwindow	ug/ug_win32.c	/^typedef struct ugwindow {$/;"	s	file:
unary	src/codegen/instruction.h	/^	cg_inst_unary_t			unary;$/;"	m	union:cg_inst_t
update_register_status	src/codegen/emit.c	/^static physical_reg_status_t update_register_status(physical_reg_status_t state, $/;"	f	file:
use	src/codegen/instruction.h	/^	cg_inst_list_t *			use;				\/* use set						*\/$/;"	m	struct:cg_virtual_reg_t
use	src/codegen/instruction.h	/^	struct cg_bitset_t *	use;			\/* set of used regs				*\/$/;"	m	struct:cg_block_t	typeref:struct:cg_block_t::cg_bitset_t
useV5	src/codegen/emit.h	/^	int		useV5;				\/* can use instructions from V5 arch.		*\/$/;"	m	struct:cg_processor_info_t
use_chains	src/codegen/emit.c	/^	cg_inst_list_t **		use_chains;			$/;"	m	struct:cg_codegen_t	file:
use_cost	src/codegen/instruction.h	/^	short						use_cost;			\/* repeated usage cost			*\/$/;"	m	struct:cg_virtual_reg_t
use_reg_alias	src/codegen/arm-dis.c	/^static const int use_reg_alias = 1;$/;"	v	file:
used	src/codegen/instruction.h	/^	int					used : 1;$/;"	m	struct:cg_inst_base_t
used_regs	src/codegen/emit.c	/^	physical_reg_list_t		used_regs;			\/* phys regs in use			*\/$/;"	m	struct:cg_codegen_t	file:
v1	redbook/aargb.c	/^   static const GLfloat v1[] = {$/;"	v	file:
v2	redbook/aargb.c	/^   static const GLfloat v2[] = {$/;"	v	file:
value	src/Arrays.h	/^			U32 value;$/;"	m	struct:EGL::ObjectArray::ObjectRecord
value	src/codegen/emit.c	/^	U32					value;$/;"	m	struct:literal_t	file:
value	src/codegen/instruction.h	/^	I32					value;$/;"	m	struct:cg_inst_load_immed_t
vertices	test/epoc/paint.cpp	/^const GLfloat vertices [376][3] = {$/;"	v
vertices	test/paint.cpp	/^static GLfloat vertices [376][3] = {$/;"	v	file:
virtual_reg	src/codegen/emit.c	/^	cg_virtual_reg_t *		virtual_reg;		\/* assigned virtual reg.	*\/$/;"	m	struct:cg_physical_reg_t	file:
w	src/linalg.h	/^		inline EGL_Fixed w() const {$/;"	f	class:EGL::Vec4D
wb	src/codegen/arm-codegen.h	/^		arminstr_t wb      :  1;$/;"	m	struct:__anon84::__anon85
wb	src/codegen/arm-codegen.h	/^	arminstr_t wb       :  1; \/* write-back "!" *\/$/;"	m	struct:__anon82
wb	src/codegen/arm-codegen.h	/^	arminstr_t wb     : 1;$/;"	m	struct:__anon86
wb	src/codegen/arm-codegen.h	/^	arminstr_t wb   : 1;$/;"	m	struct:__anon90
weight	src/codegen/instruction.h	/^	int						weight;			\/* weighting factor for block	*\/$/;"	m	struct:cg_block_t
width	src/Types.h	/^		GLsizei width;$/;"	m	struct:EGL::Rect
width	ug/ug_ftk.c	/^    int width;$/;"	m	struct:ugwindow	file:
width	ug/ug_win32.c	/^    int width, height;$/;"	m	struct:ugwindow	file:
win	ug/ug_ftk.c	/^    FtkWidget* win;$/;"	m	struct:ugwindow	file:
win	ug/ug_ftk.c	/^    struct ugwindow* win, * winlist;$/;"	m	struct:__anon1	typeref:struct:__anon1::ugwindow	file:
win	ug/ug_win32.c	/^    HWND win;$/;"	m	struct:ugwindow	file:
win	ug/ug_win32.c	/^    struct ugwindow* win, * winlist;$/;"	m	struct:__anon2	typeref:struct:__anon2::ugwindow	file:
winlist	ug/ug_ftk.c	/^    struct ugwindow* win, * winlist;$/;"	m	struct:__anon1	typeref:struct:__anon1::	file:
winlist	ug/ug_win32.c	/^    struct ugwindow* win, * winlist;$/;"	m	struct:__anon2	typeref:struct:__anon2::	file:
wireboxndex	ug/ugshape.c	/^static GLushort wireboxndex[6][4] = $/;"	v	file:
wxfer	src/codegen/arm-codegen.h	/^	ARMInstrWXfer wxfer;$/;"	m	union:__anon96
x	redbook/stroke.c	/^   GLfloat   x, y;$/;"	m	struct:charpoint	file:
x	src/Rasterizer.h	/^		EGL_Fixed		x, invZ;	\/\/ x window coords$/;"	m	struct:EGL::EdgeCoord
x	src/Rasterizer.h	/^		EGL_Fixed		x, y;		\/\/ x, y window coords$/;"	m	struct:EGL::ScreenCoord
x	src/Types.h	/^		GLint x;$/;"	m	struct:EGL::Rect
x	src/linalg.h	/^		inline EGL_Fixed x() const {$/;"	f	class:EGL::Vec3D
x	src/linalg.h	/^		inline EGL_Fixed x() const {$/;"	f	class:EGL::Vec4D
x	test/paint.cpp	/^float x = 0, minX = -100, maxX = 100;$/;"	v
x	ug/ug_ftk.c	/^    int x;$/;"	m	struct:ugwindow	file:
xpow	src/fixed.cpp	/^xpow(EGL_Fixed x, EGL_Fixed y) {$/;"	f	file:
y	redbook/stroke.c	/^   GLfloat   x, y;$/;"	m	struct:charpoint	file:
y	src/Rasterizer.h	/^		EGL_Fixed		x, y;		\/\/ x, y window coords$/;"	m	struct:EGL::ScreenCoord
y	src/Types.h	/^		GLint y;$/;"	m	struct:EGL::Rect
y	src/linalg.h	/^		inline EGL_Fixed y() const {$/;"	f	class:EGL::Vec3D
y	src/linalg.h	/^		inline EGL_Fixed y() const {$/;"	f	class:EGL::Vec4D
y	test/paint.cpp	/^float y = 0, minY = -150, maxY = 150;$/;"	v
y	ug/ug_ftk.c	/^    int y;$/;"	m	struct:ugwindow	file:
year	redbook/planet.c	/^static int year = 0, day = 0;$/;"	v	file:
z	src/linalg.h	/^		inline EGL_Fixed z() const {$/;"	f	class:EGL::Vec3D
z	src/linalg.h	/^		inline EGL_Fixed z() const {$/;"	f	class:EGL::Vec4D
z	test/paint.cpp	/^float z = 0, minZ = -200, maxZ = 200;$/;"	v
~Buffer	src/Buffer.h	/^		~Buffer() { $/;"	f	class:EGL::Buffer
~CAppUi	test/epoc/appui.cpp	/^CAppUi::~CAppUi()$/;"	f	class:CAppUi
~CDoc	test/epoc/doc.cpp	/^CDoc::~CDoc()$/;"	f	class:CDoc
~Context	src/Context.cpp	/^Context :: ~Context() {$/;"	f	class:Context
~FunctionCache	src/arm/FunctionCache.cpp	/^FunctionCache :: ~FunctionCache() {$/;"	f	class:FunctionCache
~MatrixStack	src/MatrixStack.cpp	/^MatrixStack :: ~MatrixStack() {$/;"	f	class:MatrixStack
~MultiTexture	src/Texture.cpp	/^MultiTexture :: ~MultiTexture() {$/;"	f	class:MultiTexture
~ObjectArray	src/Arrays.h	/^		~ObjectArray() {$/;"	f	struct:EGL::ObjectArray
~Rasterizer	src/Rasterizer.cpp	/^Rasterizer :: ~Rasterizer() {$/;"	f	class:Rasterizer
~Surface	src/Epoc/Surface.cpp	/^Surface :: ~Surface() {$/;"	f	class:Surface
~Surface	src/WinCE/Surface.cpp	/^Surface :: ~Surface() {$/;"	f	class:Surface
~Surface	src/linux-ftk/Surface.cpp	/^Surface :: ~Surface() $/;"	f	class:Surface
~Surface	src/linux-x11/Surface.cpp	/^Surface :: ~Surface() $/;"	f	class:Surface
~Surface	src/win/Surface.cpp	/^Surface :: ~Surface() {$/;"	f	class:Surface
~TlsInfo	src/Epoc/ConfigEpoc.cpp	/^    TlsInfo::~TlsInfo()$/;"	f	class:TlsInfo
